{
    "from": "arxiv",
    "scholar_id": null,
    "detail_id": "arXiv:0812.0283",
    "title": "Dichotomy Results for Fixed Point Counting in Boolean Dynamical Systems",
    "abstract": "We present dichotomy theorems regarding the computational complexity of counting fixed points in boolean (discrete) dynamical systems, i.e., finite discrete dynamical systems over the domain {0, 1}. For a class F of boolean functions and a class G of graphs, an (F, G)-system is a boolean dynamical system with local transitions functions lying in F and graphs in G. We show that, if local transition functions are given by lookup tables, then the following complexity classification holds: Let F be a class of boolean functions closed under superposition and let G be a graph class closed under taking minors. If F contains all min-functions, all max-functions, or all self-dual and monotone functions, and G contains all planar graphs, then it is #Pcomplete to compute the number of fixed points in an (F, G)-system; otherwise it is computable in polynomial time. We also prove a dichotomy theorem for the case that local transition functions are given by formulas (over logical bases). This theorem has a significantly more complicated structure than the theorem for lookup tables. A corresponding theorem for boolean circuits coincides with the theorem for formulas. Keywords: Discrete dynamical systems, fixed point, algorithms and complexity.",
    "bib_name": "homan2008dichotomyresultsfixedpoint",
    "md_text": "# Dichotomy Results for Fixed Point Counting in Boolean Dynamical Systems\u2217\n# Abstract\nWe present dichotomy theorems regarding the computational complexity of counting fixed points in boolean (discrete) dynamical systems, i.e., finite discrete dynamical systems over the domain {0, 1}. For a class F of boolean functions and a class G of graphs, an (F, G)-system is a boolean dynamical system with local transitions functions lying in F and graphs in G. We show that, if local transition functions are given by lookup tables, then the following complexity classification holds: Let F be a class of boolean functions closed under superposition and let G be a graph class closed under taking minors. If F contains all min-functions, all max-functions, or all self-dual and monotone functions, and G contains all planar graphs, then it is #Pcomplete to compute the number of fixed points in an (F, G)-system; otherwise it is computable in polynomial time. We also prove a dichotomy theorem for the case that local transition functions are given by formulas (over logical bases). This theorem has a significantly more complicated structure than the theorem for lookup tables. A corresponding theorem for boolean circuits coincides with the theorem for formulas. Keywords: Discrete dynamical systems, fixed point, algorithms and complexity.\n# 1 Introduction\nEfforts to understand the behavior of complex systems have led to various models fo finite discrete dynamical systems, including (finite) cellular automata (see, e.g., [33, 34]) discrete recurrent Hopfield networks (see, e.g., [17, 1]), and concurrent and communicating finite state machines (see, e.g., [21, 24]). A fairly general class of systems was introduced in [6]. There, a finite discrete dynamical system (over a finite domain D) is defined as\n(a) a finite undirected graph, where vertices correspond to variables and edges correspond to an interdependence between the two connected variables, (b) for each vertex v, a local transition function that maps tuples of values (belonging to D) of v and v\u2019s neighbors to values of v, and (c) an update schedule that governs which variables are allowed to update their values in which time steps. Formal definitions can be found in Sect. 2. A central goal in the study of dynamical systems is to classify them according to how easy it is to predict their behavior. In a finite, discrete setting, a certain behavioral pattern is considered predictable if it can be decided in polynomial time whether a given system will show the pattern [10]. Although the pattern reachability problem is, in general, an intractable problem, i.e., at least NP-hard (see, e.g., [15, 27, 4]), many tractable classes of patterns and systems have been identified. However, there is still a serious demand for exhaustive characterizations of islands of predictability. A fundamental behavioral pattern is the fixed point (a.k.a., homogeneous state, or equilibrium). A value assignment to the variables of a system is a fixed point if the values assigned to the variables are left unchanged after the system updates them. Note that fixed points are invariant under changes of the update regime. In this sense, they can be seen as a particularly robust behavior. A series of recent papers has been devoted to the identification of finite systems with tractable/intractable fixed-point analyses [5, 30, 28, 29, 18]. Precise boundaries are known for which systems finding fixed points can be done in polynomial time. For the fixed-point counting problem this is far less so. Contributions of the paper. We prove dichotomy theorems on the computational complexity of counting fixed points in boolean (discrete) dynamical systems, i.e., finite discrete dynamical systems over the domain {0, 1}. For a class F of boolean functions and a class G of graphs, an (F, G)-system is a boolean dynamical system with local transition functions lying in F and a graph lying in G. Following [18], Post classes (a.k.a., clones) and forbidden-minor classes are used to classify (F, G)-systems. In Sect. 4 we state the following theorem (Theorem 9): Let F be a class of boolean function closed under superposition and let G be a minor-closed graph class. If F contains all min-functions, all max-functions, or all self-dual and monotone functions, and G contains all planar graphs, then it is #Pcomplete to compute the number of the fixed points in an (F, G)-system; otherwise it is computable in polynomial time. Here, the local transition functions are supposed to be given by lookup tables. In addition, we prove a dichotomy theorem (Theorem 19) for the case that local transition functions are given by formulas (over logical bases). Moreover, the corresponding theorem for boolean circuits coincides with the theorem for formulas. The theorem has a significantly more complicated structure than for lookup tables. Related work. There is a series of work regarding the complexity of certain computational problems for finite discrete dynamical systems (see, e.g., [15, 27, 5, 2, 3, 30, 28, 4] and the references therein). The problem of counting fixed points of boolean dynamical systems has been studied in [30, 28, 29]. To summarize: counting the number of fixed points is in general #P-complete. So is counting the number of fixed points for boolean dynamical systems with monotone local transition functions over planar bipartite graphs or over uniformly sparse graphs. We note that all system classes considered here are based on formula or circuit representations. That is, if they fit into our scheme at all, then the intractability results fall into the scope of Theorem 19 (and are covered there). Detailed studies of computational problems related to fixed-point existence have been reported in\n[5, 18]. In [18], a complete classification of the fixed-point existence problem with respect to the analysis framework we use in this paper was shown.\n# 2 The Dynamical Systems Framework\nIn this section we present a formal framework for dynamical systems. A fairly general approach is motivated by the theoretical study of simulations. The following is based on [8, 6, 7, 18]. The underlying network structure of a dynamical system is given by an undirected graph G = (V, E) without multi-edges and loops. We suppose that the set V of vertices is ordered. So, without loss of generality, we assume V = {1, 2, . . . , n}. For any vertex set U \u2286V , let NG(U) denote the neighbors of U in G, i.e.,\nIn this section we present a formal framework for dynamical systems. A fairly general approach is motivated by the theoretical study of simulations. The following is based on\nNG(U) =def { j | j /\u2208U and there is an i \u2208U such that {i, j} \u2208E }.\nIf U = {i} for some vertex i, then we use NG(i) as a shorthand for NG({i}). The degree di of a vertex i is the number of its neighbors, i.e., di =def \u2225NG(i)\u2225. A dynamical system S over a domain D is a pair (G, F) where G = (V, E) is an undirected graph (the network) and F = {fi | i \u2208V } is a set of local transition functions fi : Ddi+1 \u2192D. The intuition of the definition is that each vertex i corresponds to an active element (entity, agent, actor etc.) which is always in some state xi and which is capable to change its state, if necessary. The domain of S formalizes the set of possible states of all vertices of the network, i.e., for all i \u2208V , it always holds that xi \u2208D. A vector \u20d7x = (xi)i\u2208V such that xi \u2208D for all i \u2208V is called a configuration of S. The local transition function fi for some vertex i describes how i changes its state depending on the states of its neighbors NG(i) in the network and its own state. We are particularly interested in dynamical systems operating on a discrete time-scale. A discrete dynamical system S = (S, \u03b1) consists of a dynamical system S and a mapping \u03b1 : {1, . . . , T} \u2192P(V ), where V is a set of vertices of the network of S and T \u2208IN. The mapping \u03b1 is called the update schedule and specifies which state updates are realized at certain time-steps: for t \u2208{1, . . . , T}, \u03b1(t) specifies those vertices that simultaneously update their states in step t. A discrete dynamical system S = (S, \u03b1) over domain D induces a global map FS : Dn \u2192Dn where n is the number of vertices of S. For each vertex i \u2208V , define an activity function \u03d5i for a set U \u2286V and \u20d7x = (x1, . . . , xn) \u2208Dn by\nwhere {i1, i2, . . . , idi+1} = {i} \u222aNG(i). For a set U \u2286V , define the global transition function FS[U] : Dn \u2192Dn for all \u20d7x \u2208Dn by\nFS[U](\u20d7x) =def (\u03d51[U](\u20d7x), . . . , \u03d5n[U](\u20d7x)).\nNote that the global transition function does not refer to the update schedule, i.e., it only depends on the dynamical system S and not on S. The function FS : Dn \u2192Dn computed\nby the discrete dynamical system S, the global map of S, is defined by\nThe central notion for our study of dynamical systems is the concept of a fixed point, i.e., a configuration which does not change under any global behavior of the system. Let S = (G, {fi | i \u2208V }) be a dynamical system over domain D. A configuration \u20d7x \u2208Dn is said to be a local fixed point of S for U \u2286V if and only if FS[U](\u20d7x) = \u20d7x. A configuration \u20d7x \u2208Dn is said to be a fixed point of S if and only if \u20d7x is a local fixed point of S for V . Note that a fixed point does not depend on a concrete update schedule: a configuration \u20d7x \u2208Dn is a fixed point of S if and only if for all update schedules \u03b1 : {1, . . . , T} \u2192P(V ), it holds that F(S,\u03b1)(\u20d7x) = \u20d7x.\n# 3 The Analysis Framework\nIn this section we specify our analysis framework for (F, G)-systems. Following [18], local transition functions are classified by Post classes, i.e., superpositionally closed classes of boolean functions, and graphs are classified using the theory of graph minors as a tool. In the following we gather relevant notation.\n# 3.1 Transition Classes\nWe adopt notation from [9]. An n-ary boolean function f is a mapping f : {0, 1}n \u2192{0, 1}. et BF denote the class of all boolean functions. There are two 0-ary boolean functions: 0 =def 0 and c1 =def 1 (which are denoted in formulas by the symbols 0 and 1). There re two 1-ary boolean functions: id(x) =def x and not(x) =def 1 \u2212x (which are denoted n formulas by x for id(x) and x for not(x)). We say that a class F is Post if and only if F contains the function id and F is losed under the introduction of fictive variables, permutations of variables, identification f variables, and substitution (see, e.g., [9] for definitions). It is a famous theorem by Post 22] that the family of all Post classes is a countable lattice with respect to set inclusion. n particular, each Post class is the intersection of a finite set of meet-irreducible classes, which are the following: \u2022 The classes R0 and R1. For b \u2208{0, 1}, a boolean function f is said to be breproducing if and only if f(b, . . . , b) = b. Let Rb denote the class of all b-reproducing functions. \u2022 The class M. For binary n-tuples \u20d7a = (a1, . . . , an) and \u20d7b = (b1, . . . , bn), we say that (a1, . . . , an) \u2264(b1, . . . , bn) if and only if for all i \u2208{1, . . . , n}, it holds that ai \u2264bi. An n-ary boolean function f is said to be monotone if and only if for all \u20d7x, \u20d7y \u2208{0, 1}n, \u20d7x \u2264\u20d7y implies f(\u20d7x) \u2264f(\u20d7y). Let M denote the class of all monotone boolean functions. \u2022 The class D. An n-ary boolean function f is said to be self-dual if and only if for all (x1, . . . , xn) \u2208{0, 1}n, it holds that f(x1, . . . , xn) = not(f(not(x1), . . . , not(xn))). Let D denote the class of all self-dual functions.\n\u2022 The class L. A boolean function f is linear if and only if there exists constants a1, . . . , an \u2208{0, 1} such that f(x1, . . . , xn) = a0 \u2295a1x1 \u2295\u00b7 \u00b7 \u00b7 \u2295anxn. Note that \u2295is understood as addition modulo 2 and xy is understood as multiplication modulo 2. Let L denote the class of all linear functions. The logical basis of L is {\u2295, 0, 1}. \u2022 The classes Sb and Sk b. For b \u2208{0, 1}, a tuple set T \u2286{0, 1}n is said to be bseparating if and only if there is an i \u2208{1, . . . , n} such that for (t1, . . . , tn) \u2208T holds ti = b. A boolean function f is b-separating if and only if f \u22121(b) is b-separating. A function f is called b-separating of level k if and only if every T \u2286f \u22121(b) such that \u2225T\u2225= k is b-separating. Let Sb denote the class of b-separating functions and let Sk b denote the class of all functions which are b-separating of level k. \u2022 The classes E and V. We denote by E the class of all AND functions, i.e., the class of all functions f, the arity of which is n, such that for some set J \u2286{1, . . . , n}, the equality f(x1, . . . , xn) = mini\u2208J xi is satisfied for all x1, . . . , xn \u2208{0, 1}. The logical basis over E is {\u2227, 0, 1}. Dually, we denote by V the class of all OR functions, i.e., the class of all functions f, the arity of which is n, such that for some set J \u2286{1, . . . , n}, the equality f(x1, . . . , xn) = maxi\u2208J xi is satisfied for all x1, . . . , xn \u2208{0, 1}. The logical basis of V is {\u2228, 0, 1}. \u2022 The class N. An n-ary boolean function f is a projection if and only if there is an i \u2208{1, . . . , n} such that for all x1, . . . , xn \u2208{0, 1}, it holds that f(x1, . . . , xn) = xi. A boolean function f is the negation of a projection if and only if there is an i \u2208 {1, . . . , n} such that for all x1, . . . , xn \u2208{0, 1}, it holds that f(x1, . . . , xn) = not(xi). A boolean function f is constant if and only if there exists a b \u2208{0, 1} such that for all x1, . . . , xn \u2208{0, 1}, it holds that f(x1, . . . , xn) = b. Let N denote the class of boolean functions which are projections, negations of projections, or constant functions. te that the classes possess the following inclusion structure (see, e.g., [9]): \u2022 S0 \u2282\u00b7 \u00b7 \u00b7 \u2282Sk 0 \u2282Sk\u22121 0 \u2282\u00b7 \u00b7 \u00b7 \u2282S2 0 \u2282R1 \u2022 S1 \u2282\u00b7 \u00b7 \u00b7 \u2282Sk 1 \u2282Sk\u22121 1 \u2282\u00b7 \u00b7 \u00b7 \u2282S2 1 \u2282R0 \u2022 E \u2282M and V \u2282M \u2022 N \u2282L  other inclusions hold among these classes. Moreover, all Post classes have a finite ical basis. Particular relevance for our studies have the following classes:\nNo other inclusions hold among these classes. Moreover, all Post classes have a finite logical basis. Particular relevance for our studies have the following classes:\n# 3.2 Network Classes\nWe adopt notation from [13]. Let X and Y be two undirected graphs. We say that X is minor of Y if and only if there is a subgraph Y \u2032 of Y such that X can be obtained by contracting edges of Y \u2032. Let \u2aafbe the relation on graphs defined by X \u2aafY if and only if X is a minor of Y . A class G of graphs is said to be closed under taking minors if and only if for all graphs G and G\u2032, if G \u2208G and G\u2032 \u2aafG, then G\u2032 \u2208G. Let X be any set of graphs. Forb\u2aaf(X) denotes the class of all graphs without a minor in X (and which is closed under isomorphisms). More specifically, Forb\u2aaf(X) =def {G | G \u0338\u2ab0X for all X \u2208X }. The set X is called the set of forbidden minors. Note that Forb\u2aaf(\u2205) is the class of all graphs. As usual, we write Forb\u2aaf(X1, . . . , Xn) instead of Forb\u2aaf({X1, . . . , Xn}). Forbidden-minor classes are monotone with respect to \u2aaf, i.e., X \u2aafY implies Forb\u2aaf(X) \u2286Forb\u2aaf(Y ). The celebrated Graph Minor Theorem, due to Robertson and Seymour [26], shows that there are only countably many network classes closed under taking minors: A class G of graphs is closed under taking minors if and only if there is a finite set X such that G = Forb\u2aaf(X). Two graph classes are particularly relevant to our study: planar graphs and graphs having a vertex cover of size one. Let Kn denote the complete graphs on n vertices and let Kn,m denote the complete bipartite graph having n vertices in one component and m vertices in the other component. The well-known Kuratowski-Wagner theorem (see, e.g., [13]) states that a graph G is planar if and only if G belongs to Forb\u2aaf(K3,3, K5). Moreover, a graph X is planar if and only if Forb\u2aaf(X) has bounded treewidth [25]. As we use the treewidth of a graph only in a black-box fashion, we refer to, e.g., [13] for a definition. A class G of graphs is said to have bounded treewidth if and only if there is a k \u2208IN such that all graphs in the class have treewidth at most k. Let G = (V, E) be a graph. We say that a subset U \u2286V is a vertex cover of G if and only if for all edges {u, v} \u2208E, it holds that {u, v} \u2229U \u0338= \u2205. It is known that the class of graphs having a vertex cover of size at most k is closed under taking minors [11]. Moreover, G has a vertex cover of size one if and only if G belongs to Forb\u2aaf(K3, K2 \u2295K2) [11], where for graphs G and G\u2032, G \u2295G\u2032 denotes the graph obtained by the disjoint union of G and G\u2032. A class of graphs is said to have bounded degree if and only if there is a k \u2208IN such that all graphs in the class have a maximum vertex-degree of at most k. It is known that a graph X has a vertex cover of size one if and only if Forb\u2aaf(X) has bounded degree (cf., e.g., [18]).\n# 4 Islands of Tractability for Fixed Point Counting\nIn this section we are interested in the computational complexity of the following counting problem. Let F be a class of boolean functions and let G be a class of graphs.\nProblem: #FixedPoints(F, G) Input: An (F, G)-system S, i.e., a boolean dynamical system S = (G, {f1, . . . , fn}) such that G \u2208G and for all i \u2208{1, . . . , n}, fi \u2208F Output: The number of fixed points of S\nThe complexity of the problem depends on how transition functions are represented. We consider the cases of lookup table, formula, and circuit representations. The corresponding problems are denoted by #FixedPointsT, #FixedPointsF, and #FixedPointsC. It is obvious that all problem versions belong to #P. We say that a problem is intractable\nif it is #P-hard (with respect to Turing reductions, as described in, e.g., [16]), and it is tractable if it is solvable in polynomial time.\n# 4.1 The Case of Local Transition Functions Given By Lookup Tables\nWe turn to the intractable fixed-point counting problems. Let H be a 2CNF such that each clause consists of exactly one positive and one negative literal. H is called a Horn2CNF formula. Moreover, suppose H has a planar graph representation, i.e., the graph \u0393(H) = (V, E) with vertex set V = {x1, . . . , xn, C1, . . . , Cm}, where the xi\u2019s are the variables and the Ci\u2019s are the clauses of H, and edge set E = {{xi, Cj} | xi is a variable in Cj} is planar. Then, H is called a planar Horn 2-CNF formula. #Planar Horn-2SAT is the problem of counting all satisfying assignments of a given planar Horn-2CNF formula. Proposition 3. #Planar Horn-2SAT is #P-complete even if each variable is allowed to occur in four clauses only. Proof. In [31], it has been shown that the following problem is #P-complete: #4\u2206-PlanarBipartite Independent Set, i.e., compute, on a given bipartite graph G = (V, E) with maximum vertex-degree at most four, the number of independent sets U \u2286V . Let G = (V, E) be a bipartite graph, V = V1 \u222aV2 and E \u2286V1 \u00d7 V2. Define H to be the 2CNF given by clauses (xu \u2228xv) for all u \u2208V1, v \u2208V2 such that {u, v} \u2208E. Clearly, H is a Horn-2CNF formula. Moreover, if G is planar and the maximum degree is at most four, the graph representation of H is planar and each variable occurs at most four times in H. Finally, it is easily seen that there is a bijection between the independent sets of G and the satisfying assignments for H (cf., e.g., [23, 20]). Hence, #4\u2206-Planar Bipartite Independent Set reduces to #Planar Horn-2SAT with each variable occuring in at most four clauses.\nProof. We reduce from #Planar Horn-2SAT assuming that each variable occurs only four times in the formula. Let H = C1 \u2227\u00b7 \u00b7 \u00b7 \u2227Cm be a planar Horn-2CNF formula. Define a dynamical system S = (G, F) as follows. G = (V, E) is given by V =def {1, . . . , n} and E =def { {i, j} | (xi \u2228xj) = Cr for some r \u2208{1, . . . , m} }. Since H has a planar graph representation, G is planar, i.e., G \u2208Forb\u2aaf(K3,3, K5). The local transition functions are specified in the following way. For a vertex i0 \u2208V let {i1, . . . , ir} be the set of all vertices such that (xij \u2228xi0) is a clause in H. Then, fi0 is the function given by the formula Hi0 = xi0 \u2227xi1 \u2227\u00b7 \u00b7 \u00b7 \u2227xir. Notice that all local transition functions belong to E2 and also notice that the maximum degree of a vertex in G is four. Thus, we can compute the lookup tables in polynomial time depending on the size of H. Moreover, it is easily seen that (xi0 \u2194\ufffdr j=1 xij) \u2261 \ufffdr j=1(xij \u2228xi0). Hence, the number of satisfying assignments of H is equal to the number of fixed-point configurations of SH. This shows that #Planar Horn-2SAT reduces to #FixedPointsT(E2, Forb\u2aaf(K3,3, K5)). Lemma 5. #FixedPointsT(V2, Forb\u2aaf(K3,3, K5)) is #P-complete. Proof. Again we reduce from #Planar Horn-2SAT assuming that each variable occurs only four times in the formula. Let H = C1 \u2227\u00b7 \u00b7 \u00b7 \u2227Cm be a planar Horn-2CNF formula. We construct the same network as in the proof of Lemma 4 on a given planar Horn2CNF formula H having the variables x1, . . . , xn. However, the local transition functions are specified as follows. For a vertex i0 \u2208V , let {i1, . . . , ir} be the set of all vertices such that (xi0 \u2228xij) is a clause in H. Then, fi0 is the function given by the formula Hi0 = xi0 \u2228xi1 \u2228\u00b7 \u00b7 \u00b7 \u2228xir which clearly belongs to V2. It remains to verify the number of satisfying assignments of H equals the number of fixed-point configuration of SH. This follows from (xi0 \u2194\ufffdr j=1 xij) \u2261\ufffdr j=1(xi0 \u2228xij). Hence, #Planar Horn-2SAT reduces to #FixedPointsT(V2, Forb\u2aaf(K3,3, K5)). We now turn our attention to proving that #FixedPointsT(D2, Forb\u2aaf(K3,3, K5)) is\nProof. We reduce from #Planar Horn-2SAT assuming that each variable occurs only four times in the formula. Let H = C1 \u2227\u00b7 \u00b7 \u00b7 \u2227Cm be a planar Horn-2CNF formula. Define a dynamical system S = (G, F) as follows. G = (V, E) is given by V =def {1, . . . , n} and E =def { {i, j} | (xi \u2228xj) = Cr for some r \u2208{1, . . . , m} }. Since H has a planar graph representation, G is planar, i.e., G \u2208Forb\u2aaf(K3,3, K5). The local transition functions are specified in the following way. For a vertex i0 \u2208V let {i1, . . . , ir} be the set of all vertices such that (xij \u2228xi0) is a clause in H. Then, fi0 is the function given by the formula Hi0 = xi0 \u2227xi1 \u2227\u00b7 \u00b7 \u00b7 \u2227xir. Notice that all local transition functions belong to E2 and also notice that the maximum degree of a vertex in G is four. Thus, we can compute the lookup tables in polynomial time depending on the size of H. Moreover, it is easily seen that (xi0 \u2194\ufffdr j=1 xij) \u2261 \ufffdr j=1(xij \u2228xi0). Hence, the number of satisfying assignments of H is equal to the number of fixed-point configurations of SH. This shows that #Planar Horn-2SAT reduces to #FixedPointsT(E2, Forb\u2aaf(K3,3, K5)). Lemma 5. #FixedPointsT(V2, Forb\u2aaf(K3,3, K5)) is #P-complete. Proof. Again we reduce from #Planar Horn-2SAT assuming that each variable occurs only four times in the formula. Let H = C1 \u2227\u00b7 \u00b7 \u00b7 \u2227Cm be a planar Horn-2CNF formula. We construct the same network as in the proof of Lemma 4 on a given planar Horn2CNF formula H having the variables x1, . . . , xn. However, the local transition functions are specified as follows. For a vertex i0 \u2208V , let {i1, . . . , ir} be the set of all vertices such that (xi0 \u2228xij) is a clause in H. Then, fi0 is the function given by the formula Hi0 = xi0 \u2228xi1 \u2228\u00b7 \u00b7 \u00b7 \u2228xir which clearly belongs to V2. It remains to verify the number of satisfying assignments of H equals the number of fixed-point configuration of SH. This follows from (xi0 \u2194\ufffdr j=1 xij) \u2261\ufffdr j=1(xi0 \u2228xij). Hence, #Planar Horn-2SAT reduces to #FixedPointsT(V2, Forb\u2aaf(K3,3, K5)). We now turn our attention to proving that #FixedPointsT(D2, Forb\u2aaf(K3,3, K5)) is intractable. Our proof is based on a reduction from the following problem, shown in [31] to be intractable: #4\u2206-Planar Bipartite VertexCover, i.e., compute, on a given planar bipartite graph G of maximum vertex-degree at most four, the number of vertex covers in G. The reduction uses the following gadget, which increases the number of fixed points by a very large factor whenever two particular variables are unequal. Definition 6. For h \u2208IN, an h-amplifier is a dynamical system (G, F), where G = (V, E), such that V =def {a0, . . . , ah} \u222a{b0, . . . , bh} \u222a{c0, . . . , ch} E =def {{ur, jr} | u \u2208{a, c} and r \u2208{0, . . . , h}} \u222a{{ur, ur\u22121} | u \u2208{a, c} and r \u2208{1, . . . , h}} F =def {fu0 | u \u2208{a, c} and fu0 =def xu0} \u222a{fur | u \u2208{a, c}, r \u2208{1, . . . , h}, and fur =def xur\u22121} \u222a{fbr | r \u2208{0, . . . , h} and fbr =def (xbr \u2228xar) \u2227(xbr \u2228xcr) \u2227(xar \u2228xcr))}. Proposition 7. For each h-amplifier Ah, there is exactly one fixed point whenever xa0 = x and 2h+1 fixed points otherwise.\n\u222a{fur | u \u2208{a, c}, r \u2208{1, . . . , h}, and fur =def xur\u22121} \u222a{fbr | r \u2208{0, . . . , h} and fbr =def (xbr \u2228xar) \u2227(xbr \u2228xcr) \u2227(xar \u2228xcr))}. Proposition 7. For each h-amplifier Ah, there is exactly one fixed point whenever xa0 = xc0 and 2h+1 fixed points otherwise.\nProof. Note that by the definitions of the update functions there is a fixed point of Ah if and only if xa0 = xa1 = \u00b7 \u00b7 \u00b7 = xah, xc0 = xc1 = \u00b7 \u00b7 \u00b7 = xch, and (xa0 \u0338= xc0) \u2228(xb0 = xb1 = \u00b7 \u00b7 \u00b7 = xbh). We now prove the intractability result. Lemma 8. #FixedPointsT(D2, Forb\u2aaf(K3,3, K5)) is intractable.\nProof. Let H = (U, D) be a planar, bipartite graph of degree at most four, where m = \u2225U\u2225and n = \u2225D\u2225. Define S = (G, F) to be the dynamical system where G = (V, E), V =def U \u222aD, E =def {{i, {i, j}} | {i, j} \u2208D}, and\nF =def {fi | i \u2208U and fi =def xi} \u222a{f{i,j} | {i, j} \u2208D and f{i,j} =def (x{i,j} \u2228xi) \u2227(x{i,j} \u2228xj) \u2227(xi \u2228xj)}.\nClearly the graph G is planar, as it has H as a topological minor and the update functions in F are in D2. How do the fixed points in S correspond to the vertex covers of H? Note that, for each {i, j} \u2208D, f{i,j}(xi, x{i,j}, xj) = x{i,j} \u21d0\u21d2x{i,j} = xi \u2228x{i,j} = xj. We want to regard edge {i, j} as being covered in H whenever this is so. Indeed, the number of fixed points in S such that all the variables in {x{i,j} | {i, j} \u2208D} are equal is twice the number of vertex covers that H has. Of course, S may have additional fixed points, i.e., fixed points where the values of the variables in {x{i,j} | {i, j} \u2208D} are not equal. These \u201cbad\u201d fixed points do not correspond to vertex covers in H. To help \u201cfilter\u201d the bad fixed points out, we add h-amplifiers for sufficiently large h to S. Fix a planar layout of G. For each i, j, and k such that the vertices {i, j}, j, and {j, k} all lie on the same boundary of some face in the layout, add an (m+1)-amplifier by identifying a0 with {i, j} and c0 with {j, k} (or vice-versa). Call the resulting dynamical system S\u2032. By Proposition 7, S\u2032 has exactly one fixed point for each fixed point of S where the edge variables {x{i,j} | {i, j} \u2208D} are all equal. Note that there are at most 2m+1 such fixed points. For any fixed point in S where the edge variables are unequal, there must exist i, j, and k such that {i, j}, j, and {j, k} all lie on the same boundary of some face in the layout and x{i,j} \u0338= x{j,k}. But then, by Proposition 7 the number of fixed points in S\u2032 that correspond to this fixed point in S is a multiple of 2m+2. So twice the number of vertex covers of H is equal to the number of fixed points in S\u2032 modulo 2m+2. Note that the graph in S\u2032 is planar (as amplifiers are always planar) and no update function has more than ten arguments, so the lookup table can be constructed in polynomial time. Note also that each of the update functions in S\u2032 is in D2. Hence, #4\u2206-Planar Bipartite Vertex Cover reduces to #FixedPoints(D2, Forb\u2aaf(K3,3, K5)) in polynomial time.\nTheorem 9. Let F be a Post class of boolean functions and let G be a graph class closed under taking minors. If (F \u2287V2 or F \u2287E2 or F \u2287D2) and G \u2287Forb\u2aaf(K3,3, K5), then #FixedPointsT(F, G) is intractable, otherwise #FixedPointsT(F, G) is tractable. Proof. If (F \u2287V2 or F \u2287E2 or F \u2287D2) and G \u2287Forb\u2aaf(K3,3, K5), then #FixedPointsT (F, G) is #P-complete by Lemma 4, Lemma 5, and by the assumption made for D2. Suppose the premise is not satisfied. First, assume that F \u0338\u2286V2, F \u0338\u2286E2, and F \u0338\u2286D2. The\nmaximal Post class having this property is L. By Lemma 1, #FixedPointsT(L, Forb\u2aaf(\u2205)) is tractable. It remains to consider the case G \u0338\u2287Forb\u2aaf(K3,3, K5). That is G \u2286Forb\u2aaf(X) for some planar graph X. Lemma 2 shows that #FixedPointsT(BF, G) is solvable in polynomial time.\n# 4.2 Succinctly Represented Local Transition Fu\nIn this section we prove a dichotomy theorem for the fixed-point counting problem when transition are given by formulas or circuits. As usual, the size of formula is the number of symbols from the basis used to encode the formula, the size of a circuit is the number of gates (from the basis) it consists of (including the input gates).1 Both succinct representations of functions lead to the same result. We only prove special results for the case of formula representations. The corresponding results for circuit representations follow easily. Again we start with gathering the tractable cases. Lemma 10. #FixedPointsF(L, Forb\u2aaf(\u2205)) is solvable in polynomial time. Proof. Similar to the proof of Lemma 1 by noting that each boolean circuit C over the base {\u2295, 1, 0} can be easily transformed (in polynomial time in the number of gates of C) into the described system of linear equations over Z2.\nProof. Since X is planar, there exists a k \u2208IN such that for all G \u2208Forb\u2aaf(X), the treewidth of G is at most k. Let S = (G, {f1, . . . , fn}) be a dynamical system such that G = (V, E) \u2208Forb\u2aaf(X) and for all i \u2208V , the local transition function fi is one of the constant functions c0 or c1, or is represented by a formula Hi = \ufffd j\u2208Ji xj, where Ji \u2286NG(i) \u222a{i}. Without loss of generality, we may assume that there is no i \u2208V such that fi \u2261c1 or fi \u2261c0. (Otherwise, an obvious procedure exists to eliminate such vertices.) We define the directed graph A(S) to consist of S\u2019s vertex set V and the edge set E\u2032 =def { (i, j) | i, j \u2208V, i \u2208Jj }. Note that A(S) is allowed to have loops. Observe that for all vertices i, j \u2208V and all fixed-point configurations \u20d7x it holds that if xi = 0 then xj = 0. An easy consequence is that if C = {i1, . . . , ir} is a strongly connected component of A(S) and \u20d7x is a fixed-point configuration, then xi1 = \u00b7 \u00b7 \u00b7 = xir. Let {C1, . . . , C\u2113} be the set of all strongly connected components of A(S). Then, the number of fixed-point configurations of S is equal to the number of satisfying assignments of the constraint satisfaction problem CSP(S) = (W, D, C) defined by W =def {x1, . . . , x\u2113}, D =def {0, 1}, and C =def { Exixj | there are u \u2208Ci and v \u2208Cj such that (u, v) \u2208E\u2032 } where for all i, j such that Exixj \u2208C, Eij =def { (0, 0), (1, 0), (1, 1) }2. Note that the constraint\ngraph of CSP(S) (up to being oriented) is a minor of the network of S. It follows that the constraint graph has treewidth at most k. Hence, using the algorithms in [14], the number of fixed-point configurations can be computed in polynomial time. Consequently, #FixedPointsF(E, Forb\u2aaf(X)) can be solved in polynomial time.\nLemma 12. Let X be a planar graph. Then, #FixedPointsF(V, Forb\u2aaf(X)) is solvable in polynomial time.\nProof. The case of V is dual to the case of E. Indeed, suppose we have a dynamical system S = (G, {f1, . . . , fn}) such that G = (V, E) \u2208Forb\u2aaf(X) and for all i \u2208V , fi is constant or represented by a formula Hi = \ufffd j\u2208Ji xj where Ji \u2286NG(i) \u222a{i}. Replace each \u2228by \u2227, 0 by 1, and 1 by 0. Obviously, this gives a dynamical system having the same number of fixed-point configurations as S. Thus, #FixedPointsF(V, Forb\u2aaf(X)) reduces to #FixedPointsF(E, Forb\u2aaf(X)). Hence, by Lemma 11, #FixedPointsF(V, Forb\u2aaf(X)) can be solved in polynomial time.\nLemma 13. Let X be a graph with a vertex cover of size one. Then, #FixedPointsF (BF, Forb\u2aaf(X)) is solvable in polynomial time.\nProof. Let X have a vertex cover of size one, i.e., Forb\u2aaf(X) has bounded degree. So, it is easily seen that for all classes F of boolean functions, #FixedPointsF(F, Forb\u2aaf(X)) reduces to #FixedPointsT(F, Forb\u2aaf(X)). As X is also a planar graph (note that K3 \u2aaf K3,3 and K3 \u2aafK5 as well as K2 \u2295K2 \u2aafK3,3 and K2 \u2295K2 \u2aafK5), #FixedPointsF (BF, Forb\u2aaf(X)) is solvable in polynomial time using Lemma 2.\nProof. An inspection of the proof of Lemma 4 shows that the local transition functions specified there are in fact, represented by formulas. Thus, the proposition follows from the proof of Lemma 4.\nLet H be a 2CNF formula such that each clause consists of positive literals only. H is called a positive 2CNF. It is well known that the counting problem #Pos 2SAT , i.e counting the satisfying assignments of positive 2CNF, is #P-complete [32].\nProof. We reduce from #Pos 2SAT. Let H = C1 \u2227\u00b7 \u00b7 \u00b7 \u2227Cm be a positive 2CNF formula having variables x1, . . . , xn. Let #+(H) denote the number of satisfying assignments of H. Let S10(x, y, z) =def (x \u2227(y \u2228z)) denote the only element in the logical basis of S10. Define SH to be the dynamical system consisting of the network G = (V, E), where V =def {1, . . . , n, n + 1} and E =def { {i, n + 1} | i \u2208{1, . . . , n} }, and the local transition functions are specified as follows. For i \u2208{1, . . . , n} set Pi(xi, xn+1) =def S10(xi, xi, xi) and let fi be represented by Pi. For i = n + 1, we first define auxiliary formulas\n\nAj for j \u2208{1, . . . , m} by A1(x1, . . . , xn+1) =def S10(xn+1, x11, x12) and for k > 1 by Ak(x1, . . . , xn+1) =def S10(Ak\u22121(x1, . . . , xn+1), xk1, xk2) where Ck = (xk1 \u2228xk2). Finally, set Pn+1(x1, . . . , xn+1) =def Am(x1, . . . , xn+1) and let fn+1 be represented by Pn+1. Certainly, SH is an (S10, Forb\u2aaf(K3, K2 \u2295K2))-system computable in time polynomial in the size of H. Moreover, note that Pn+1(x1, . . . , xn+1) \u2261xn+1 \u2227\ufffdm j=1 Cj. It follows that the number of fixed-point configurations of SH is #+(H) + 2n. Hence, #Pos 2SAT reduces to #FixedPointsF(S10, Forb\u2aaf(K3, K2 \u2295K2)).\nLemma 17. #FixedPointsF(S00, Forb\u2aaf(K3, K2 \u2295K2)) is #P-complete.\nProof. Again we reduce from #Pos 2SAT. Let H = C1\u2227\u00b7 \u00b7 \u00b7\u2227Cm be a positive 2CNF formula having variables x1, . . . , xn. Let #+(H) denote the number of satisfying assignments of H. Let S00(x, y, z) =def (x \u2228(y \u2227z)) denote the only element in the logical basis of S00. We define SH to be the dynamical system consisting of the network G = (V, E), where V =def {0, 1, . . . , n, n+1} and E =def { {i, n+1} | i \u2208{0, . . . , n} }, and the set of local transition functions specified as follows: for i \u2208{0, . . . , n}, set Pi(xi, xn+1) =def S00(xi, xi, xi) and let fi be the function represented by Pi. For i = n + 1, i.e., the center of the star G, we first introduce auxiliary formulas Aj1,...,jk(x0, x1, . . . , xn) for k \u2208IN+ and j1 < \u00b7 \u00b7 \u00b7 < jk inductively defined by Ai(x0, x1, . . . , xn) =def S00(xi1, xi2, xi2), such that Ci = (xi1 \u2228xi2), and\nS00(x0, Aj1,...,j\u230ak/2\u230b(x0, . . . , xn), Aj\u230ak/2\u230b+1,...,jk(x0, . . . , xn)).\nWe finally define Pn+1(x0, . . . , xn+1) =def S00(x0, A1,...,m(x0, . . . , xn), xn+1). Clearly, SH is an (S00, Forb\u2aaf(K3, K2 \u2295K2))-system computable in time polynomial in the size of H Moreover, as is easily seen by induction it holds that\nAj1,...,jk(c0, x1, . . . , xn) \u2261\ufffdk \u2113=1 C\u2113 and Aj1,...,jk(c1, x1, . . . , \n\ufffd ds to the following numbers of fixed-point configurations of S\n- there are 2n fixed-point configurations \u20d7x such that x0 = 0 and xn+1 = 0, - there are #+(H) fixed-point configurations \u20d7x such that x0 = 0 and xn+1 = 1, - there is no fixed-point configuration \u20d7x such that x0 = 1 and xn+1 = 0, and - there are 2n fixed-point configurations \u20d7x such that x0 = 1 and xn+1 = 1.\nHence, the number of fixed-point configurations of SH is just #+(H)+2n+1. Consequently, #Pos 2SAT reduces to #FixedPointsF(S00, Forb\u2aaf(K3, K2 \u2295K2)). Lemma 18. #FixedPointsF(D2, Forb\u2aaf(K3, K2 \u2295K2)) is #P-complete.\nProof. We reduce from #Pos 2SAT. We construct the same network as for the case S00 in the proof Lemma 17 on a given positive 2CNF formula H = C1 \u2227\u00b7 \u00b7 \u00b7 \u2227Cm having variables x1, . . . , xn. Let #+(H) denote the number of satisfying assignments of H. The local transition functions are specified as follows. Let D2(x, y, z) =def (x \u2227y) \u2228(x \u2227 z) \u2228(y \u2227z) denote the only element in the logical basis of D2. For i \u2208{0, . . . , n} set Pi(xi, xn+1) =def D2(xi, xi, xi) and let fi be represented by Pi. For i = n + 1, we again\nintroduce auxiliary Aj1,...,jk(x0, x1, . . . , xn, xn+1) for k \u2208IN+ and j1 < \u00b7 \u00b7 \u00b7 < jk inductivel defined by Ai(x0, . . . , xn+1) =def D2(xi1, xi2, xn+1), such that Ci = (xi1 \u2228xi2), and\nWe finally define Pn+1 =def A1,...,m. Evidently, SH is a (D2, Forb\u2aaf(K3, K2 \u2295K2))-system and can be computed in time polynomial in the size of H. Moreover, by induction over the formula structure of Pn+1 we easily obtain the following equivalences:\n\ufffd Thus, the number of fixed-point configurations of SH is exactly 2#+(H)+2n+1\u22122. Hence #Pos 2SAT reduces to #FixedPointsF(D2, Forb\u2aaf(K3, K2 \u2295K2)).\nFinally, we combine all results to obtain the following dichotomy theorem.\nTheorem 19. Let F be a Post class of boolean functions and let G be a graph class closed under taking minors. Then, #FixedPointsF(F, G)) is intractable if one of the following conditions is satisfied.\n\ufffd \ufffd Otherwise, #FixedPointsF(F, G) is tractable. Moreover, the same classification is true for #FixedPointsC(F, G).\nProof. If for F and G the first conditions is satisfied, then the intractability follows from Lemmas 16, 17, and 18. If G \u0338\u2287Forb\u2aaf(K3, K2 \u2295K2), then, as argued in [18], there is a graph X having a vertex cover of size one such that G \u2208Forb\u2aaf(X). Lemma 13 shows that #FixedPointsF(BF, Forb\u2aaf(G)) is solvable in polynomial time. Assume that F \u0338\u2287S00, F \u0338\u2287S10, and F \u0338\u2287D2. The maximal Post classes satisfying this are V, E, and L. Thus, we only consider subclasses of these three classes. If F and G satisfy the second condition, then the Lemmas 14 and 15 establish the intractability. Suppose the second condition does not hold. The maximal class F such that F \u0338\u2287V2 and F \u0338\u2287E2 is L. Lemma 10 states that for L counting fixed-points can be done in polynomial time. If G \u0338\u2287Forb\u2aaf(K3,3, K5), then we know that G \u2208Forb\u2aaf(X) for some planar graph X. Lemmas 11 and 12 imply that #FixedPointsF(E, G) and #FixedPointsF(V, G) are solvable in polynomial time.\n# 5 Conclusion\nFixed points are an important and robust (in the sense that they exist independently of any update schedule) feature of discrete dynamical systems. We presented two dichotomy theorems on the complexity of counting the number of fixed points in such a system. Both\n\nresults demonstrate that the linear boolean functions are the only function class such that fixed point counting is tractable independent of representations and of degrees of variable dependency. Regarding future work, it is tempting to apply our analysis framework (Post classes and forbidden minors) to a precise identification of islands of predictability for more schedulebased behavioral patterns, e.g., gardens of Eden, predecessors, or fixed-point reachability.\n# Acknowledgments\nWe thank Ernst W. Mayr (TU M\u00a8unchen) for careful proofreading and for pointing out an error in an earlier version of this paper.\n# References\n",
    "paper_type": "theory",
    "attri": {
        "background": "This paper addresses the issue of counting fixed points in boolean dynamical systems, highlighting the computational complexity involved in this problem and its significance in understanding complex systems.",
        "problem": {
            "definition": "The problem is defined as counting the number of fixed points in an (F, G)-system, where F is a class of boolean functions and G is a class of graphs.",
            "key obstacle": "The main challenge lies in the complexity classification of counting fixed points, which can be #P-complete or polynomially computable depending on the classes of boolean functions and graphs involved."
        },
        "idea": {
            "intuition": "The idea is inspired by the need to classify the complexity of fixed point counting in relation to the representation of local transition functions.",
            "opinion": "The authors propose a systematic framework to analyze the complexity of counting fixed points based on the classes of boolean functions and graphs.",
            "innovation": "The primary improvement is the introduction of dichotomy theorems that classify the complexity of counting fixed points based on the specific classes of boolean functions and graphs used."
        },
        "Theory": {
            "perspective": "The theoretical framework combines Post classes of boolean functions and forbidden-minor classes of graphs to analyze the complexity of fixed point counting.",
            "opinion": "The authors assume that the complexity of counting fixed points can be effectively categorized using these theoretical constructs.",
            "proof": "The proof involves demonstrating that certain classes of boolean functions and graphs lead to #P-completeness while others allow for polynomial-time computability."
        },
        "experiments": {
            "evaluation setting": "The evaluation includes various classes of boolean functions (like min-functions, max-functions, monotone functions) and graph classes (like planar graphs) to analyze their impact on computational complexity.",
            "evaluation method": "The authors employ reductions from known #P-complete problems to establish the complexity of counting fixed points across different representations (lookup tables, formulas, circuits)."
        },
        "conclusion": "The paper concludes that fixed point counting in boolean dynamical systems can be classified into tractable and intractable cases based on the nature of the boolean functions and graph classes involved.",
        "discussion": {
            "advantage": "The main advantage of this paper is the clear classification of the complexity of fixed point counting, which aids in understanding the computational landscape of dynamical systems.",
            "limitation": "A limitation noted is the complexity of the theorems for formulas compared to lookup tables, indicating that not all representations are equally manageable.",
            "future work": "Future research could focus on applying the analysis framework to other behavioral patterns in dynamical systems, such as gardens of Eden or fixed-point reachability."
        },
        "other info": []
    },
    "mount_outline": [
        {
            "section number": "2.1",
            "key information": "The problem is defined as counting the number of fixed points in an (F, G)-system, where F is a class of boolean functions and G is a class of graphs."
        },
        {
            "section number": "2.3",
            "key information": "The theoretical framework combines Post classes of boolean functions and forbidden-minor classes of graphs to analyze the complexity of fixed point counting."
        },
        {
            "section number": "5.3",
            "key information": "The primary improvement is the introduction of dichotomy theorems that classify the complexity of counting fixed points based on the specific classes of boolean functions and graphs used."
        },
        {
            "section number": "7.2",
            "key information": "The main advantage of this paper is the clear classification of the complexity of fixed point counting, which aids in understanding the computational landscape of dynamical systems."
        },
        {
            "section number": "8",
            "key information": "Future research could focus on applying the analysis framework to other behavioral patterns in dynamical systems, such as gardens of Eden or fixed-point reachability."
        }
    ],
    "similarity_score": 0.5182150986701455,
    "image": null,
    "path": "/home/dany/codes/autosurvey/outputs/2025-01-11-1142_cogni/papers/Dichotomy Results for Fixed Point Counting in Boolean Dynamical Systems.json"
}