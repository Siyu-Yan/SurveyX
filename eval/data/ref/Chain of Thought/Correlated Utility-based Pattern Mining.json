{
    "from": "arxiv",
    "scholar_id": null,
    "detail_id": "arXiv:1904.03336",
    "title": "Correlated Utility-based Pattern Mining",
    "abstract": "In the field of data mining and analytics, the utility theory from Economic can bring benefits in many real-life applications. In recent decade, a new research field called utility-oriented mining has already attracted great attention. Previous studies have, however, the limitation that they rarely consider the inherent correlation of items among patterns. Consider the purchase behaviors of consumer, a high-utility group of products (w.r.t. multi-products) may contain several very high-utility products with some low-utility products. However, it is considered as a valuable pattern even if this behavior/pattern may be not highly correlated, or even happen by chance. In this paper, in light of these challenges, we propose an efficient utility mining approach namely nonredundant Correlated high-Utility Pattern Miner (CoUPM) by taking positive correlation and profitable value into account. The derived patterns with high utility and strong positive correlation can lead to more insightful availability than those patterns only have high profitable values. The utility-list structure is revised and applied to store necessary information of both correlation and utility. Several pruning strategies are further developed to improve the efficiency for discovering the desired patterns. Experimental results show that the non-redundant correlated high-utility patterns have more effectiveness than some other kinds of interesting patterns. Moreover, efficiency of the proposed CoUPM algorithm significantly outperforms the state-of-the-art algorithm. Keywords: Economic, utility mining, positive correlation, pruning strategy v2  [cs.DB]  28 Apr ",
    "bib_name": "gan2019correlatedutilitybasedpatternmining",
    "md_text": "# Correlated Utility-based Pattern Mining\nWensheng Gan1,5, Jerry Chun-Wei Lin1,2*, Han-Chieh Chao3, Hamido Fujita4 and Philip S. Yu5 1Harbin Institute of Technology (Shenzhen), Shenzhen, China 2Western Norway University of Applied Sciences, Bergen, Norway 3National Dong Hwa University, Hualien, Taiwan 4Iwate Prefectural University, Iwate, Japan 5University of Illinois at Chicago, Chicago, USA Email: wsgan001@gmail.com, jerrylin@ieee.org, hcc@ndhu.edu.tw, HFujita-799@acm.org, psyu@uic.edu\n# Abstract\nIn the field of data mining and analytics, the utility theory from Economic can bring benefits in many real-life applications. In recent decade, a new research field called utility-oriented mining has already attracted great attention. Previous studies have, however, the limitation that they rarely consider the inherent correlation of items among patterns. Consider the purchase behaviors of consumer, a high-utility group of products (w.r.t. multi-products) may contain several very high-utility products with some low-utility products. However, it is considered as a valuable pattern even if this behavior/pattern may be not highly correlated, or even happen by chance. In this paper, in light of these challenges, we propose an efficient utility mining approach namely nonredundant Correlated high-Utility Pattern Miner (CoUPM) by taking positive correlation and profitable value into account. The derived patterns with high utility and strong positive correlation can lead to more insightful availability than those patterns only have high profitable values. The utility-list structure is revised and applied to store necessary information of both correlation and utility. Several pruning strategies are further developed to improve the efficiency for discovering the desired patterns. Experimental results show that the non-redundant correlated high-utility patterns have more effectiveness than some other kinds of interesting patterns. Moreover, efficiency of the proposed CoUPM algorithm significantly outperforms the state-of-the-art algorithm. Keywords: Economic, utility mining, positive correlation, pruning strategy v2  [cs.DB]  28 Apr \n# 1. Introduction 3\nIn many real-world applications, data mining [1, 2] turns a large collection of data into knowledge, and one of the common tasks of data mining is pattern mining [3, 4, 5]. For instance, to analyze the users\u2019 click-stream or purchase behavior that contains auxiliary valuable with hidden information, pattern mining algorithms [3, 4] can be applied to identify embedded patterns and useful knowledge. In the past decades, numerous data mining frameworks and approaches, e.g., frequent pattern mining (FPM) [3, 4, 6] and association rule mining (ARM) [3], have been extensively studied. FPM extracts frequent patterns, and ARM aim at mining association rules. Besides, FPM is considered as the first step of ARM and more challenging. In general, these desired patterns represent interesting relationships among objects or patterns in different types of databases. Mining of insightful patterns has been successfully applied in many real-world applications. However, most of these pattern mining algorithms [3, 4, 5] mainly measure the interestingness of patterns based on the co-occurrence frequencies of patterns. Other implicit factors in data such as the weight, interest, risk arXiv:1904.0\n\u2217Corresponding author. Email: jerrylin@ieee.org. Preprint submitted to Information Science\nor profit of patterns are not effectively utilized. Besides, all objects are considered to have equal importance, hence the objects/patterns that are real important to users may not be found effectively. Therefore, some researchers are interested in incorporating both subjective measure (e.g., risk, interest and utility) and objective measures (e.g., correlation, frequency and confidence) for mining valuable patterns, such as itemsets and association rules. Among them, one utility-oriented data mining framework called high-utility pattern mining (HUPM) [7, 8, 9, 10] was proposed. Inspired by the utility theory [11], HUPM incorporates some useful factors, e.g., quantity, unit profit, and other useful factors, to identify the patterns which can bring valuable profits for retailers or managers in business. In general, the utility can also be other user-specified subjective measure, e.g., risk, interest, significance, satisfaction, and usefulness, etc. The concept of HUPM has been extended to utility mining [7, 8, 9, 10] and it serves as a critical role in data science. Up to now, utility mining has become an important branch of data analytics, which aims at utilizing the auxiliary information from data. It has been widely utilized to discover valuable information and hidden knowledge in recent decade since utility mining can bring more benefits in many real-life applications.\nApril 30, 2019\nMany studies of utility mining focus on developing the efficient algorithms, such as Two-Phase [7], IHUP [8], UP-growth [12], UP-growth+ [9], HUI-Miner [10], FHM [13], HUP-Miner [14], and EFIM [15]. At the same time, many studies focus on the effectiveness for mining utility-oriented patterns. For instance, mining high-utility patterns from uncertain data [16], dynamic data [17, 18], and big data [19]. Utility mining has been extensively studied and successfully applied in many real-world applications [18]. However, the existing studies of utility mining are mainly focused on the identification of high-utility patterns themselves, and thus the hidden correlation among the derived patterns is still limited. In other words, they ignore the inherent correlation of objects/items inside the patterns. This problem may easily lead to the identification of high-utility patterns with false negatives and false positives. Therefore, an important limitation of current utility mining algorithms is that a huge amount of patterns may be discovered while most of them contain many weakly correlated items. For example, it is common that retail stores crosssell some products/items to improve the total revenue. Some products are usually sold with discount or free gifts to stimulate the sale of other related products/items. As shown in Figure 11, many products are bought together for cross-selling in Amazon. This example explains the reasons why correlation is an important factor, especially in utility mining. The really strongly correlated products (or purchase behaviors) are more useful for cross-selling; otherwise, those meaningless, redundant or nondiscriminative patterns may be misleading for recommendation. Hence, it is a critical issue to address the effectiveness problem for discovering positively correlated and high-utility patterns based on the utility and correlation measures.\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/952b/952bea16-fd53-413f-9bc1-f1ea527a832e.png\" style=\"width: 50%;\"></div>\nIn the past few decades, some well-known correlation measures, e.g., the support [20, 21], confidence [21], all-confidence [22], frequency affinity [23], and coherence [22], have been studied in data mining. In the field of utility mining, the HUIPM [23] and FDHUP [24] algorithms were proposed to discover high-utility interesting patterns (HUIPs) with strong frequency affinity. The concept of affinity utility is introduced in HUIPM [23]. However, the tree-based HUIPM algorithm is time-consuming and may lead to the problem of combinatorial explosion. The faster FDHUP algorithm [24] utilizes two compact data structures and three pruning strategies to efficiently discover discriminative HUIPs. However, the co-occurrence frequency instead of inherent correlation is measured as the correlation factor in HUIPM [23] and FDHUP [24]. Recently, a projection-\nbased approach namely CoHUIM [25] was developed to discover correlated high-utility patterns with consideration of the inherent correlation among items inside a pattern. It adopts a measure called Kulc [26, 27], which has the null (transaction)invariant property, as the correlation factor. The discovered patterns have strong positive inherent correlation, and they can bring real benefits to utility mining. However, the projectionbased CoHUIM may encounter the efficiency problem, and may cause a lot of memory consumption since it relies on the candidate generation-and-test mechanism. In light of the above challenges, we propose an efficient utility mining framework, namely non-redundant Correlated highUtility Pattern Miner (CoUPM) with the consideration of strong positive correlation and utility theory. CoUPM can not only extract non-redundant strongly correlated and profitable patterns, but also achieve better efficiency. We evaluate the effectiveness of the proposed CoUPM based on the correlation measure Kulc. For comparison, we take the well-known traditional HUPM model and the state-of-the-art CoHUIM algorithm into account to compare the designed algorithm for the correlated utility-based pattern mining problem. The major contributions of this paper are summarized as follows.\n\u2022 We adopt correlated significance as a key criterion for evaluating the high-utility patterns in the HUPM problem. Understanding such correlation can provide useful insights on the discovered results, and this makes utility mining with a higher effective performance than the existing HUPM models. The utility factor and relations among items/objects are taken into account for pattern evaluation. \u2022 We design an efficient CoUPM algorithm for mining correlated and high-utility patterns from quantitative database in one-phase. The revised utility-list structure is used to store the compact information of potential patterns from the processed database. This approach is able to early filter a large amount of unpromising patterns, and return the significant patterns in the mining process. \u2022 We develop several pruning techniques in a depth-first search manner, which consist of the utilization of correlation property and utility property. Therefore, CoUPM can quickly discover a set of highly correlated and highutility patterns. \u2022 Extensive experiments on both real and synthetic datasets show that the proposed one-phase CoUPM algorithm has better effectiveness and efficiency than the existing algorithms.\nThe rest of this paper is organized as follows. Some related works of utility mining are briefly reviewed in Section 2. The key preliminaries and problem statement are given in Section 3. Details of the proposed CoUPM algorithm are described in Section 4. The evaluation of effectiveness and efficiency of CoUPM are provided in Section 5. Finally, conclusion and future work are drawn in Section 6.\n# 2. Related Work\nThis research work is related to the studies in support-based pattern mining, utility-based pattern mining, and the development of pattern mining with consideration of affinity/correlation.\nIn the past few decades, many pattern mining frameworks and algorithms have been developed and applied to various reallife applications. Most of these studies use support [3, 20] and confidence [20] to identify interesting patterns, e.g., frequent patterns [3, 4, 20]. These studies measure the interestingness of patterns mainly based on the co-occurrence frequency [3, 4]. Therefore, many interesting and high profitable patterns may not be found. To address these problems, a new data mining framework named utility-oriented pattern mining [9, 28, 29] is proposed. It aims at discovering the high-utility patterns rather than the support/confidence-based patterns. Utility mining considers the quantity and unit profit of objects/items, as well as other implicit factors. In the past decade, the problem of high-utility pattern mining (HUPM) has been extensively studied, such as Two-Phase [7], IHUP [8], UP-growth [12], UPgrowth+ [9], and HUI-Miner [10]. There are mainly four categories of the existing HUPM algorithms, including Apriorilike, tree-based, utility-list-based, and hybrid approaches. The well-known Apriori-like approach for HUPM is the Two-Phase [7] algorithm which utilizes the transaction-weighted utilization (TWU) model [7]. Inspired by FP-growth [4], some tree-based algorithms are proposed to mining high-utility patterns, such as IHUP [8], UP-growth [12], UP-growth+ [9], and HUP-tree [30]. All of them outperform the Apriori-like algorithms. Liu et al. then introduced the HUI-Miner [10] by utilizing the utilitylist structure and a new concept called remaining utility. Recently, many other utility-list based approaches have been developed, such as FHM [13], HUP-Miner [14], and EFIM [15]. The above mentioned HUPM algorithms focus on improving the mining efficiency, however, the effectiveness of utility mining task is also quite important. For example, how to develop different and flexible models to address the utility mining task in different types of data, constraints and applications are very necessary and challenging. Up to now, some studies that focus on the effectiveness of utility mining have been extensively developed, such as HUPM on uncertain data [16] or dynamic data [17, 18]. Lin et al. proposed a series of models to extract high-utility patterns from uncertain data [16, 31], temporal data [32], and dynamic data [17, 18, 33]. Based on the new concept of average utility [34], Wu et al. introduced a new upper bound for mining high average utility patterns [35]. Besides, several evolutionary computation approaches (e.g., HUIM-BPSO [36] and ACO-based HUIM-ACS [37]) are proposed to discover high-utility patterns. Tseng et al. introduced the concise representation [38] and top-k issue [39] for HUPM. Different from the itemset-based models, other advanced models were extensively studied, including the association rule-based [40], sequence-based [41], and episode-based [42] utility mining models. Recently, Gan et al. proposed a new\nutility measure named utility occupancy to address the utility mining problem [43]. An overview of the current development of utility mining was presented recently [18].\n# 2.2. Affinity/Correlation Pattern Mining\nIn the data mining literature, several association measures for association mining and analytics have been studied, such as confidence [20], lift [44], and the cosine measure [45]. Association analysis may generate many rules, while many of them are not useful or meaningful for decision-making. Different from association analysis, some studies have been explored for mining affinity patterns or correlation patterns. Omiecinski et al. first proposed three interesting measures for pattern mining called any-confidence [22], all-confidence [22], and bond [22]. To find strong affinity patterns which may contain low-support items, Kim et al. first introduced hyperclique pattern and hyperclique (h)-confidence [46]. The h-confidence is equivalent to the all-confidence. Wu et al. found that the degree of expectation based correlation is highly influenced by the number of null transactions [27]. Thus, most of the existing measures, e.g., allconfidence [22], bond [22], cosine [45], are not suitable to evaluate correlation in large database that contains many and unstable null transactions. Due to the null (transaction)-invariant property, the correlation measure in Kulczynsky [26, 27] is independent of the dataset size. Besides, some other measures for the study of correlation have been proposed [21]. Different from the traditional data mining approaches which ignore the correlation among extracting results, the derived affinity/correlation patterns can return more insightful knowledge for decision-making.\n# 2.3. Comparative Analysis with Previous Works\nAs mentioned before, the inherent correlation of items inside the patterns has not been considered in most of the HUPM algorithms yet. In the area of utility-oriented pattern mining, only few studies concern the utility and correlation together to derive the desired patterns. For instance, the HUIPM [23] and FDHUP [24] algorithms consider both frequency-affinity and utility as the two key measures to derive the desired patterns. However, the co-occurrence frequency of transactions is regarded as the correlation factor. Recently, Fournier-Viger et al. [47] introduced a FCHM model to extract correlated high-utility itemsets (CoHUIs). In the framework of FCHM, the bond measure [22] is used to evaluate the correlation value of items among a pattern. Moreover, the projection-based CoHUIM [25] algorithm has presented to take the correlation measure \u2212Kulc, which has null (transaction)-invariant property, into account for mining the interesting patterns. However, it may encounter the efficiency problem and may easily cause a lot of memory consumption. The reason is that CoHUIM firstly generates the complete correlated high-utility upper-bound itemsets (CHUUBIs) by recursively processing the projection, which uses the upper bound TWU [7] and Kulc measure. It then calculates actual utilities for all candidates in CHUUBIs to discover the final CoHUIs. In this paper, the proposed CoUPM method utilizes the revised utility-list structure and several powerful pruning strategies to significantly improve the mining efficiency.\n<div style=\"text-align: center;\">Table 1: An e-commerce database Timestamp Purchase reco</div>\n<div style=\"text-align: center;\">Table 1: An e-commerce database Timestamp Purchase record</div>\nTid\nUser\nTimestamp\nPurchase record\nT1\nU1\n07/12 10:05:30\n(a, 3)(b, 1)(e, 2)\nT2\nU2\n07/12 10:11:10\n(a, 2)(b, 3)(c, 1)(d, 1)\nT3\nU3\n07/12 10:15:48\n(a, 1)(d, 3)(e, 2)\nT4\nU4\n07/12 10:18:00\n(a, 1)(b, 5)(c, 2)(d, 1)(e, 1)\nT5\nU5\n07/12 10:25:20\n(a, 2)(b, 3)(e, 3)\n# 3. Preliminaries and Problem Formulation\nIn this section, we first introduce some basic preliminaries of utility mining, and then discuss the differences between the addressed problem in this paper and the existing tasks. Finally, we provide a normal problem formulation of correlated highutility pattern mining.\n# 3.1. Database with Utility Factor\nNote that we use the concept of utility to present the revenue for sellers. In the following contents, let X = {i1, i2, . . . , ik} denote a combination/group of patterns/products, and X is called a k-itemset. In general, a unit profit of X is associated to the cost price minus sell price. As mentioned before, the utility concept can be regarded as other user-specified subjective measure, e.g., risk, interestingness, satisfaction, usefulness, etc. According to the utility theory [11], we have the following concepts and formulation.\nExample 1. Consider an e-commerce database as shown in Table 1, it is used as a running example in this paper. Similar to the e-commerce database provided by RecSys Challenge 20152, this example database contains five purchase records (e.g., T1, T2, . . . , T5) with auxiliary information. Behavior T1 is occurred in timestamp \u201c07/12 10:05:30\u201d, and contains products {a}, {b}, and {e} with a purchase quantity of 3, 1 and 2, respectively. Table 2 indicates that the unit profit (also called external profit) of these three products is {a: $3}, {b: $1}, and {e: $10}, respectively. Note that the unit profit of each product is pre-defined by user/seller. In the addressed problem, this table is called profit-table.\n# 3.2. Preliminaries of Utility Mining\nGiven a quantitative database D such that D = {T1, T2, . . . , Tn} contains a set of quantitative transactions. Each transaction Tc with a timestamp is a set of items/records. Tc \u2208D is a subset of I and has a unique identifier called its Tid. Let I be a set of distinct items, I = {i1, i2, . . . , im}. Each item i \u2208I is associated with a positive value pr(i) namely its unit profit. For each item i \u2208Tc, a positive number q(i, Tc) is called occur quantity of i. The utility contribution of a group of products, X = {i1, i2, . . . , i j}, is related to the total utilities from each i \u2208X after marketing.\n2https://recsys.acm.org/recsys15/challenge/\n<div style=\"text-align: center;\">Table 2: External profit value (unit profit)</div>\nTable 2: External profit value (unit profit)\nProduct\na\nb\nc\nd\ne\nProfit ($)\n3\n1\n7\n2\n10\nDefinition 1. The utility of a group of products X \u2286I in a transaction Tc is u(X, Tc) = \ufffd i\u2208X u(i, Tc), where u(i, Tc) is the utility/profit of a product i \u2208I in a transaction Tc, and u(i, Tc) can be calculated as u(i, Tc) = pr(i) \u00d7 q(i, Tc). Thus, u(X, Tc) represents the utilities generated by all items i \u2208X in Tc. Consider the entire database, let u(X) denote the total utility of X in D, then u(X) = \ufffd X\u2286Tc\u2227Tc\u2208D u(X, Tc).\n \ufffd Definition 2. Given a quantitative database D, the transaction utility of a transaction Tc, denoted as tu(Tc), can be calculated as tu(Tc) = \ufffd i j\u2208Tc u(ij, Tc), where i j is the j-th item in Tc. Then the total utility of the entire D is denoted as TU, and can be calculated as: TU = \ufffd Tc\u2208D tu(Tc).\n \ufffd Example 2. In Table 1, the utility of e in T3 is u(e, T3) = 2\u00d7$10 = $20, and the utility of {d, e} in T3 is u({d, e}, T3) = u(d, T3) + u(e, T3) = 3 \u00d7 $2 + 2 \u00d7 $10 = $26. The utility of {d, e} in the entire database is u({d, e}) = u({d, e}, T3) + u({d, e}, T4) = $26 + $12 = $38. Consider the first transaction in Table 1, tu(T1) = u(a, T1) + u(b, T1) + u(e, T1) = $9 + $1 + $20 = $30. Then the transaction utilities of T1 to T5 are respectively calculated as tu(T1) = $30, tu(T2) = $18, tu(T3) = $29, tu(T4) = $34, and tu(T5) = $39. Thus, the total utility of in Table 1 is TU = $30 + $18 + $29 + $34 + $39 = $150.\n# 3.3. Correlation for Data Mining\nAs stated in introduction, the current HUPM algorithms have an important limitation that a huge amount of derived patterns may contain many items which are weakly correlated. HUIPM [23] and FDHUP [24] used a new measure called frequency affinity to evaluate the correlation of high-utility patterns. The minimum quantity among all quantities of items inside a pattern in each transaction is used to calculate the affinitive frequency. However, it is not enough to reveal the real inherent correlation of the desired patterns. In the past, the Kulczynsky (abbreviated as Kulc) measure [22, 26, 27] was widely used to evaluate the inherent correlation of a generalized pattern. Its definition is given as follows.\nDefinition 3. The pattern correlation evaluates the strength of the inherent correlation between its items. In general, there are three types of correlations among items in a pattern, including 1) positive correlation, 2) non-correlation, and 3) negative correlation.\nDefinition 4. The Kulc value is an interesting measure to evaluate the correlation between items inside a pattern. According to the previous studies [26, 27], the Kulc value of a group of patterns X is defined as follows:\n(1)\nwhere i j is the j-item in X = {i1, i2, . . . , ik} which totally contains k distinct items.\nTherefore, the range of Kulc value is [0, 1] and it can be easily used to evaluate whether the items in a specific pattern have a positive correlation or not. Clearly, the minimum correlation threshold for measuring Kulc value can be specified by user. Unlike other existing correlation measures, Kulc has the null (transaction)-invariant property. Previous studies [26, 27] have shown that Kulc value is more acceptable and suitable than other correlation measures to evaluate the correlation in data mining. The reason is that it is independent by the dataset size. Based on the above definitions, we have the following problem formulation.\nExample 3. Consider the running example in Table 1, when the settings of minUtil and minCor are respectively 20% and 0.7, the desired CoHUIs are the set of PatternsCoHUI = {{e}, {a, b}, {a, c}, {a, e}, {b, e}, {a, b, e}, {b, c, d}}, while the set of high-utility patterns derived by the exiting HUPM algorithms are PatternsHUI = {{e}, {a, b}, {a, c}, {a, e}, {b, e}, {d, e}, {a, b, c}, {a, b, e}, {a, c, d}, {a, d, e}, {b, c, d}, {a, b, c, d}, {a, b, c, e}, {b, c, d, e {a, b, c, d, e}}. It is clearly seen that most of the patterns in PatternsHUI do not have a positive correlated relationship. For instance, the patterns {d, e} and {a, b, c} have their Kulc values as Kulc({d, e}) \u22480.5833 and Kulc({a, b, c}) \u22480.6333. What\u2019s more, the desired interesting CoHUIs do not have the downward closure property [3]. For example, the pattern {a} is not a CoHUI, while its supersets {a, b}, {a, c}, {a, b, e} are the CoHUIs. Previous studies [7, 8, 9, 10, 29] have shown that the utility of a pattern may be higher, equal to, or lower than that of its super-pattern and/or sub-pattern. Consequently, many pruning techniques of search space that rely on the downward closure property of Apriori [3] cannot be directly applied to discover CoHUIs.\nAs far, we have pointed out the major differences between HUIs and CoHUIs. The models aims at finding different patterns regarding to varied problems. Based on above introduction, the addressed problem in this paper is formulated below.\n3.4. Problem Formulation\n# 3.4. Problem Formulation\nDefinition 5. A group of patterns X in a quantitative database D is defined as a strongly correlated high-utility itemset (denoted as CoHUI) if it satisfies the following two criteria: 1) u(X) \u2265minUtil \u00d7 TU; 2) Kulc(X) \u2265minCor. Otherwise, X is not a CoHUI, it may have a low utility or a negative correlation. Here, minUtil is a minimum utility threshold and minCor is a minimum positive correlation threshold; both of them can be specified by users\u2019 subjective preferences. In this paper, minUtil is a percentage value with respect to the total utility of a quantitative database. Therefore, the problem of correlated utility-based pattern mining (abbreviated as correlated HUPM) is to discover the complete set of significant and insightful CoHUIs in the entire database.\nHUPM has shown its powerful potential in many applications and achieved outstanding performance compared with the\nsupport/confidence based data mining methods. Based on the utility theory [11] and correlation measure, the importance of utility and relations among items/objects are simultaneously taken into account. The extracted results of CoHUIs are high corresponding to positive correlation and profitable values.\n# 4. Proposed One-Phase Algorithm: CoUPM\nIn this section, we propose an one-phase CoUPM algorithm to discover useful patterns, which are not only strongly correlated but also high profitable. CoUPM utilizes a vertical data structure named revised utility-list. Moreover, several effective pruning strategies which utilize the correlation and utility factors are applied to prune the search space and reduce memory cost. Details of the revised utility-list, the adopted pruning strategies, and the main procedures of the proposed algorithm are respectively described below.\n# 4.1. Properties of the CoHUI\nMost existing studies have been demonstrated that both the Kulc measure [26, 27] and utility measure [7] are neither monotonic nor anti-monotonic. In other words, a pattern may have a lower, equal or higher Kulc value (or utility value) than that of its subsets. Without holding the anti-monotonicity, the search space of the addressed problem is hard to be efficiently reduced in the mining process. To hold the downward closure property for mining high-utility patterns, a concept called transactionweighted utilization [7] is commonly used in previous studies. Definition 6. Given a database D and a specific pattern X \u2286D, the transaction-weighted utilization (TWU) [7] of X is defined as the sum of the total utilities of transactions containing X, as shown in the following equation:\nMost existing studies have been demonstrated that both the Kulc measure [26, 27] and utility measure [7] are neither monotonic nor anti-monotonic. In other words, a pattern may have a lower, equal or higher Kulc value (or utility value) than that of its subsets. Without holding the anti-monotonicity, the search space of the addressed problem is hard to be efficiently reduced in the mining process. To hold the downward closure property for mining high-utility patterns, a concept called transactionweighted utilization [7] is commonly used in previous studies.\nDefinition 6. Given a database D and a specific pattern X \u2286D, the transaction-weighted utilization (TWU) [7] of X is defined as the sum of the total utilities of transactions containing X, as shown in the following equation:\n(2)\nExample 4. Consider two patterns {e} and {d, e} in the running example, then TWU(e) = tu(T1) + tu(T3) + tu(T4) + tu(T5) = $30 + $29 + $34 + $39 = $132, and TWU({d, e}) = tu(T3) + tu(T4) = $29 + $34 = $63.\nBased on the definition of CoHUI and utility property, the CoHUI does not hold the anti-monotonicity. In other words, a CoHUI may have lower, equal or higher utility value (or Kulc value) than any of its subsets. The TWU concept solves the anti-monotonicity problem by overestimating the overall utility of patterns in entire database without missing any high-utility patterns. However, a huge number of low-utility patterns still may be regarded as candidates since TWU is a loose upperbound.\n# 4.2. Revised Utility-List with Correlation\nIn previous studies, several approaches [10, 13, 14] use the utility-list [10] structure as a component to store and calculate the necessary information. Thanks to the vertical data structure of utility-list [10], these approaches can efficiently discover\nhigh-utility patterns without multiple database scans. But the original utility-list only deals with utility value, and does not contain the support and correlation information. The addressed problem needs a more flexible version of calculating scheme to obtain the auxiliary information. In the proposed CoUPM algorithm, we revise the utility-list [10] to make it suitable for computing the correlation and utility. Besides, a concept called remaining utility [10] is applied to obtain the estimated upper bound on utility, which will be presented in next subsection. Inspired by the utility-list [10] structure, the revised utility-list structure is defined as follows.\nDefinition 7. Without loss of generality, assume that all items in every transaction are sorted in the lexicographic order. Let the total order on items is denoted as \u227a.\nDefinition 8. Let ru(X, Tc) denote the remaining utility [10] of a group of items/products X in a transaction Tc. Then ru(X, Tc) is the sum of the utility values of each item appearing after X in Tc according to the total order \u227a. Thus, the remaining utility of X does not include the utilities of items in X itself. It can be represented as:\n(3)\nDefinition 9. The revised utility-list of a pattern X in a quantitative database D consists of pattern name (name), support count (sup), and a set of tuples corresponding to the transactions where X appears (tuple). Here, sup is the related support of X that occurred in the entire database, and it is equal to the number of tuples in this vertical data structure. A tuple is defined as <tid, iu, ru> for each transaction Tc containing X. \u2022 tid: the transaction identifier of Tc; \u2022 iu: the actual utility of X in Tc, w.r.t. u(X, Tc); \u2022 ru: the remaining utility of X in Tc, w.r.t. ru(X, Tc).\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/3702/3702ea58-91b2-4d11-b876-b13935baa260.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Figure 2: Constructed revised utility-list of 1-itemset (d).</div>\nExample 5. Consider T4 and two patterns {d} and {d, e} in Table 1. Assume the total order \u227aadopts the support ascending order of all 1-itemsets. Since the support values of all 1items in Table 1 are {a:5, b:4, c:2, d:3, e:4}, the total order is c \u227ad \u227ab \u227ae \u227aa. Then we have that ru(d, T4) = u(b, T4) + u(e, T4) + u(a, T4) = $5 + $10 + $3 = $18, and ru({d, e}, T4) = u(a, T4) = $3. Consider the running example and the defined total order \u227a, the revised utility-list of pattern (d) is {(T2, $2, $9), (T3, $6, $23), (T4, $2, $18)}, and its total support is 3, as shown in Figure 2.\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/9d02/9d022340-4754-479d-b7b4-448ecdf9f6a0.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Figure 3: Constructed revised utility-list of 2-itemset (db).</div>\nUnlike the original utility-list [10] only deals with utility value, our revised structure can deal with more rich information, including support, correlation and utility. We can perform a single database scan to create the all revised utility-lists of all 1-items in the processed database. After constructing the initial revised utility-list of each 1-item X \u2208D (denoted as X.list), for any k-itemset (k \u22652), its revised utility-list can be directly constructed using the already built revised utility-lists of its subsets. Note that this operation does not need to scan the database anymore, and the built revised utility-lists fit in main memory. Details of the construction procedure of the revised utility-list are similar to the construction of utility-list, which can be referred to [10]. The difference between them is that after the join operation of two common tids, the procedure in the CoUPM algorithm simultaneously updates the support information in the revised utility-list for pattern Xab. This is denoted as Xab.list.sup ++. For example, the 2-itemset db appears in T2 and T4, and its revised utility-list is constructed based on d.list and b.list, as shown in Figure 3. Note that the construction keeps consistent with respect to the total order c \u227ad \u227ab \u227ae \u227aa. Note that for optimization, when finding the common tids of two itemsets from the two sets of tids in the revised utilitylists, we use the binary search to speed up the computational efficiency. For example, we can perform a binary search to find the element with a given tid in a target revised utility-list.\n X.IU\nDefinition 10. Based on the designed revised utility-list, let X.I and X.RU respectively denote the sum of utility values and the sum of remaining utility values for a pattern X in the constructed revised utility-list of X. According to [16, 48], they can be calculated as follows:\n(5)\nThus, X.IU of a pattern X equals to u(X). Both X.IU and u(X) are the total utility of X in the entire database.\n# 4.3. Pruning Strategies for Searching CoHUIs\nSimilar to previous studies [7, 24], the complete search space of the addressed problem can be presented as a Set-enumeration tree [49]. This prefix-based tree structure represents all possible itemsets of I where each tree node represents a subset of I. It is important to notice that this tree structure is only a conceptual representation and not stored in entirety while performing the mining process. In worst case, this approach may have up to\n2n final itemsets (i.e., all itemsets of the search space with I). Without downward closure property, the search space would be huge. To address this limitation, we present a prefix-based depth-first enumeration tree. It means that the node in this tree structure is searched in the depth-first manner. To speed up performance, the existing CoHUIM algorithm utilizes the Kulc measure in non-decreasing order of support count that holds the sorted downward closure property [25]. By utilizing the revised utility-list, this sorted downward closure property of Kulc measure [25] can be applied in the proposed CoUPM algorithm. More importantly, the enumeration of potential patterns may be terminated earlier by Kulc value and upper bound on utility. Details of the pruning strategies are described below.\nLemma 1 (Sorted downward closure property of Kulc). If the items in the set {a1, a2, ..., ak, ak+1} are sorted in support-ascending order, i.e., sup(a1) \u2264sup(a2) \u2264... \u2264sup(ak) \u2264sup(ak+1), the Kulc measure has the sorted downward closure property. That is: Kulc(a1...akak+1) \u2264Kulc(a1...ak) [25].\nProof 1. A complete proof can be referred to [25].\n# Proof 1. A complete proof can be referred to [25].\nBased on Lemma 1, the following sorted downward closure property of Kulc measure can be held.\nTheorem 1. (Anti-monotonicity of Kulc with SDC property). For any rooted node/itemset in the search space of CoUPM, if a tree node is a correlated pattern, its parent node is also a correlated pattern in D. Let X be a k-itemset (node), and X\u2032 be any of its child nodes (extension, (k+1)-itemset). The Kulc measure with the SDC property is anti-monotonic: Kulc(X\u2032) \u2264Kulc(X) always holds.\nExample 6. Since the support counts of all 1-items are {a:5, b:4, c:2, d:3, e:4}, this set of 1-items is sorted in supportascending order as {c \u227ad \u227ab \u227ae \u227aa}. Based on the definition of Kulc value (c.f. Formula 1), we can calculate the Kulc values of the following patterns, {c, d}, {c, d, b}, {c, d, b, e} and {c, d, b, e, a}, as: Kulc({c, d}) \u22480.833, Kulc({c, d, b}) \u22480.722, Kulc({c, d, b, e}) \u22480.333 and Kulc({c, d, b, e, a}) \u22480.307.\nThus, the Kulc measure holds anti-monotonicity if the processed items are sorted in support-ascending order. Note that the total order \u227bof items in the Set-enumeration tree [49] for the proposed CoUPM algorithm adopts the support-ascending order. Thus, we can utilize the following properties to prune the search space, and the details are described below.\nLemma 2 (Upper bound on utility). For any rooted node/item set X in the search space of CoUPM, the sum of X.IU and X.RU in the revised utility-list of X is always no less than the overall utility of any of its descendant nodes (extensions, denoted as X\u2032). It is an upper bound on utility, such that X\u2032.IU \u2264 X.IU + X.RU.\nProof 2. A complete proof of this lemma can be referred to [16, 48].\nProof 2. A complete proof of this lemma can be referred to [16, 48].\nThus, the sum of the utilities of X\u2032 in D would not greater than (X.IU + X.RU) of X in D. In other words, (X.IU + X.RU) of X is an upper bound on utility while evaluating the overall utility of a specific pattern.\nExample 7. Consider the running example, assume we perform the depth-first manner in the search space with the supportascending order as {c \u227ad \u227ab \u227ae \u227aa}. When determining the nodes/patterns in the subtree rooted at node {c, d, b}, we have: {c, d, b}.IU = $33, {c, d, b}.RU = $19, thus {c, d, b}.IU + {c, d, b}.RU = $33 + $19 = $52. All the nodes in the subtree of {c, d, b} would not have a utility value higher than the upper bound on utility of node {c, d, b}. For instance, {c, d, b, e}.IU = $31, {c, d, b, a}.IU = $34, {c, d, b, e, a}.IU = $42, all are less than $52.\nTheorem 2. (Anti-monotonicity of upper-bound on utility). Fo any node/itemset X in the search space of CoUPM, let X\u2032 denote any of X\u2019s children (extension node). Then the sum of X.IU and X.RU in the revised utility-list of X (equally in the entire database) is always larger than or equal to the sum of X\u2032.IU and X\u2032.RU of X\u2032 in the entire database. That is X\u2032.IU + X\u2032.RU \u2264X.IU + X.RU [16, 48].\nThus, the sum of total utilities and remaining utilities of X in D is always larger than or equal to the sum of utilities of its extension in the search space. This upper bound ensures that the downward closure property of transitive extensions. Based on the above observations, we can use the following filtering strategies.\nStrategy 1. Pruning strategy using the SDC property of Kulc value, abbreviated as SPK strategy. Assume the total order \u227bof the processed items adopts the support-ascending order. While performing a depth-first search strategy in the search space, if the relative Kulc value of any node/itemset X is less than minCor, any of its child node is not a CoHUI, and these unpromising patterns can be regarded as irrelevant and pruned directly.\nStrategy 2. Pruning strategy using the upper bound on utility, abbreviated as UBU strategy. After building the initial revised utility-lists for each 1-itemset, the CoUPM algorithm traverses the search space based on a depth-first search strategy. If the sum of X.IU and X.RU of any node/pattern X is less than minUtil\u00d7TU, any of its child node would not be a CoHUI, they can be regarded as irrelevant and pruned directly.\nTo further improve the mining efficiency, the LA-Prune strat egy [14] with the upper bound on utility is extended to the proposed algorithm.\nStrategy 3. LA-Prune strategy. In the search space, let X be a processed pattern (node), and Y be the right sibling node of\nStrategy 3. LA-Prune strategy. In the search space, let X be a processed pattern (node), and Y be the right sibling node of\nX. If the sum of (X.IU + X.RU) subtracts the utilities (X.iu + X.ru) of a set of transactions is less than minUtil, the combined pattern {X, Y} is not a HUI (also not a CoHUI), and any of child nodes of X would not be a HUI (also not be a CoHUI). During the depth-first search progress, the construction of the revised utility-lists for the children nodes of X is not necessary to be performed. The improved construction procedure is similar to that of revised utility-list. It utilizes the LA-Prune strategy to avoid constructing a huge number of revised utility-lists of the unpromising patterns, as described in Algorithm 1.\nThe improved construction procedure is similar to that of revised utility-list. It utilizes the LA-Prune strategy to avoid constructing a huge number of revised utility-lists of the unpromising patterns, as described in Algorithm 1.\nAlgorithm 1 Construction with LA-Prune\nInput: X: an itemset, Xa: the extension of X with an item a,\nXb: the extension of X with an item b (a \ufffdb)\nOutput: Xab.\n1: initialize Xab.list \u2190\u2205;\n2: set Utility = X.IU + X.RU;\n3: for each element/tuple Ea \u2208Xa.list do\n4:\nif \u2203Ea \u2208Xb.list \u2227Ea.tid == Eb.tid then\n5:\nif X.list \ufffd\u2205then\n6:\nsearch for each element E \u2208X.list such as E.tid =\nEa.tid;\n7:\nEab \u2190<Ea.tid, Ea.iu + Eb.iu \u2212E.iu, Eb.ru>;\n8:\nelse\n9:\nEab \u2190<Ea.tid, Ea.iu + Eb.iu, Eb.ru>;\n10:\nend if\n11:\nXab.list \u2190Xab.list \u222aEab;\n12:\nupdate support information in the revised utility-list\nfor Xab, such as Xab.list.sup ++.\n13:\nelse\n14:\nUtility = Utility - Ea.iu - Ea.ru;\n15:\nif Utility < minUtil then\n16:\nreturn null.\n17:\nend if\n18:\nend if\n19: end for\n20: return Xab\n# 4.4. Main Procedure\nTo clarify our methodology, we have illustrated the designed data structure, the key properties of utility and correlation with Kulc value, and the upper bound on utility so far. Utilizing the above technologies, the main procedure of the designed CoUPM algorithm is shown in Algorithm 2. It takes four parameters as input: 1) an e-commerce quantitative database, D; 2) a user-specified profit-table, ptable; 3) a minimum positive correlation threshold, minCor (0 \u2264minCor \u22641); and 4) a userspecified minimum utility threshold, minUtil (0 \u2264minUtil \u2264 1). When minCor is set to 0, it means that CoUPM does not consider the correlation factor. The CoUPM algorithm first scans the database once to calculate TWU(i) and construct the Tidset of each item i \u2208I in D. The total utility of D is also calculated. Here, the built Tidset of\nAlgorithm 2 The CoUPM algorithm Input: D; ptable; minCor; minUtil. Output: CoHUIs: the set of correlated high-utility itemsets. 1: scan D once to calculate TWU(i), construct the Tidset of each item i \u2208I in D, and obtain the TU; 2: find all 1-item i \u2208I such that TWU(i) \u2265minUtil\u00d7TU, then put into the set of I\u2217; 3: use the Tidset to sort I\u2217in the support-ascending order as the total order \u227b; 4: scan D once again to build the revised utility-list of each itemset i \u2208I\u2217using the total order \u227b; 5: call Search(\u2205, I\u2217, minCor, minUtil). 6: return CoHUIs\nall 1-items can be used to sort the items and calculate the Kulc value in the later processes. Then all the 1-items which have TWU(i) \u2265minUtil \u00d7 TU are put into the set of I\u2217. Thereafter, all patterns do not in the candidate set I\u2217will be ignored since they cannot be the part of CoHUIs. CoUPM then scans D once again to build the initial revised utility-list of each item i \u2208I\u2217 using the total order \u227b. It is important to notice that the adopted order \u227bshould be kept consistently after the construction of revised utility-list. In the designed CoUPM algorithm, the support-ascending order is used to hold the sorted downward closure property of Kulc value. In other words, without using this sorting order, we only can utilize the upper bound on utility w.r.t. Strategy 2 to prune the search space. In the next section of experimental results, we will conduct the proposed CoUPM algorithm with or without using the sorted downward closure property of Kulc value w.r.t. Strategy 1. The S earch procedure (as shown in Algorithm 3) takes as input: 1) a pattern X, 2) extensions of X having the form Xa means that Xa is obtained by appending a pattern a to X, 3) minCor, and 4) minUtil. The search procedure operates as follows. It first obtains the Xa.IU and Xa.RU values from the built revised utility-list of Xa (denoted as Xa.list) (Line 2). It also calculates the Kulc(Xa) value using the built Xa.list and Tidsets of all 1-items (Line 3 and Eq. (4)). As mentioned previously in Formula 1, the calculation of Kulc(Xa) value of an itemset Xa is based on all support count of the 1-items containing in this itemset. Notice that here the Tidsets of all 1-items just needs to be built once in the first database scan. Since the support count of a special itemset can be easily obtained from its revised utility-list w.r.t. support element, we can quickly calculate this Kulc(Xa) value. For each extension Xa of X, if the related correlation of Xa is no less than minCor, and the sum of the actual utility of Xa (w.r.t. Xa.IU in revised utility-list) is no less than minUtil \u00d7TU, then this pattern is output as a CoHUI (Lines 4 to 5). After that, the designed pruning strategies are used to determine whether the extensions of Xa should be explored or not (Line 6, using Strategy 1 and Strategy 2). This is performed by merging Xa with each extension Xb of X such that a \u227bb, to form extensions of the form Xab (Lines 9 to 10). The revised utility-list of Xab is then constructed by calling the Construct procedure to per-\nAlgorithm 3 The S earch procedure\nInput: X, extensionsOfX, minCor, minUtil.\nOutput: the set of CoHUIs.\n1: for each itemset Xa \u2208extensionsOfX do\n2:\nobtain the Xa.IU and Xa.RU from the built Xa.list;\n3:\ncalculate the Kulc(Xa) value using the built Xa.list and\nTidset of all 1-items;\n4:\nif Kulc(Xa) \u2265minCor and Xa.IU \u2265minUtil \u00d7 TU then\n5:\nCoHUIs \u2190CoHUIs \u222aXa;\n6:\nend if\n7:\nif Kulc(Xa) \u2265minCor and (Xa.IU +Xa.RU) \u2265minUtil\u00d7\nTU then\n8:\nextensionsOfXa \u2190\u2205;\n9:\nfor each itemset Xb \u2208extensionsOfX such that Xb after\nXa do\n10:\nXab \u2190Xa \u222aXb;\n11:\nXab.list \u2190Construct(X, Xa, Xb);\n12:\nif Xab.list \ufffd\u2205then\n13:\nextensionsOfXa \u2190extensionsOfXa \u222aXab.list;\n14:\nend if\n15:\nend for\n16:\ncall Search(Xa, extensionsOfXa, minCor, minUtil).\n17:\nend if\n18: end for\n19: return CoHUIs\nform the join operation of the revised utility-lists of X, Xa and Xb (Line 11, details of the construction have been described in Algorithm 1). To further filter the unpromising patterns, only the promising patterns with their revised utility-lists would be explored in next extension (Line 11). After all the extensions of the rooted Xa are performed (Line 12), it recursively calls the Search procedure with extensionsOfXa to continually explore its extension(s) (Line 13).\n# 5. Experimental Study\nIn this section, we conduct several experiments to demonstrate the effectiveness and efficiency of our proposed model. Baseline algorithms. Note that we use one of the traditional HUPM algorithms (e.g., FHM [13]) and FDHUP to generate the different kinds of discovered results for pattern evaluation, while only the CoHUIM algorithm is compared for efficiency evaluation. The reason is that different kinds of patterns are related to different mining tasks, and they can be used to analyze the effectiveness and usefulness of the CoUPM framework. While the efficiency should be compared with those algorithms which focus on same mining task. Thus, it is unreasonable to evaluate the efficiency by comparing algorithms from different domains. The CoUPM algorithm is compared with some baseline approaches, including traditional HUPM algorithm which does not consider correlation factor (e.g., HUI-Miner [10], FHM [13] and EFIM [15]), the frequency-affinity-based FDHUP algorithm [23], and the projection-based CoHUIM algorithm [24].\nVariants of CoUPM algorithm. Additional to the baseline CoUPM algorithm which only utilizes the Strategy 2, three improved variants, e.g., CoUPMsorted (adopts Strategies 1 and 2), CoUPMLA (adopts Strategies 2 and 3), and CoUPMsorted+LA (adopts Strategies 1, 2 and 3), are used to evaluate the efficiency of the proposed algorithm.\n# 5.1. Data Description and Experimental Setup\nDatasets. Typically e-commerce datasets are proprietary and consequently hard to find among publicly available data. To conduct experiments, we use five publicly available realworld datasets (foodmart, chess3, mushroom3) and one synthetic dataset (T10I4D100K) in our experiments. The characteristics of used datasets are described below in details.\n\u2022 T10I4D100K: this is a synthetic dataset, which has 100,000 transactions with 870 distinct items, and the average transaction length is 10.1 items.\nNote that the foodmart dataset already contains the quantity and a unit profit of each item, while chess and mushroom do not contain the quantitative and profit information. Therefore, we use a simulation method, which is widely adopted in previous studies [9, 10, 24], to generate the quantitative and profit information for each item in the chess and mushroom datasets. For the addressed utility-based mining problem, these used datasets having varied characteristics make the experimental results more convincing and acceptable. Language and experimental environment. All the algorithms in the experiments were implemented in Java language and performed on a personal ThinkPad T470p computer with an Intel(R) Core(TM) i7-7700HQ CPU @ 2.80 GHz 2.81 GHz, 32 GB of RAM, and with the 64-bit Microsoft Windows 10 operating system.\n3http://fimi.ua.ac.be/data/\n<div style=\"text-align: center;\">Table 3: Derived patterns under various parameters</div>\nDataset\n# Patterns\n# patterns under different thresholds\n\u03b11\n\u03b12\n\u03b13\n\u03b14\n\u03b15\n\u03b16\n#HUIs\n93,418\n49,821\n26,176\n14,156\n8,364\n5,365\n#DHUIs\n33,621\n16,285\n8,712\n5,277\n3,644\n2,778\n#P1 (minCor: 0.01)\n93,418\n49,821\n26,176\n14,156\n8,364\n5,365\nfoodmart\n#P2 (minCor: 0.02)\n24,857\n17,127\n12,026\n8,557\n6,290\n4,683\n#P3 (minCor: 0.03)\n20,224\n15,082\n11,195\n8,247\n6,191\n4,651\n#P4 (minCor: 0.04)\n6,869\n5,675\n4,682\n3,831\n3,222\n2,764\n#P5 (minCor: 0.05)\n4,654\n4,092\n3,558\n3,084\n2,712\n2,405\n#P6 (minCor: 0.06)\n2,644\n2,501\n2,344\n2,204\n2,065\n1,944\n#HUIs\n-\n-\n45,711,058\n2,486,972\n22,641\n15,713\n#DHUIs\n14,539\n12,620\n11,122\n9,873\n8,847\n7,953\n#P1 (minCor: 0.10)\n11,510\n10,244\n9,252\n8,474\n7,836\n7,301\nretail\n#P2 (minCor: 0.12)\n10,221\n9,224\n8,402\n7,735\n7,170\n6,686\n#P3 (minCor: 0.14)\n8,734\n7,922\n7,239\n6,676\n6,187\n5,783\n#P4 (minCor: 0.16)\n7,600\n6,929\n6,317\n5,825\n5,402\n5,050\n#P5 (minCor: 0.18)\n7,081\n6,469\n5,909\n5,455\n5,063\n4,732\n#P6 (minCor: 0.20)\n6,823\n6,238\n5,699\n5,260\n4,878\n4,562\n#HUIs\n198,920\n89,933\n39,281\n16,848\n7,141\n2,969\n#DHUIs\n0\n0\n0\n0\n0\n0\n#P1 (minCor: 0.74)\n8,717\n6,083\n4,021\n2,493\n1,438\n760\nchess\n#P2 (minCor: 0.75)\n7,330\n5,113\n3,378\n2,101\n1,199\n629\n#P3 (minCor: 0.76)\n6,062\n4,210\n2,773\n1,704\n799\n500\n#P4 (minCor: 0.77)\n4,987\n3,464\n2,282\n1,401\n799\n415\n#P5 (minCor: 0.78)\n4,118\n2,856\n1,872\n1,145\n650\n333\n#P6 (minCor: 0.79)\n3,316\n2,287\n1,483\n891\n503\n252\n#HUIs\n22,121\n13,953\n7,601\n3,420\n1,265\n356\n#DHUIs\n8\n2\n0\n0\n0\n0\n#P1 (minCor: 0.40)\n8,732\n5,320\n2,723\n1,145\n435\n138\nmushroom\n#P2 (minCor: 0.42)\n7,126\n4,422\n2,374\n1,046\n413\n129\n#P3 (minCor: 0.44)\n5,962\n3,778\n2,060\n928\n362\n106\n#P4 (minCor: 0.46)\n4,783\n3,043\n1,656\n748\n280\n82\n#P5 (minCor: 0.48)\n3,595\n2,236\n1,176\n508\n195\n61\n#P6 (minCor: 0.50)\n2,452\n1,478\n729\n301\n107\n40\n#HUIs\n370,624\n167,972\n91,529\n56,326\n37,381\n26,385\n#DHUIs\n49,762\n25,080\n14,922\n9,762\n6,836\n5,042\n#P1 (minCor: 0.015)\n90,087\n63,049\n46,155\n35,124\n27,003\n21,197\nBMSPOS2\n#P2 (minCor: 0.020)\n58,665\n42,653\n32,439\n25,609\n20,486\n16,700\n#P3 (minCor: 0.025)\n41,469\n30,896\n24,034\n19,392\n15,879\n13,254\n#P4 (minCor: 0.030)\n30,857\n23,459\n18,537\n15,182\n12,584\n10,652\n#P5 (minCor: 0.035)\n23,915\n18,519\n14,840\n12,317\n10,327\n8,854\n#P6 (minCor: 0.040)\n19,116\n14,970\n12,146\n10,144\n8,563\n7,413\n#HUIs\n80,933\n39,848\n27,839\n21,103\n16,850\n13,722\n#DHUIs\n45,994\n24,115\n15,961\n10,503\n6,626\n4,434\n#P1 (minCor: 0.12)\n18,129\n15,811\n13,790\n12,082\n10,396\n8,841\nT10I4D100K\n#P2 (minCor: 0.14)\n15,260\n13,283\n11,664\n10,287\n8,884\n7,594\n#P3 (minCor: 0.16)\n12,824\n11,107\n9,772\n8,629\n7,457\n6,424\n#P4 (minCor: 0.18)\n10,667\n9,228\n8,132\n7,181\n6,209\n5,380\n#P5 (minCor: 0.20)\n8,917\n7,685\n6,767\n5,986\n5,186\n4,498\n#P6 (minCor: 0.22)\n7,425\n6,391\n5,607\n4,952\n4,284\n3,731\nParameter settings. It is important to notice that both FHM [13] and FDHUP [23] are varied by one parameter minUtil, while the CoHUIM and CoUPM algorithms discover the CoHUIs by using two constraints: correlation and utility. Therefore, experiments are conducted on each dataset by varying minUtil. In addition, the minCor is adjusted with six times on each dataset to evaluate the effectiveness of mining patterns. Specifically, as shown in Table 3, the six different minCor thresholds are respectively set on each data. For instance, in foodmart, minCor is varying from 0.01 to 0.06, such as 0.01, 0.02, 0.03, 0.04, 0.05, 0.06.\n# 5.2. Effectiveness Analytics\nThe addressed problem aims at computing the satisfiable correlated and high profitable patterns. Thereby, the derived\nCoHUIs explicitly includes availability of the correlation and utility contribution. To further investigate the effectiveness of the addressed problem for correlated utility-based pattern mining, we plot in Table 3 with the results of different kinds of generated patterns under various parameter settings. Note that the #HUIs is the number of HUIs discovered by one of traditional HUIM algorithms (e.g., FHM), #DHUIs is the number of discriminative HUIs discovered by FDHUP, and the #CoHUIs (it is respectively denoted as #P1 to #P6 under six minCor thresholds) is the number of correlated HUIs discovered by the CoHUIM and CoUPM algorithms. In Table 3, \u03b1 represents minUtil. As shown in Table 3, it can be clearly observed that the number of CoHUIs is always different from that of #HUIs and #DHUIs under various minCor and minUtil thresholds on all\ntest datasets under all parameter settings. More specifically, both the minCor and minUtil affect the results of CoHUIs, as shown from #P1 to #P6 on each dataset. In general, the numbers of DHUIs and CoHUIs are always smaller than that of HUIs. These results are reasonable since the DHUIs and CoHUIs are determined with not only the utility constraint, but also the correlation measure. Therefore, to derive desired patterns, more criteria can usually be applied to produce fewer patterns. The difference between #DHUIs and #CoHUIs indicates that the addressed problem with Kulc measure is more acceptable than the frequency-affinity-based utility mining framework. It is interesting to observe that the number of DHUIs in chess and mushroom datasets under various minUtil thresholds is close to zero. In addition, the number of patterns discovered by the designed CoPUM algorithm under six minCor always has: #P1 \u2265 #P2 \u2265#P3 \u2265#P4 \u2265#P5 \u2265#P6. When minUtil is fixed on a processed dataset, the larger minCor is, the smaller the number of derived CoHUIs is. For instance, when minUtil is set as 19% on chess, #HUIs is 39,281, #DHUIs is 0, while the number of CoHUIs is changed from 4,021 to 1,483 (details are #P1 = 4,021, #P2 = 3,378, #P3 = 2,773, #P4 = 2,282, #P5 = 1,872, and #P6 = 1,483) when minCor is varying from 0.74 to 0.79. It indicates that the adopted correlated Kulc measure is acceptable and useful to extract non-redundant correlated high-utility patterns from quantitative datasets.\n# 5.3. Efficiency Analytics\nFrom Table 3, we can observe that the mining results with the influence of minCor threshold and minUtil threshold. In this subsection, we continue to perform the evaluation of efficiency in terms of running time. To make fair comparison, we use the same parameter settings which are tested in Table 3. Both the minimum correlation threshold and the minimum utility threshold are used to evaluate the efficiency. We investigate the processing time of CoHUIM, CoUPM, and its three improved variants in six real datasets by varying minUtil and minCore. When varying one threshold, another one is fixed on each dataset. The results of total execution time of the four variants are presented in Figure 4 and Figure 5, respectively. In particular, CoUPMsorted means the designed CoUPM algorithm with Strategy 1 which utilizes the sorted downward closure property of Kulc measure), while CoUPM is executed without using Strategy 1. Firstly, CoUPM with or without Strategy 1 consistently outperforms the state-of-the-art CoHUIM approach, even up to 3 orders of magnitude. In particular, CoUPMsorted outperforms CoUPM in most cases under all parameter settings. For example, in the case in Figure 4(e), we can obviously observe the difference of the runtime between CoUPMsorted and CoUPM. When minUtil is set to 20% on chess dataset, the runtime of CoUPMsorted always closes to 4 seconds, while CoUPM approximately has its processing time as 40 seconds. This difference also can be observed from the other datasets. This observation indicates that the sorted downward closure property of Kulc measure plays an active role in pruning the search space of the correlation-based CoUPM algorithm.\nBased on the observation of runtime between CoUPM and CoUPMLA, it indicates that the LA-Prune strategy also plays an active role in filtering the unpromising patterns in some cases. To summarize, the improved algorithms which utilize the powerful pruning strategies always have the best performance compared to the baseline CoUPM algorithm, as well as the CoHUIM algorithm. It is important to notice that the projection-based CoHUIM algorithm may be very time-consuming on low thresholds or dense datasets. And this computational efficiency problem migh be more easily happened in dense datasets, which can been seen in the view of Figure 4(b), Figure 4(c), Figure 5(b), and Figure 5(c), respectively. Overall, the proposed CoUPM algorithm significantly has better performance than the state-of-theart CoHUIM algorithm in terms of running time and memory consumption. On dense datasets, i.e., chess and mushroom, the consumed memory of CoHUIM is very huge and can up to 50 times than that of CoUPM.\n# 5.4. Memory Evaluation\nIn this subsection, we continue to evaluate the memory consumption of the compared algorithms. Results of the peak memory usage of CoHUIM and different variants of CoUPM on the all test datasets with the same parameter settings in Figure 4 and Figure 5 are shown in Figure 6 and Figure 7, respectively. Note that we use the Java API to calculate the peak memory consumption of each compared algorithm during the whole mining process. As we can see, all the revised utility-list-based models perform significantly better than the projection-based CoHUIM algorithm, demonstrating the suitability of these models for dense datasets or large-scale datasets. For example, as shown in Figure 6, the peak memory consumption for CoUPM is significantly less than that of CoHUIM. In addition, the improved variants, e.g., CoUPMsorted, CoUPMLA and CoUPMsorted+LA, consume less memory than the baseline CoUPM algorithm that only adopts the pruning Strategy 2. The peak memory consumptions under various values of parameters (minUtil and minCor) are shown in Figure 6 and Figure 7, respectively. Note that the y-axis shows the peak memory consumption of the whole mining process corresponding to the choice of minimum utility threshold (minUtil) and minimum correlation threshold (minCore). As what can be seen, the proposed CoUPM model with several pruning strategies outperforms CoHUIM for all parameter settings. As mentioned previously, the advantage of CoUPM is that it is able to early filter a large amount of unpromising patterns by building the initial revised utility-lists. As the size of explored pattern increases, the revised utility-list size decreases, thus CoUPM exceeds the available main memory and its overall execution time decreases significantly. For instance, at mushroom (minCore = 0.42 and minUtil =10% at Figure 6), CoUPM has a peak memory consumption of 650 MB and requires 6s to discover the required information. For the same minimum thresholds, CoHUIM has a peak memory consumption of 2,900 MB and requires 43s for the mining task. This corresponds to a speed-up of 4.5x in\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/ad28/ad287a61-e706-4891-8be7-7dcb53ac2245.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Figure 4: Runtime under various parameters (varying minUtil, fix minCor).</div>\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/1283/128385c0-32a5-4f14-ad3b-738c84ad3caf.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Figure 5: Runtime under various parameters (fix minUtil, varying minCor)</div>\nFigure 5: Runtime under various parameters (fix minUtil, varying minCor).\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/a221/a2216e05-8dbd-4944-9add-ef4423f5bd29.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Figure 6: Memory usage under various parameters (varying minUtil, fix minCor).</div>\nmemory, and speed-up of 7x in execution time. For dense data sizes (e.g., chess, mushroom), the speed-up increases further.\n# 5.5. Summary and Discussion\nFor the proposed CoUPM, we have the following observations: (1) Best performance is achieved when all data structures (revised utility-lists) fit in main memory. (2) The performance degrades but still remains acceptable while dealing with dense dataset. (3) The low performance of projection-based CoHUIM model may be related to the huge memory consumption which is quite important in utility mining. In summary, we have the following observations of the results.\n\u2022 First, the filtered estimation of upper bound on utility takes a positive role in early pruning the unpromising patterns based on the revised utility-list to store the compact but complete information.\n\u2022 Second, the designed CoUPM algorithm makes use of the compact data structure named revised utility-list. Thus, it can efficiently hold the \u201cmining during the constructing\u201d property, and the real search space and memory cost can be significantly reduced. On the contrast, the projection CoHUIM approach which recursively projects the subdatabases for next iteration may easily encounter a huge of memory cost, especially on dense datasets.\n Third, by utilizing the proposed pruning strategies with the properties of correlation and upper bound on utility, the search space and memory cost of the CoUPM algorithm is further reduced. The worse performance of the CoHUIM algorithm is caused by the candidate generation-and-test mechanism.\n\u2022 In general, the upper bond on utility used in CoHUIM is not tight enough, and a huge number of candidates are required to be generated although the sorted downward closure property of Kulc is adopted in CoHUIM to prune the candidates in the search space.\n# 6. Conclusion and Future Work\nIn this paper, we have presented an efficient utility mining framework named CoUPM for discovering non-redundant correlated high-utility patterns from quantitative databases. It studies the problem of utility-based pattern mining by measuring both correlation and availability of utility. Based on the revised utility-list, CoUPM does not need to scan the database with multiple times. It relies on several pruning strategies, which utilize the sorted downward closure of Kulc and upper bound on utility based on the concept of remaining utility. Moreover, CoUPM can directly discover the desired patterns from the quantitative databases by avoiding performing costly intersection operations of revised utility-lists. The extensive performance on several real-world datasets demonstrates the effectiveness and efficiency of the CoUPM algorithm. For the future work, we plan to improve the mining efficiency by developing a new data structure instead of using the utility-list for the addressed problem. Secondly, we would focus on other practical effectiveness issues of utility mining. For example, we would like to conduct further research of the proposed model to deal with the dynamic utility mining [17, 18], utility mining on uncertain data [16], and privacy issue [50]. Lastly, it is also interesting to take the other interesting extensions and applications into account for our future studies.\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/3c11/3c112e52-5fff-491c-808c-2550da3571c9.png\" style=\"width: 50%;\"></div>\n# Acknowledgment\nThis work was partially supported by the Shenzhen Technical Project under JCYJ 20170307151733005 and KQJSCX 20170726103424709. Specifically, Wensheng Gan was supported by the CSC (China Scholarship Council) Program during the study at University of Illinois at Chicago, IL, USA.\n# References\n# References\n[1] M. S. Chen, J. Han, P. S. Yu, Data mining: an overview from a database perspective, IEEE Transactions on Knowledge and data Engineering 8 (6) (1996) 866\u2013883. [2] W. Gan, J. C. W. Lin, H. C. Chao, J. Zhan, Data mining in distributed environment: a survey, Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 7 (6) (2017) e1216. [3] R. Agrawal, R. Srikant, et al., Fast algorithms for mining association rules, in: Proceedings of the 20th International Conference on Very Large Data Bases, Vol. 1215, 1994, pp. 487\u2013499. [4] J. Han, J. Pei, Y. Yin, R. Mao, Mining frequent patterns without candidate generation: A frequent-pattern tree approach, Data Mining and Knowledge Discovery 8 (1) (2004) 53\u201387. [5] W. Gan, J. C. W. Lin, P. Fournier-Viger, H. C. Chao, J. Zhan, Mining of frequent patterns with multiple minimum supports, Engineering Applications of Artificial Intelligence 60 (2017) 83\u201396. [6] W. Gan, J. C. W. Lin, P. Fournier-Viger, H. C. Chao, P. S. Yu, A survey of parallel sequential pattern mining, arXiv preprint arXiv:1805.10515. [7] Y. Liu, W. K. Liao, A. Choudhary, A two-phase algorithm for fast discovery of high utility itemsets, in: Proceedings of the Pacific-Asia Conference on Knowledge Discovery and Data Mining, Springer, 2005, pp. 689\u2013695. [8] C. F. Ahmed, S. K. Tanbeer, B. S. Jeong, Y. K. Lee, Efficient tree structures for high utility pattern mining in incremental databases, IEEE Transactions on Knowledge and Data Engineering 21 (12) (2009) 1708\u20131721. [9] V. S. Tseng, B. E. Shie, C. W. Wu, P. S. Yu, Efficient algorithms for mining high utility itemsets from transactional databases, IEEE Transactions on Knowledge and Data Engineering 25 (8) (2013) 1772\u20131786.\n[10] M. Liu, J. Qu, Mining high utility itemsets without candidate generation, in: Proceedings of the 21st ACM International Conference on Information and Knowledge Management, ACM, 2012, pp. 55\u201364. [11] A. Marshall, From principles of economics, in: Readings in the Economics of the Division of Labor: the Classical Tradition, World Scientific, 2005, pp. 195\u2013215. [12] V. S. Tseng, C. W. Wu, B. E. Shie, P. S. Yu, UP-Growth: an efficient algorithm for high utility itemset mining, in: Proceedings of the 16th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ACM, 2010, pp. 253\u2013262. [13] P. Fournier-Viger, C. W. Wu, S. Zida, V. S. Tseng, FHM: Faster highutility itemset mining using estimated utility co-occurrence pruning, in: Proceedings of the International Symposium on Methodologies for Intelligent Systems, Springer, 2014, pp. 83\u201392. [14] S. Krishnamoorthy, Pruning strategies for mining high utility itemsets, Expert Systems with Applications 42 (5) (2015) 2371\u20132381. [15] S. Zida, P. Fournier-Viger, J. C. W. Lin, C. W. Wu, V. S. Tseng, EFIM: a fast and memory efficient algorithm for high-utility itemset mining, Knowledge and Information Systems 51 (2) (2017) 595\u2013625. [16] J. C. W. Lin, W. Gan, P. Fournier-Viger, T. P. Hong, V. S. Tseng, Efficient algorithms for mining high-utility itemsets in uncertain databases, Knowledge-Based Systems 96 (2016) 171\u2013187. [17] J. C. W. Lin, W. Gan, T. P. Hong, A fast updated algorithm to maintain the discovered high-utility itemsets for transaction modification, Advanced Engineering Informatics 29 (3) (2015) 562\u2013574. [18] W. Gan, J. C. W. Lin, P. Fournier-Viger, H. C. Chao, T. P. Hong, H. Fujita, A survey of incremental high-utility itemset mining, Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 8 (2) (2018) e1242. [19] Y. C. Lin, C. W. Wu, V. S. Tseng, Mining high utility itemsets in big data, in: Proceedings of the Pacific-Asia Conference on Knowledge Discovery and Data Mining, Springer, 2015, pp. 649\u2013661. [20] R. Agrawal, T. Imieli\u00b4nski, A. Swami, Mining association rules between sets of items in large databases, in: ACM SIGMOD Record, Vol. 22, ACM, 1993, pp. 207\u2013216. [21] L. Geng, H. J. Hamilton, Interestingness measures for data mining: a survey, ACM Computing Surveys 38 (3) (2006) 9. [22] E. R. Omiecinski, Alternative interest measures for mining associations in databases, IEEE Transactions on Knowledge and Data Engineering (1) (2003) 57\u201369. [23] C. F. Ahmed, S. K. Tanbeer, B. S. Jeong, H. J. Choi, A framework for mining interesting high utility patterns with a strong frequency affinity,\nInformation Sciences 181 (21) (2011) 4878\u20134894. [24] J. C. W. Lin, W. Gan, P. Fournier-Viger, T. P. Hong, H. C. Chao, FDHUP: fast algorithm for mining discriminative high utility patterns, Knowledge and Information Systems 51 (3) (2017) 873\u2013909. [25] W. Gan, J. C. W. Lin, P. Fournier-Viger, H. C. Chao, H. Fujita, Extracting non-redundant correlated purchase behaviors by utility measure, Knowledge-Based Systems 143 (2018) 30\u201341. [26] S. Kulczy\u00b4nski, Die pflanzenassoziationen der pieninen, Imprimerie de l\u2019Universit\u00b4e, 1928. [27] T. Wu, Y. Chen, J. Han, Re-examination of interestingness measures in pattern mining: a unified framework, Data Mining and Knowledge Discovery 21 (3) (2010) 371\u2013397. [28] H. Yao, H. J. Hamilton, Mining itemset utilities from transaction databases, Data & Knowledge Engineering 59 (3) (2006) 603\u2013626. [29] W. Gan, J. C. W. Lin, P. Fournier-Viger, H. C. Chao, V. S. Tseng, P. S. Yu, A survey of utility-oriented pattern mining, arXiv preprint arXiv:1805.10511. [30] C. W. Lin, T. P. Hong, W. H. Lu, An effective tree structure for mining high utility itemsets, Expert Systems with Applications 38 (6) (2011) 7419\u20137424. [31] J. C. W. Lin, W. Gan, P. Fournier-Viger, T. P. Hong, V. S. Tseng, Efficiently mining uncertain high-utility itemsets, Soft Computing 21 (11) (2017) 2801\u20132820. [32] J. C. W. Lin, W. Gan, T. P. Hong, V. S. Tseng, Efficient algorithms for mining up-to-date high-utility patterns, Advanced Engineering Informatics 29 (3) (2015) 648\u2013661. [33] J. C. W. Lin, W. Gan, T. P. Hong, A fast maintenance algorithm of the discovered high-utility itemsets with transaction deletion, Intelligent Data Analysis 20 (4) (2016) 891\u2013913. [34] T. P. Hong, C. H. Lee, S. L. Wang, Effective utility mining with the measure of average utility, Expert Systems with Applications 38 (7) (2011) 8259\u20138265. [35] J. M. T. Wu, J. C. W. Lin, M. Pirouz, P. Fournier-Viger, TUB-HAUPM: Tighter upper bound for mining high average-utility patterns, IEEE Access 6 (2018) 18655\u201318669. [36] J. C. W. Lin, L. Yang, P. Fournier-Viger, T. P. Hong, M. Voznak, A binary PSO approach to mine high-utility itemsets, Soft Computing 21 (17) (2017) 5103\u20135121. [37] J. M. T. Wu, J. Zhan, J. C. W. Lin, An ACO-based approach to mine high-utility itemsets, Knowledge-Based Systems 116 (2017) 102\u2013113. [38] V. S. Tseng, C. W. Wu, P. Fournier-Viger, P. S. Yu, Efficient algorithms for mining the concise and lossless representation of high utility itemsets, IEEE Transactions on Knowledge and Data Engineering 27 (3) (2015) 726\u2013739. [39] V. S. Tseng, C. W. Wu, P. Fournier-Viger, P. S. Yu, Efficient algorithms for mining top-k high utility itemsets, IEEE Transactions on Knowledge and Data Engineering 28 (1) (2016) 54\u201367. [40] T. Mai, B. Vo, L. T. Nguyen, A lattice-based approach for mining high utility association rules, Information Sciences 399 (2017) 81\u201397. [41] G. C. Lan, T. P. Hong, V. S. Tseng, S. L. Wang, Applying the maximum utility measure in high utility sequential pattern mining, Expert Systems with Applications 41 (11) (2014) 5071\u20135081. [42] Y. F. Lin, C. W. Wu, C. F. Huang, V. S. Tseng, Discovering utility-based episode rules in complex event sequences, Expert Systems with Applications 42 (12) (2015) 5303\u20135314. [43] W. Gan, J. C. W. Lin, P. Fournier-Viger, H. C. Chao, P. S. Yu, HUOPM: High-utility occupancy pattern mining, IEEE transactions on cybernetics. [44] S. Brin, R. Motwani, C. Silverstein, Beyond market baskets: generalizing association rules to correlations, in: ACM SIGMOD Record, Vol. 26, ACM, 1997, pp. 265\u2013276. [45] J. Wu, S. Zhu, H. Liu, G. Xia, Cosine interesting pattern discovery, Information Sciences 184 (1) (2012) 176\u2013195. [46] W. Y. Kim, Y. K. Lee, J. Han, CCMine: efficient mining of confidenceclosed correlated patterns, in: Proceedings of the Pacific-Asia Conference on Knowledge Discovery and Data Mining, Springer, 2004, pp. 569\u2013579. [47] P. Fournier-Viger, J. C. W. Lin, T. Dinh, H. B. Le, Mining correlated high-utility itemsets using the bond measure, in: Proceedings of the International Conference on Hybrid Artificial Intelligence Systems, Springer, 2016, pp. 53\u201365. [48] W. Gan, J. C. W. Lin, P. Fournier-Viger, H. C. Chao, P. S. Yu, Beyond frequency: Utility mining with varied item-specific minimum utility, arXiv\npreprint arXiv:1902.09584. [49] R. Rymon, Search through systematic set enumeration, Proceeding of the 3rd International Conference on Principles of Knowledge Representationand Reasoning (1992) 539\u2013550. [50] W. Gan, J. C. W. Lin, H. C. Chao, S. L. Wang, P. S. Yu, Privacy preserving utility mining: a survey, in: Proceedings of the IEEE International Conference on Big Data, IEEE, 2018, pp. 2617\u20132626.\n",
    "paper_type": "method",
    "attri": {
        "background": "This paper addresses the issue of mining high-utility patterns by incorporating the correlation of items within patterns, highlighting the limitations of previous methods that often neglect this correlation, leading to ineffective pattern discovery.",
        "problem": {
            "definition": "The problem is to discover strongly correlated high-utility itemsets (CoHUIs) from quantitative databases, ensuring that both utility and correlation are considered in the mining process.",
            "key obstacle": "Current high-utility pattern mining algorithms often produce many patterns that contain weakly correlated items, resulting in false positives and ineffective recommendations."
        },
        "idea": {
            "intuition": "The idea stems from recognizing that patterns with high utility may not be valuable if the items within them are not strongly correlated, as this can mislead decision-making in applications like retail.",
            "opinion": "The proposed method, CoUPM, aims to identify patterns that not only have high utility but also exhibit strong positive correlation, enhancing the quality of the discovered patterns.",
            "innovation": "CoUPM innovates by utilizing a revised utility-list structure that incorporates both utility and correlation, along with several pruning strategies to improve efficiency and effectiveness compared to existing algorithms."
        },
        "method": {
            "method name": "Non-redundant Correlated high-Utility Pattern Miner",
            "method abbreviation": "CoUPM",
            "method definition": "CoUPM is designed to discover non-redundant correlated high-utility patterns from quantitative databases by leveraging correlation measures and utility theory.",
            "method description": "The method efficiently identifies high-utility patterns that show strong positive correlation among items, using a revised utility-list structure.",
            "method steps": [
                "Scan the database to calculate transaction-weighted utilization (TWU) and total utility.",
                "Identify 1-itemsets with TWU above a minimum utility threshold.",
                "Construct revised utility-lists for these itemsets.",
                "Perform a depth-first search to discover CoHUIs using pruning strategies."
            ],
            "principle": "The effectiveness of CoUPM lies in its ability to filter out unpromising patterns early in the mining process, ensuring that only the most relevant patterns are considered for correlation and utility."
        },
        "experiments": {
            "evaluation setting": "The experiments were conducted on several real-world and synthetic datasets, including foodmart, chess, mushroom, and T10I4D100K, to evaluate the performance of CoUPM against traditional high-utility pattern mining algorithms.",
            "evaluation method": "Performance was assessed based on the number of discovered patterns, runtime efficiency, and memory consumption, comparing CoUPM with baseline algorithms like FHM and CoHUIM."
        },
        "conclusion": "The experiments demonstrate that CoUPM significantly outperforms existing high-utility pattern mining algorithms in both effectiveness and efficiency, establishing its potential for practical applications in data mining.",
        "discussion": {
            "advantage": "CoUPM provides a more accurate mining of high-utility patterns by considering both utility and correlation, leading to better decision-making in applications like retail.",
            "limitation": "The method may still face challenges in extremely dense datasets where memory consumption can become a concern, although it performs better than projection-based approaches.",
            "future work": "Future research will focus on optimizing the data structures used in CoUPM, exploring dynamic utility mining, and addressing privacy concerns in utility mining."
        },
        "other info": {
            "acknowledgment": "This work was partially supported by the Shenzhen Technical Project under JCYJ 20170307151733005 and KQJSCX 20170726103424709.",
            "keywords": [
                "Economic",
                "utility mining",
                "positive correlation",
                "pruning strategy"
            ]
        }
    },
    "mount_outline": [
        {
            "section number": "2.1",
            "key information": "The problem is to discover strongly correlated high-utility itemsets (CoHUIs) from quantitative databases, ensuring that both utility and correlation are considered in the mining process."
        },
        {
            "section number": "2.3",
            "key information": "CoUPM is designed to discover non-redundant correlated high-utility patterns from quantitative databases by leveraging correlation measures and utility theory."
        },
        {
            "section number": "3.3",
            "key information": "The effectiveness of CoUPM lies in its ability to filter out unpromising patterns early in the mining process, ensuring that only the most relevant patterns are considered for correlation and utility."
        },
        {
            "section number": "5.1",
            "key information": "CoUPM provides a more accurate mining of high-utility patterns by considering both utility and correlation, leading to better decision-making in applications like retail."
        },
        {
            "section number": "6.2",
            "key information": "The proposed method, CoUPM, aims to identify patterns that not only have high utility but also exhibit strong positive correlation, enhancing the quality of the discovered patterns."
        },
        {
            "section number": "8",
            "key information": "The experiments demonstrate that CoUPM significantly outperforms existing high-utility pattern mining algorithms in both effectiveness and efficiency, establishing its potential for practical applications in data mining."
        }
    ],
    "similarity_score": 0.5310007122869886,
    "image": null,
    "path": "/home/dany/codes/autosurvey/outputs/2025-01-11-1142_cogni/papers/Correlated Utility-based Pattern Mining.json"
}