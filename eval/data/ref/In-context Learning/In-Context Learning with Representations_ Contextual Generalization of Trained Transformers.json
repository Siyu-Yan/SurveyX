{
    "from": "arxiv",
    "scholar_id": null,
    "detail_id": "arXiv:2408.10147",
    "title": "In-Context Learning with Representations: Contextual Generalization of Trained Transformers",
    "abstract": "In-context learning (ICL) refers to a remarkable capability of pretrained large language models, which can learn a new task given a few examples during inference. However, theoretical understanding of ICL is largely under-explored, particularly whether transformers can be trained to generalize to unseen examples in a prompt, which will require the model to acquire contextual knowledge of the prompt for generalization. This paper investigates the training dynamics of transformers by gradient descent through the lens of non-linear regression tasks. The contextual generalization here can be attained via learning the template function for each task in-context, where all template functions lie in a linear space with $m$ basis functions. We analyze the training dynamics of one-layer multi-head transformers to in-contextly predict unlabeled inputs given partially labeled prompts, where the labels contain Gaussian noise and the number of examples in each prompt are not sufficient to determine the template. Under mild assumptions, we show that the training loss for a one-layer multi-head transformer converges linearly to a global minimum. Moreover, the transformer effectively learns to perform ridge regression over the basis functions. To our knowledge, this study is the first provable demonstration that transformers can learn contextual (i.e., template) information to generalize to both unseen examples and tasks when prompts contain only a small number of query-answer pairs.",
    "bib_name": "yang2024incontextlearningrepresentationscontextual",
    "md_text": "# In-Context Learning with Representations: Contextual Generalization of Trained Transformers \nTong Yang \u2217 CMU Yu Huang \u2020 UPenn Yingbin Liang \u2021 OSU Yuejie Chi \u00a7 CMU \nSeptember 27, 2024 \n# September 27, 2024 \n# Abstract \nIn-context learning (ICL) refers to a remarkable capability of pretrained large language models, which can learn a new task given a few examples during inference. However, theoretical understanding of ICL is largely under-explored, particularly whether transformers can be trained to generalize to unseen examples in a prompt, which will require the model to acquire contextual knowledge of the prompt for generalization. This paper investigates the training dynamics of transformers by gradient descent through the lens of non-linear regression tasks. The contextual generalization here can be attained via learning the template function for each task in-context, where all template functions lie in a linear space with m basis functions. We analyze the training dynamics of one-layer multi-head transformers to in-contextly predict unlabeled inputs given partially labeled prompts, where the labels contain Gaussian noise and the number of examples in each prompt are not sufficient to determine the template. Under mild assumptions, we show that the training loss for a one-layer multi-head transformer converges linearly to a global minimum. Moreover, the transformer effectively learns to perform ridge regression over the basis functions. To our knowledge, this study is the first provable demonstration that transformers can learn contextual (i.e., template) information to generalize to both unseen examples and tasks when prompts contain only a small number of query-answer pairs. words: transformers, in-context learning, contextual generalization \nKeywords: transformers, in-context learning, contextual generalization \n# Contents \n1 Introduction 1.1 Our contributions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1.2 Related work. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n# 2 Problem Setup \n# 3 Theoretical Analysis \n3 Theoretical Analysis 3.1 Training time convergence. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3.2 Inference time performance. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3.3 Further interpretation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 \n# 4 Experiments \n# 5 Conclusion \n\u2217 Department of Electrical and Computer Engineering, Carnegie Mellon University; email: tongyang@andrew.cmu.edu. \u2020 Department of Statistics and Data Science, Wharton School, University of Pennsylvania; email: yuh42@wharton.upenn.edu. \u2021 Department of Electrical and Computer Engineering, The Ohio State University; email: liang.889@osu.edu. \u00a7 Department of Electrical and Computer Engineering, Carnegie Mellon University; email: yuejiechi@cmu.edu. \n\u2217 Department of Electrical and Computer Engineering, Carnegie Mellon University; email: tongyang@andrew.cmu.edu. \u2020 Department of Statistics and Data Science, Wharton School, University of Pennsylvania; email: yuh42@wharton.upenn.edu. \u2021 Department of Electrical and Computer Engineering, The Ohio State University; email: liang.889@osu.edu. \u00a7 Department of Electrical and Computer Engineering, Carnegie Mellon University; email: yuejiechi@cmu.edu. \n# 12 \nA Proof Preparation A.1 Summary of key notation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . A.2 Auxiliary lemmas. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n# C Proof of Theorem 2 \nn 1. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 \n# 1 Introduction \nTransformers [Vaswani et al., 2017] have achieved tremendous successes in machine learning, particularly in natural language processing, by introducing self-attention mechanisms that enable models to capture long-range dependencies and contextualized representations. In particular, these self-attention mechanisms endow transformers with remarkable in-context learning (ICL) capabilities, allowing them to adapt to new tasks or domains by simply being prompted with a few examples that demonstrate the desired behavior, without any explicit fine-tuning or updating of the model\u2019s parameters [Brown et al., 2020]. A series of papers have empirically studied the underlying mechanisms behind in-context learning in transformer models [Garg et al., 2022, Von Oswald et al., 2023, Wei et al., 2023, Olsson et al., 2022, Xie et al., 2021, Chen and Zou, 2024, Agarwal et al., 2024], which have shown that transformers can predict unseen examples after being prompted on a few examples. The pioneering work of Garg et al. [2022] showed empirically that transformers can be trained from scratch to perform in-context learning of simple function classes, providing a theoretically tractable in-context learning framework. Following this well-established framework, several works have investigated various properties of in-context learning in transformers. For instance, studies have explored generalization and stability [Li et al., 2023], expressive power [Bai et al., 2023, Aky\u00fcrek et al., 2022, Giannou et al., 2023], causal structures [Nichani et al., 2024, Edelman et al., 2024], statistical properties [Xie et al., 2021, Jeon et al., 2024], to name a few. In particular, analysis from an optimization perspective can provide valuable insights into how these models acquire and apply knowledge that enable in-context learning. A few works [Huang et al., 2023, Chen et al., 2024, Li et al., 2024, Nichani et al., 2024] thus studied the training dynamics of shallow transformers with softmax attention in order to in-context learn simple tasks such as linear regression [Huang et al., 2023, Chen et al., 2024], binary classification tasks [Li et al., 2024], and causal graphs [Nichani et al., 2024]. Their theoretical analyses illuminated how transformers, given an arbitrary query token, learn to directly apply the answer corresponding to it from the query-answer pairs that appear in each prompt. Therefore, they all require the sequence length of each prompt to be large enough so that all query-answer pairs have been seen in each prompt with sufficiently high probability, whereas practical prompts are often too short to contain many query examples. This suggests that in-context learning can exploit inherent contextual information of the prompt to generalize to unseen examples, which further raise the following intriguing theoretical question: How do transformers learn contextual information from more general function classes to predict unseen examples given prompts that contain only partial examples? Since our paper studies ICL of non-linear function regression, the function mapping (which we also term \nSince our paper studies ICL of non-linear function regression, the function mapping (which we also term as \u201ctemplate\u201d) naturally serves as the \u201ccontextual information\u201d that can be learned for generalization to unseen examples. When each prompt contains only a small number of (noisy) examples, the template that generates the labels may be underdetermined, i.e., multiple templates could generate the same labels in the prompt. Such an issue of underdetermination further raises a series of intriguing questions, such as: When the template that generates a prompt is underdetermined, what is the transformer\u2019s preference for choosing the template and how good is such a choice? \n# 1.1 Our contributions \nthis paper, we answer the above questions by analyzing the training dynamics of a one-layer transformer th multi-head softmax attention through the lens of non-linear regression tasks. In our setting, the template nction for each task lies in the linear space formed by m nearly-arbitrary basis functions that capture presentation (i.e., features) of data. Our goal is to provide insights on how transformers trained by gradient scent (GD) acquire template information from more general function classes to generalize to unseen amples and tasks when each prompt contains only a small number of query-answer pairs. We summarize r contributions are as follows. \u2022 We first establish the convergence guarantee of a one-layer transformer with multi-head softmax attention trained with gradient descent on general non-linear regression in-context learning tasks. We assume each prompt contains only a few (i.e., partial) examples with their Gaussian noisy labels, which are not sufficient to determine the template. Under mild assumptions, we establish that the training loss of the transformer converges at a linear rate. Moreover, by analyzing the limit point of the transformer parameters, we are able to uncover what information about the basic tasks the transformer extracts and memorizes during training in order to perform in-context prediction. \u2022 We then analyze the transformer\u2019s behavior at inference time after training, and show that the transformer chooses its generating template by performing ridge regression over the basis functions. We also provide the iteration complexity for pretraining the transformer to reach \u03b5-precision with respect to its choice of the template given an arbitrary prompt at inference time. We further compare the choice of the transformer and the best possible choice over the template class and characterize how the sequence length of each prompt influences the inference time performance of the model. \u2022 Under more realistic assumptions, our analysis framework allows us to overcome a handful of assumptions made in previous works such as large prompt length [Huang et al., 2023, Chen et al., 2024, Li et al., 2024, Nichani et al., 2024], orthogonality of data [Huang et al., 2023, Chen et al., 2024, Li et al., 2024, Nichani et al., 2024], restrictive initialization conditions [Chen et al., 2024], special structure of the transformer [Nichani et al., 2024], and mean-field models [Kim and Suzuki, 2024]. Further, the function classes we consider are a generalization of those considered in most theoretical works [Huang et al., 2023, Chen et al., 2024, Li et al., 2024, Wu et al., 2023, Zhang et al., 2023a]. We also highlight the importance of multi-head attention mechanism in this process. To our best knowledge, this is the first work that analyzes how transformers learn contextual (i.e., mplate) information to generalize to unseen examples and tasks when prompts contain only a small number \nIn this paper, we answer the above questions by analyzing the training dynamics of a one-layer transformer with multi-head softmax attention through the lens of non-linear regression tasks. In our setting, the template function for each task lies in the linear space formed by m nearly-arbitrary basis functions that capture representation (i.e., features) of data. Our goal is to provide insights on how transformers trained by gradient descent (GD) acquire template information from more general function classes to generalize to unseen examples and tasks when each prompt contains only a small number of query-answer pairs. We summarize our contributions are as follows. \nReference\nnonlinear\nattention\nmulti\nhead\ntask\nshift\nGD\nconvergence\nnoisy\ndata\nrepresentation\nlearning\nWu et al. [2023]\n\u2717\n\u2717\n\u2713\n\u2713\n\u2713\n\u2717\nZhang et al. [2023a]\n\u2717\n\u2717\n\u2713\n\u2713\n\u2713\n\u2717\nHuang et al. [2023]\n\u2713\n\u2717\n\u2713\n\u2713\n\u2717\n\u2717\nLi et al. [2024]\n\u2713\n\u2717\n\u2713\n\u2713\n\u2713\n\u2717\nChen et al. [2024]\n\u2713\n\u2713\n\u2717\n\u2717\n\u2713\n\u2717\nKim and Suzuki [2024]\n\u2717\n\u2717\n\u2713\n\u2717\n\u2717\n\u2713\nOurs\n\u2713\n\u2713\n\u2713\n\u2713\n\u2713\n\u2713\nTable 1: Comparisons with existing theoretical works that study the learning dynamics of transformers in ICL. Here, the last column refers to the fact that the response in the regression task is generated by a linearly weighted unknown representation (feature) model. \n# 1.2 Related work \nIn-context learning. Recent research has investigated the theoretical underpinnings of transformers\u2019 ICL capabilities from diverse angles. For example, several works focus on explaining the in-context learning of transformers from a Bayesian perspective [Xie et al., 2021, Ahuja et al., 2023, Han et al., 2023, Jiang, 2023, Wang et al., 2023, Wies et al., 2024, Zhang et al., 2023b, Jeon et al., 2024, Hahn and Goyal, 2023]. Li et al. [2023] analyzed the generalization and stability of transformers\u2019 in-context learning. Focusing on the representation theory, Aky\u00fcrek et al. [2022], Bai et al. [2023] studied the expressive power of transformers on the linear regression task. Aky\u00fcrek et al. [2022] showed by construction that transformers can represent GD of ridge regression or the closed-form ridge regression solution. Bai et al. [2023] extended Aky\u00fcrek et al. [2022] and showed that transformers can implement a broad class of standard machine learning algorithms in-context. Dai et al. [2022], Von Oswald et al. [2023] showed transformers could in-context learn to perform GD. More pertinent to our work, Guo et al. [2023] considered an ICL setting very similar to ours, where the label depends on the input through a basis of possibly complex but fixed template functions, composed with a linear function that differs in each prompt. By construction, the optimal ICL algorithm first transforms the inputs by the representation function, and then performs linear ICL on top of the transformed dataset. Guo et al. [2023] showed the existence of transformers that approximately implement such algorithms, whereas our work is from a different perspective, showing that (pre)training the transformer loss by GD will naturally yield a solution with the aforementioned desirable property characterized in Guo et al. [2023]. Training dynamics of transformers performing ICL. A line of work initiated by Garg et al. [2022] aims to understand the ICL ability of transformers from an optimization perspective. [Zhang et al., 2023a, Kim and Suzuki, 2024] analyzed the training dynamics of transformers with linear attention. Huang et al. [2023], Chen et al. [2024], Li et al. [2024] studied the optimization dynamics of one-layer softmax attention transformers performing simple in-context learning tasks, such as linear regression [Huang et al., 2023, Chen et al., 2024] and binary classification [Li et al., 2024]. Among them, Huang et al. [2023] was the first to study the training dynamics of softmax attention, where they gave the convergence results of a one-layer transformer with single-head attention on linear regression tasks, assuming context features come from an orthogonal dictionary and each token in the prompts is drawn from a multinomial distribution. In order to leverage the concentration property inherent to multinomial distributions, they require the sequence length to be much larger than the size of dictionary. Their analysis indicates that the prompt tokens that are the same as the query will have dominating attention weights, which allows the transformer to copy-paste the correct answer from those prompt tokens. Li et al. [2024] studied the training of a one-layer single-head transformer in ICL on binary classification tasks. Same as Huang et al. [2023], they required the data to be pairwise orthogonal, and shared the same copy-paste mechanism as in Huang et al. [2023]. To be precise, a fraction of their context inputs needs to contain the same pattern as the query to guarantee that the total attention weights on contexts matching the query pattern outweigh those on other contexts. Chen et al. [2024] studied the dynamics of gradient flow for training a one-layer multi-head softmax attention model for ICL of multi-task linear regression, where the coefficient matrix has certain spectral properties. They required the sequence length to be sufficiently large [Chen et al., 2024, Assumption 2.1], together with restrictive initialization conditions [Chen et al., 2024, Definition 3.1]. While using the copy-paste analysis framework as in Huang et al. [2023], Li et al. [2024], the attention probability vector in their work is delocalized, so that the attention is spread out to capture the information from similar tokens in regression tasks. Kim and Suzuki [2024] studied the dynamics of Wasserstein gradient flow for training a one-layer transformer with an infinite-dimensional fully-connected layer followed by a linear attention layer for ICL of linear regression, assuming infinite prompt length. Nichani et al. [2024] analyzed the optimization dynamics of a simplified two-layer transformer with gradient descent on in-context learning a latent causal graph. Notation. Boldface small and capital letters denote vectors and matrices, respectively. Sets are denoted with curly capital letters, e.g., W. We let (R d, \u2225\u00b7\u2225) denote the d-dimensional real coordinate space equipped with norm \u2225\u00b7\u2225. I d is the identity matrix of dimension d. The \u2113 p-norm of v is denoted by \u2225 v \u2225 p, where 1 \u2264 p \u2264\u221e, and the spectral norm and the Frobenius norm of a matrix M are denoted by \u2225 M \u2225 2 and \u2225 M \u2225 F, \n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/4929/49296aa3-a94b-4d45-bfe1-abbb8513ba19.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Figure 1: The structure of a one-layer transformer with multi-head softmax attention. </div>\nrespectively. M \u2020 stands for the Moore-Penrose pseudoinverse of matrix M, and M:,i stands for its i-th column vector. We let [N] denote {1, . . . , N}, and denote 1 N to represent the all-one vector of length N, and by 0 a vector or a matrix consisting of all 0\u2019s. We allow the application of functions such as exp (\u00b7) to vectors or matrices, with the understanding that they are applied in an element-wise manner. We use e i to denote the one-hot vector whose i-th entry is 1 and the other entries are all 0. \n# 2 Problem Setup \nIn-context learning with representation. We consider ICL of regression with unknown representation, similar to the setup introduced in Guo et al. [2023]. To begin, let f: R d \u2192 R m be a fixed representation map that f (x) = (f 1 (x), \u00b7 \u00b7 \u00b7, f m (x)) \u22a4 for any x \u2208 R d. The map f can be quite general, which can be regarded as a feature extractor that will be learned by the transformer. We assume that each ICL task corresponds to a map \u03bb \u22a4 f (\u00b7) that lies in the linear span of those m basis functions in f (\u00b7), where \u03bb is generated according to the distribution D \u03bb. Thus, for each ICL instance, the (noisy) label of an input v k (\u2200 k \u2208 [K]) is given as \ny k = \u03bb \u22a4 (f (v k) + \u03f5 k), \u03bb \u223cD \u03bb, \u03f5 k i.i.d. \u223cN (0, \u03c4 I m) \nwhere \u03c4 > 0 is the noise level. The goal of ICL is to form predictions on query x query given in-context labels of the form (1) on a few inputs, known as prompts. In this paper, we use V to denote the dictionary set that contains all K unit-norm distinct tokens, i.e., V: = {v 1, \u00b7 \u00b7 \u00b7, v K} \u2282 R d with each token \u2225 v k \u2225 2 = 1. We assume that each prompt P = P \u03bb provides the first N tokens (with N \u226a K) and their labels, and is embedded in the following matrix \nwhere \nis the collection of prompt tokens, and y: = (y 1, \u00b7 \u00b7 \u00b7, y N) \u22a4 is the prompt label. Given the prompt as the input, the transformer predicts the labels for all the K tokens y 1, \u00b7 \u00b7 \u00b7, y K in the dictionary set. \nTransformer architecture. We adopt a one-layer transformer with multi-head softmax attention [Chen et al., 2024] \u2014 illustrated in Figure 1\u2014 to predict the labels of all the tokens in the dictionary V, where H is the number of heads. Denote the query embedding as \n(1) \n(2) \n(3) \n(4) \nand denote the embedding of both the prompt and the query as E: = (E P, E Q) \u2208 R (d +1) \u00d7 K. We define the output of each transformer head as \n\ufffd \ufffd j e x j. The attention map of the transformer T (E) is defined as where W Q h \u2208 R d e \u00d7 (d +1), W K h \u2208 R d e \u00d7 (d +1), and W V h \u2208 R K \u00d7 (d +1) are the query, key, and value matrices, respectively, and the softmax is applied column-wisely, i.e., given a vector input x, the i-th entry of softmax (x) is given by e x i / \ufffd \n\uf8f8 \uf8ed where W O is the output matrix. Following recent theoretical literature to streamline analysis [Huang et al., 2023, Nichani et al., 2024, Deora et al., 2023, Chen et al., 2024], we assume that the embedding matrices take the following forms: \n\uf8f8 \uf8ed where W O is the output matrix. Following recent theoretical literature to streamline analysis [Huang et al 2023, Nichani et al., 2024, Deora et al., 2023, Chen et al., 2024], we assume that the embedding matrices tak the following forms: \nwhere w h = (w h, 1, \u00b7 \u00b7 \u00b7, w h,K) \u22a4 \u2208 R K and Q h \u2208 R d \u00d7 d are trainable parameters for all h \u2208 [H]. The prediction of the labels is provided by the diagonal entries of T (E), which we denote by \ufffd y = (\ufffd y 1, \u00b7 \u00b7 \u00b7, \ufffd y K) \u2208 R K. Note that \ufffd y k takes the following form under our parameter specification: \n\ufffd Training via GD. Let \u03b8 = {Q h, w h} H h =1 denote all trainable parameters of T. Let \u03f5: = (\u03f5 1, \u00b7 \u00b7 \u00b7, \u03f5 K) \u2208 R m \u00d7 K denote the noise matrix. Given training data over ICL instances, the goal of training is to predict labels y k for all v k \u2208V. Specifically, we train the transformer using gradient descent (GD) by optimizing the following mean-squared population loss: \n\ufffd We apply different learning rates \u03b7 Q, \u03b7 w> 0 for updating {Q h} H h =1 and {w h} H h =1, respectively, i.e., at the th () step, we have \n\u2200 h \u2208 [H] : Q (t) h = Q (t \u2212 1) h \u2212 \u03b7 Q \u2207 Q h L (\u03b8 (t \u2212 1)), w (t) h = w (t \u2212 1) h \u2212 \u03b7 w \u2207 w h L (\u03b8 (t \u2212 1)), \nwhere \u03b8 (t) = {Q (t) h, w (t) h} H h =1 is the parameter at the t-th step. \nInference time. At inference time, given a prompt P = P \u03bb with N examples, where \u03bb may not be in the support of the generation distribution D \u03bb, the transformer applies the pretrained parameters and predicts the labels of all K tokens without further parameter updating. \n# 3 Theoretical Analysis \n# 3.1 Training time convergence \n3.1 Training time convergence \nIn this section, we show that the training loss L converges to its minimum value at a linear rate during training, i.e., the function gap \u2206 (t):= L (\u03b8 (t)) \u2212 inf \u03b8 L \u2192 0, t \u2192\u221e (11 \n(5) \n(6) \n(7a) (7b) \n(8) \n(9) \n(10) \n(11) \nKey assumptions. We first state our technical assumptions. The first assumption is on the distribution D \u03bb for generating the coefficient vector \u03bb of the representation maps. Assumption 1 (Assumption on distribution D \u03bb). We assume that in (1) each entry \u03bb i is drawn independently and satisfies E [\u03bb i] = 0 and E [\u03bb 2 i] = 1 for all i \u2208 [m]. To proceed, we introduce the following notation: Z:= (f (v) \u00b7 \u00b7 \u00b7 f (v)) \u2208 R m \u00d7 N, \u00af Z:= \ufffd Z \u22a4 Z + m\u03c4 I \ufffd 1 / 2 \u2208 R N \u00d7 N, \u00af f:= max \u2225 \u00af z \u2225, (12) \nBefore stating our main theorem, let us examine when the initialization condition in Assumption 2 is met. Fortunately, we only require the following mild assumption on V to ensure our parameter initialization has good properties. \nAssumption 3 (Assumption on V). There exists one row vector x = (x 1, \u00b7 \u00b7 \u00b7, x N) \u22a4 of the prompt toke matrix V (cf. (3)) such that x i \u0338 = x j, \u2200 i \u0338 = j. \nAssumption 3 implies that V has distinct tokens, i.e., v j \u0338 = v k when j \u0338 = k. It is worth noting that Assumption 3 is the only assumption we have on the dictionary V. In comparison, all other theoretical works in Table 1 impose somewhat unrealistic assumptions on V. For example, Huang et al. [2023], Li et al. [2023], Nichani et al. [2024] assume that the tokens are pairwise orthogonal, which is restrictive since it implies that the dictionary size K should be no larger than the token dimension d, whereas in practice it is often the case that K \u226b d [Reid et al., 2024, Touvron et al., 2023]. In addition, Chen et al. [2024], Zhang et al. [2023a], Wu et al. [2023] assume that each token is independently sampled from some Gaussian distribution, which also does not align with practical scenarios where tokens are from a fixed dictionary and there often exist (strong) correlations between different tokens. The following proposition states that when the number of heads exceeds the number of prompts, i.e. H \u2265 N, we can guarantee that Assumption 2 holds with probability 1 by simply initializing {Q h} H h =1 using Gaussian distribution. \n\u226b et al. [2023] assume that each token is independently sampled from some Gaussian distribution, which also does not align with practical scenarios where tokens are from a fixed dictionary and there often exist (strong) correlations between different tokens. The following proposition states that when the number of heads exceeds the number of prompts, i.e. H \u2265 N, we can guarantee that Assumption 2 holds with probability 1 by simply initializing {Q h} H h =1 using Gaussian distribution. Proposition 1 (Initialization of {Q h} H h =1). Suppose Assumptions 1, 3 hold and H \u2265 N. For any fixed \u03b2 > 0, let Q (0) h (i, j) i.i.d. \u223cN (0, \u03b2 2), then Assumption 2 holds almost surely. Proof. See Appendix D.1. \nChoice of learning rates. Define \nwhere \u2206 (0) is the initial function gap (c.f. (11)). Assumption 2 indicates that \u03b6 0> 0. Let \u03b3 be any p constant that satisfies \ufffd \u221a \ufffd \nWe set the learning rates as \n\u03b7 Q \u2264 1 /L and \u03b7 w = \u03b3 2 \u03b7 Q, \n(12) \n(13) \n(14) \n(15) \n(16) \n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd \ufffd Theoretical guarantee. Now we are ready to state our first main result, regarding the training dynamic of the transformer. Theorem 1 (Training time convergence). Suppose Assumptions 1, 2 hold. We let w (0) k = 0 and set the learning rates as in (16). Then we have \n# Proof. See Appendix B. \nProof. See Appendix B. \nTheorem 1, together with Proposition 1, shows that the training loss converges to its minimum value at a linear rate, under mild assumptions of the task coefficients and token dictionary. This gives the first convergence result for transformers with multi-head softmax attention trained using GD to perform ICL tasks (see Table 1). Our convergence guarantee (18) also indicates that the convergence speed decreases as the size K of the dictionary or the number H of attention heads increases, which is intuitive because training with a larger vocabulary size or number of parameters is more challenging. However, a small H will limit the expressive power of the model (see Section 3.3 for detailed discussion), and we require H \u2265 N to guarantee Assumption 2 holds, as stated in Proposition 1. \n# 3.2 Inference time performance \nWe now move to examine the inference time performance, where the coefficient vector \u03bb corresponding to the inference task may not drawn from D \u03bb. In fact, we only assume that the coefficient vector \u03bb at inference time is bounded as in the following assumption. Assumption 4 (Boundedness of \u03bb at inference time). We assume that at inference time \u2225 \u03bb \u2225 2 \u2264 B for some B > 0. For notational simplicity, let Z Q \u2208 R m \u00d7 (K \u2212 N) denote \nWe now move to examine the inference time performance, where the coefficient vector \u03bb corresponding to the inference task may not drawn from D \u03bb. In fact, we only assume that the coefficient vector \u03bb at inference time is bounded as in the following assumption. \nThe following theorem characterizes the performance guarantee of the transformer\u2019s output \ufffd y (after sufficient training) at the inference time. Theorem 2 (Inference time performance). Let \ufffd \u03bb be the solution to the following ridge regression problem: \ufffd \ufffd \ufffd \n\ufffd \ufffd \ufffd \ufffd Under the assumptions in Theorem 1, for any \u03b5 > 0 and \u03b4 \u2208 (0, 1), if the number of training iterates satisfies \nthen given any prompt P that satisfies Assumption 4 at the inference time, with probability at least 1 \u2212 \u03b4, output of the transformer \ufffd y satisfies \nhen given any prompt P that satisfies Assumption 4 at the inference time, with probability at least 1 \u2212 \u03b4, the utput of the transformer \ufffd y satisfies \n(17) \n(18) \n(19) \n(20) \n(21) \n(22) \nIn Theorem 2, (22) shows that after training, the transformer learns to output the given labels of the first N tokens in each prompt, and more importantly, predicts the labels of the rest K \u2212 N tokens by implementing the ridge regression given in (20). Note that Aky\u00fcrek et al. [2022] studied the expressive power of transformers on the linear regression task and showed by construction that transformers can represent the closed-form ridge regression solution. Interestingly, here we show from an optimization perspective that transformers can in fact be trained to do so. \n# Generalization capabilities of the pretrained transformer. Theorem 2 captures two generalization capabilities that the pretrained transformer can have. \ni) Contextual generalization to unseen examples: Theorem 2 suggests that the transformer exploits the inherent contextual information (to be further discussed in Section 3.3) of the function template in the given prompt, and can further use such information to predict the unseen tokens. \ni) Contextual generalization to unseen examples: Theorem 2 suggests that the transformer exploits the inherent contextual information (to be further discussed in Section 3.3) of the function template in the given prompt, and can further use such information to predict the unseen tokens. ii) Generalization to unseen tasks: Theorem 2 also suggests that the pretrained transformer can generalize to a function map corresponding to any \u03bb \u2208 R m at the inference time (albeit satisfying Assumption 4) which is not necessarily sampled from the support of its training distribution D \u03bb. \nii) Generalization to unseen tasks: Theorem 2 also suggests that the pretrained transformer can generaliz to a function map corresponding to any \u03bb \u2208 R m at the inference time (albeit satisfying Assumption 4 which is not necessarily sampled from the support of its training distribution D \u03bb. \nWe note that the contextual generalization that the transformer has here is different in nature from the prediction ability shown in previous works on ICL [Huang et al., 2023, Chen et al., 2024, Li et al., 2024, Nichani et al., 2024]. Those work focuses on a setting where each prompt contains a good portion of tokens similar to the query token, allowing the transformer to directly use the label of the corresponding answers from the prompt as the prediction. However, in practical scenarios, prompts often contain only partial information, and our analysis sheds lights on explaining how transformers generalize to unseen examples by leveraging ridge regression to infer the underlying template. \nHow does the representation dimension affect the performance? Beyond the above discovery, several questions are yet to be explored. For instance, while we demonstrate that transformers can be trained to implement ridge regression, how good is the performance of the ridge regression itself? What is the best choice of ridge regression we could expect? How close is the transformer\u2019s choice to the best possible choice? We address these questions as follows. Given any prompt P at inference time, since there is no label information about the rest K \u2212 N tokens, the best prediction we could hope for from the transformer shall be \n\ufffd where Z Q is defined in (19), and \ufffd \u03bb \u03c4 satisfies: \n\ufffd 2 N \ufffd N i =1 (y i \u2212 \u03bb \u22a4 (f (v i) + \u03f5 i)) 2 \ufffd. \ufffd \u03bb \u03c4:= arg min \u03bb E \u02dc \u03f5 \ufffd 1 \n\ufffd \ufffd \ufffd \ufffd In other words, we hope the transformer outputs the given N labels as they are. For the rest K \u2212 N labels, the best we could hope for is that the transformer estimates the coefficient vector \u03bb by solving the above regression problem to obtain \ufffd \u03bb \u03c4, and predict the k-th label by \ufffd \u03bb \u22a4 \u03c4 f (v k) for k = N + 1, \u00b7 \u00b7 \u00b7, K. Note that (24) is equivalent to the following ridge regression problem (see Lemma 4 in the appendix for its derivation): \n\ufffd \ufffd \ufffd \ufffd The only difference between the two ridge regression problems (20) and (25) is the coefficient of the regularization term. This indicates that at the training time, the transformer learns to implement ridge regression to predict the labels of the rest K \u2212 N tokens, assuming the noise level is given by m N \u03c4. This observation also reflects how the sequence length N affects the transformer\u2019s preference for choosing templates and its performance at inference time: \n(23) \n(24) \n(25) \n\u2022 The closer m is to N, the closer the transformer\u2019s choice of templates is to the best possible choice, and the better the transformer\u2019s prediction will be; \u2022 When N < m, the transformer tends to underfit by choosing a \u03bb with small \u2113 2-norm; \u2022 When N > m, the transformer tends to overfit since it underestimates the noise level and in turn captures noise in the prediction. \n# 3.3 Further interpretation \nWe provide more interpretation on our results, which may lead to useful insights into the ICL ability of the transformer. \nWe provide more interpretation on our results, which may lead to useful insights into t transformer. \nHow does the transformer gain ICL ability with representations? Intuitively speaking, our pretrained transformer gains in-context ability by extracting and memorizing some \u201cinherent information\u201d of all basic function maps f i (i \u2208 [m]) during the training. Such information allows it to infer the coefficient vector \u03bb from the provided labels in each prompt and calculate the inner product \u27e8 \u03bb, f (v k) \u27e9 to compute y k given any token v k \u2208V at inference time. To be more specific, the \u201cinherent information\u201d of all basic tasks could be described by the N-byK matrix A defined as follows (see also (34)): \n\ufffd \ufffd \ufffd \ufffd \ufffd where \ufffd Z: = (f (v 1), \u00b7 \u00b7 \u00b7, f (v K)) = (Z, Z Q) \u2208 R m \u00d7 K. During training, the transformer learns to approximate A:,k by \ufffd H h =1 w h,k softmax (V \u22a4 Q h v k) for each k \u2208 [K]. To further elaborate, we take a closer look at the special case when the labels do not contain any noise, i.e., \u03c4 = 0, and N \u2265 m. In this case, A becomes Z \u2020 \ufffd Z, and given any prompt P = P \u03bb, the coefficient vector \u03bb could be uniquely determined from the provided token-label pairs in the prompt. It is straightforward to verify that the label of each token v k could be represented by the inner product of the given label vector y and the k-th column of Z \u2020 \ufffd Z, i.e., \ufffd \ufffd \n\ufffd \ufffd \ufffd \ufffd Comparing the above equation with (8), it can be seen that in order to gain the in-context ability, th transformer needs to learn an approximation of Z \u2020 \ufffd Z:,k by \ufffd H h =1 w h,k softmax (V \u22a4 Q h v k) for each k \u2208 [K]. More generally, in the proof of Theorem 2, we show that \n\ufffd comparing which with (8) suggests that a small training error implies that \ufffd H h =1 w h,k softmax (V \u22a4 Q h v k) i close to A:,k. In fact, this is the necessary and sufficient condition for the training loss to be small. A rigorou argument is provided in Lemma 5. \nThe necessity and trade-offs of multi-head attention mechanism. Multi-head attention mechanism is essential in our setting. In fact, it is generally impossible to train a shallow transformer with only one attention head to succeed in the ICL task considered in our paper. This is because, as we have discussed above, the key for the transformer is to approximate A:,k by \ufffd H h =1 w h,k softmax (V \u22a4 Q h v k) for each k \u2208 [K]. If H = 1, the transformer could not approximate each A:,k by w 1,k softmax (V \u22a4 Q 1 v k) in general since the entries of the latter vector are either all positive or all negative. In addition, Proposition 1 indicates that when H \u2265 N, the weights of the transformer with a simple initialization method satisfy our desired property that is crucial to guarantee the fast linear convergence. However, (18) implies that we should not set H to be too large, since larger H yields slower convergence rate. \n# 4 Experiments \nThis section aims to provide some empirical validation to our theoretical findings and verify that some of our results could be generalized to deeper transformers. \n(26) \n(27) \n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/3094/309411db-67de-46d2-b04f-51bb9bdedc37.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/b9d8/b9d8dbb1-4068-4001-8c82-f68fdb5a5e77.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">(a) 1-layer transformer </div>\n<div style=\"text-align: center;\">igure 2: Training and inference losses of (a) 1-layer and (b) 4-layer transformers, which validate Theorem 2 s well as the transformer\u2019s contextual generalization to unseen examples and to unseen tasks. </div>\nSetup. We conduct experiments on a synthetic dataset, where we randomly generate each token v k and their representation f (v k) from standard Gaussian distribution. We employ both the 1-layer transformer described in Section 2 and a standard 4-layer transformer in Vaswani et al. [2017] with d model = 256 and d ff = 512. We set the training loss to be the population loss defined in (9), and initialize {Q (0) h} h \u2208 [H] using standard Gaussian and set {w (0) h} h \u2208 [H] to be 0, identical to what is specified in Section 3. We generate \u03bb from standard Gaussian distribution to create the training set with 10000 samples and in-domain test set with 200 samples; we also create an out-of-domain (ood) test set with 200 samples by sampling \u03bb from N (1 m, 4 I m). Given \u03bb, we generate the label y k of token v k using (1), for k \u2208 [K]. We train with a batch size 256. All experiments use the Adam optimizer with a learning rate 1 \u00d7 10 \u2212 4. Training and inference performance. We set N = 30, K = 200, d = 100, m = 20, and set H to be 64 and 8 for 1-layer and 4-layer transformers, respectively. Figure 2 shows the training and inference losses of both 1-layer and 4-layer transformers, where we measure the inference loss by 1 K \u2225 \ufffd y \u2212 \ufffd y \u22c6 \u2225 2 2 to validate (22): after sufficient training, the output of the transformer \ufffd y converges to \ufffd y \u22c6. From Figure 2 we can see that for both 1-layer and 4-layer transformers, the three curves have the same descending trend, despite the inference loss on the ood dataset is higher than that on the in-domain dataset. This experiment also shows the transformer\u2019s contextual generalization to unseen examples and to unseen tasks, validating our claim in Section 3.2. Figure 3 plots the performance gap 1 K \ufffd\ufffd\ufffd y \u22c6 \u2212 \ufffd y best \ufffd\ufffd 2 2 of the one-layer transformer with respect to different N ranging from 50 to 150, when we fix m = 100 and \u03c4 = 0. 01. This verifies that the ridge regression implemented by the pretrained transformer has a better performance when m is close to N, again verifying our claim at the end of Section 2. \nImpact of the number of attention heads. We now turn to examine the impact of the number of attention heads. In this experiment, we use the population loss (9), and set the other configurations same as those in Figure 2. Figure 4 shows the training loss curves for different H with respect the iteration number, which validates our claims. From Figure 4, we can see that we need to set H large enough to guarantee the convergence of the training loss. However, setting H too large (H = 400) leads to instability and divergence of the loss. Recall that in Proposition 1, we require H \u2265 N to guarantee our convergence results hold. Although this condition may not be necessary, Figure 4 shows that when H < N = 30, the loss stopped descending even when it is far from the minimal value. On the other side, the loss keeps descending when H = 30 (though slowly). We also explore how H affects the training of the 4-layer transformer, as displayed in Figure 5, where we set K = 200 and the configurations other than H are the same as in Figure 3. We fix the wall-clock time to \n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/cf11/cf11eab3-2c3f-46ed-b91b-e068422f05eb.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">(b) 4-layer transformer </div>\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/3c34/3c34e07d-069f-4e5c-b4ee-445a50e21382.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Figure 3: The performance gap 1 K \ufffd\ufffd\ufffd y \u22c6 \u2212 \ufffd y best \ufffd\ufffd 2 2 with different N when m = 100, which validates that the closer N is to m, the better the transformer\u2019s prediction is. </div>\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/675e/675ee759-402e-450c-a32f-6ab9f69b99ba.png\" style=\"width: 50%;\"></div>\nFigure 4: Training losses of the 1-layer transformer with different number of attention heads H, where H should be large enough to guarantee the convergence of the training loss, but setting H too large leads t instability and slower divergence. \n<div style=\"text-align: center;\">Figure 4: Training losses of the 1-layer transformer with different number of attention heads H, where H should be large enough to guarantee the convergence of the training loss, but setting H too large leads t instability and slower divergence. </div>\nbe 100 seconds and plot the training loss curves with different H. Figure 5 (a) shows the final training and inference losses with respect to H. It reflects that the losses converge faster with smaller H (here the final training loss is the smallest when H = 4). The training curves in Figure 5 (b) corresponding to different H within 100s may provide some explanation to this phenomenon: (i) transformers with larger H could complete less iterations within a fixed amount of time (the curves corresponding to larger H are shorter); (ii) the training loss curves corresponding to large H (H = 32, 64) descend more slowly. This suggests our claim that larger H may yield slower convergence rate is still valid on deeper transformers. Note that unlike the 1-layer transformer, deeper transformers don\u2019t require a large H to guarantee convergence. This is because deeper transformers have better expressive power even when H is small. \n# 5 Conclusion \nWe analyze the training dynamics of a one-layer transformer with multi-head softmax attention trained by gradient descent to solve complex non-linear regression tasks using partially labeled prompts. In this setting, the labels contain Gaussian noise, and each prompt may include only a few examples, which are insufficient to determine the underlying template. Our work overcomes several restrictive assumptions made in previous studies and proves that the training loss converges linearly to its minimum value. Furthermore, we analyze the transformer\u2019s strategy for addressing the issue of underdetermination during inference and evaluate its performance by comparing it with the best possible strategy. Our study provides the first analysis of how transformers can acquire contextual (template) information to generalize to unseen examples when prompts contain a limited number of query-answer pairs. \n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/a8db/a8dbf470-5ab0-4156-9266-00347f82e467.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">(a) final losses vs H </div>\nFigure 5: Training losses of a 4-layer transformer with different H, fixing wall-clock time to be 100 s. This experiment shows that unlike 1-layer transformers, deeper transformers don\u2019t require H to be large to guarantee convergence of the loss. \n# Acknowledgement \nThe work of T. Yang and Y. Chi is supported in part by the grants NSF CCF-2007911, DMS-2134080 and ONR N00014-19-1-2404. The work of Y. Liang was supported in part by the U.S. National Science Foundation under the grants ECCS-2113860, DMS-2134145 and CNS-2112471. \n# References \nR. Agarwal, A. Singh, L. M. Zhang, B. Bohnet, S. Chan, A. Anand, Z. Abbas, A. Nova, J. D. Co-Reyes, E. Chu, et al. Many-shot in-context learning. arXiv preprint arXiv:2404.11018, 2024. K. Ahuja, M. Panwar, and N. Goyal. In-context learning through the bayesian prism. arXiv preprint arXiv:2306.04891, 2023. E. Aky\u00fcrek, D. Schuurmans, J. Andreas, T. Ma, and D. Zhou. What learning algorithm is in-context learning? investigations with linear models. arXiv preprint arXiv:2211.15661, 2022. Y. Bai, F. Chen, H. Wang, C. Xiong, and S. Mei. Transformers as statisticians: Provable in-context learning with in-context algorithm selection. Advances in neural information processing systems, 36, 2023. T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam, G. Sastry, A. Askell, et al. Language models are few-shot learners. Advances in neural information processing systems, 33:1877\u20131901, 2020. S. Chen, H. Sheen, T. Wang, and Z. Yang. Training dynamics of multi-head softmax attention for in-context learning: Emergence, convergence, and optimality. arXiv preprint arXiv:2402.19442, 2024. X. Chen and D. Zou. What can transformer learn with varying depth? case studies on sequence learning tasks. arXiv preprint arXiv:2404.01601, 2024. D. Dai, Y. Sun, L. Dong, Y. Hao, S. Ma, Z. Sui, and F. Wei. Why can gpt learn in-context? language models implicitly perform gradient descent as meta-optimizers. arXiv preprint arXiv:2212.10559, 2022. P. Deora, R. Ghaderi, H. Taheri, and C. Thrampoulidis. On the optimization and generalization of multi-head attention. arXiv preprint arXiv:2310.12680, 2023. B. L. Edelman, S. Goel, S. Kakade, and C. Zhang. Inductive biases and variable creation in self-attention mechanisms. In International Conference on Machine Learning, pages 5793\u20135831. PMLR, 2022. \nR. Agarwal, A. Singh, L. M. Zhang, B. Bohnet, S. Chan, A. Anand, Z. Abbas, A. Nova, J. D. Co-Reyes, E. Chu, et al. Many-shot in-context learning. arXiv preprint arXiv:2404.11018, 2024. K. Ahuja, M. Panwar, and N. Goyal. In-context learning through the bayesian prism. arXiv preprint arXiv:2306.04891, 2023. E. Aky\u00fcrek, D. Schuurmans, J. Andreas, T. Ma, and D. Zhou. What learning algorithm is in-context learning? investigations with linear models. arXiv preprint arXiv:2211.15661, 2022. Y. Bai, F. Chen, H. Wang, C. Xiong, and S. Mei. Transformers as statisticians: Provable in-context learning with in-context algorithm selection. Advances in neural information processing systems, 36, 2023. T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam, G. Sastry, A. Askell, et al. Language models are few-shot learners. Advances in neural information processing systems, 33:1877\u20131901, 2020. S. Chen, H. Sheen, T. Wang, and Z. Yang. Training dynamics of multi-head softmax attention for in-context learning: Emergence, convergence, and optimality. arXiv preprint arXiv:2402.19442, 2024. X. Chen and D. Zou. What can transformer learn with varying depth? case studies on sequence learning tasks. arXiv preprint arXiv:2404.01601, 2024. D. Dai, Y. Sun, L. Dong, Y. Hao, S. Ma, Z. Sui, and F. Wei. Why can gpt learn in-context? language models implicitly perform gradient descent as meta-optimizers. arXiv preprint arXiv:2212.10559, 2022. P. Deora, R. Ghaderi, H. Taheri, and C. Thrampoulidis. On the optimization and generalization of multi-head attention. arXiv preprint arXiv:2310.12680, 2023. B. L. Edelman, S. Goel, S. Kakade, and C. Zhang. Inductive biases and variable creation in self-attention mechanisms. In International Conference on Machine Learning, pages 5793\u20135831. PMLR, 2022. \n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/24a7/24a76bbf-ffcc-45a5-8a57-6a9c0c821b18.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">(b) training loss curves for different H </div>\nB. L. Edelman, E. Edelman, S. Goel, E. Malach, and N. Tsilivis. The evolution of statistical induction heads: In-context learning markov chains. arXiv preprint arXiv:2402.11004, 2024. S. Garg, D. Tsipras, P. S. Liang, and G. Valiant. What can transformers learn in-context? a case study of simple function classes. Advances in Neural Information Processing Systems, 35:30583\u201330598, 2022. A. Giannou, S. Rajput, J.-y. Sohn, K. Lee, J. D. Lee, and D. Papailiopoulos. Looped transformers as programmable computers. In International Conference on Machine Learning, pages 11398\u201311442. PMLR, 2023. T. Guo, W. Hu, S. Mei, H. Wang, C. Xiong, S. Savarese, and Y. Bai. How do transformers learn in-context beyond simple functions? a case study on learning with representations. arXiv preprint arXiv:2310.10616, 2023. M. Hahn and N. Goyal. A theory of emergent in-context learning as implicit structure induction. arXiv preprint arXiv:2303.07971, 2023. C. Han, Z. Wang, H. Zhao, and H. Ji. In-context learning of large language models explained as kernel regression. arXiv preprint arXiv:2305.12766, 2023. Y. Huang, Y. Cheng, and Y. Liang. In-context convergence of transformers. arXiv preprint arXiv:2310.05249, 2023. H. J. Jeon, J. D. Lee, Q. Lei, and B. Van Roy. An information-theoretic analysis of in-context learning. arXiv preprint arXiv:2401.15530, 2024. H. Jiang. A latent space theory for emergent abilities in large language models. arXiv preprint arXiv:2304.09960, 2023. H. Karimi, J. Nutini, and M. Schmidt. Linear convergence of gradient and proximal-gradient methods under the Polyak-\u0141ojasiewicz condition. In European Conference on Machine Learning and Knowledge Discovery in Databases, pages 795\u2013811, 2016. J. Kim and T. Suzuki. Transformers learn nonlinear features in context: Nonconvex mean-field dynamics on the attention landscape. In Forty-first International Conference on Machine Learning, 2024. B. Laurent and P. Massart. Adaptive estimation of a quadratic functional by model selection. Annals of statistics, pages 1302\u20131338, 2000. H. Li, M. Wang, S. Lu, X. Cui, and P.-Y. Chen. Training nonlinear transformers for efficient in-context learning: A theoretical learning and generalization analysis. arXiv preprint arXiv:2402.15607, 2024. Y. Li, M. E. Ildiz, D. Papailiopoulos, and S. Oymak. Transformers as algorithms: Generalization and stability in in-context learning. In International Conference on Machine Learning, pages 19565\u201319594. PMLR, 2023. Q. N. Nguyen and M. Mondelli. Global convergence of deep networks with one wide layer followed by pyramidal topology. Advances in Neural Information Processing Systems, 33:11961\u201311972, 2020. E. Nichani, A. Damian, and J. D. Lee. How transformers learn causal structure with gradient descent. arXiv preprint arXiv:2402.14735, 2024. C. Olsson, N. Elhage, N. Nanda, N. Joseph, N. DasSarma, T. Henighan, B. Mann, A. Askell, Y. Bai, A. Chen, et al. In-context learning and induction heads. arXiv preprint arXiv:2209.11895, 2022. M. Reid, N. Savinov, D. Teplyashin, D. Lepikhin, T. Lillicrap, J.-b. Alayrac, R. Soricut, A. Lazaridou, O. Firat, J. Schrittwieser, et al. Gemini 1.5: Unlocking multimodal understanding across millions of tokens of context. arXiv preprint arXiv:2403.05530, 2024. H. Touvron, L. Martin, K. Stone, P. Albert, A. Almahairi, Y. Babaei, N. Bashlykov, S. Batra, P. Bhargava, S. Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. arXiv preprint arXiv:2307.09288, 2023. \nA. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, \u0141. Kaiser, and I. Polosukhin. Attention is all you need. Advances in neural information processing systems, 30, 2017. J. Von Oswald, E. Niklasson, E. Randazzo, J. Sacramento, A. Mordvintsev, A. Zhmoginov, and M. Vladymyrov. Transformers learn in-context by gradient descent. In International Conference on Machine Learning, pages 35151\u201335174. PMLR, 2023. X. Wang, W. Zhu, M. Saxon, M. Steyvers, and W. Y. Wang. Large language models are implicitly topic models: Explaining and finding good demonstrations for in-context learning. In Workshop on Efficient Systems for Foundation Models@ ICML2023, 2023. J. Wei, J. Wei, Y. Tay, D. Tran, A. Webson, Y. Lu, X. Chen, H. Liu, D. Huang, D. Zhou, et al. Larger language models do in-context learning differently. arXiv preprint arXiv:2303.03846, 2023. N. Wies, Y. Levine, and A. Shashua. The learnability of in-context learning. Advances in Neural Information Processing Systems, 36, 2024. J. Wu, D. Zou, Z. Chen, V. Braverman, Q. Gu, and P. L. Bartlett. How many pretraining tasks are needed for in-context learning of linear regression? arXiv preprint arXiv:2310.08391, 2023. S. M. Xie, A. Raghunathan, P. Liang, and T. Ma. An explanation of in-context learning as implicit bayesian inference. arXiv preprint arXiv:2111.02080, 2021. R. Zhang, S. Frei, and P. L. Bartlett. Trained transformers learn linear models in-context. arXiv preprint arXiv:2306.09927, 2023a. Y. Zhang, F. Zhang, Z. Yang, and Z. Wang. What and how does in-context learning learn? bayesian model averaging, parameterization, and generalization. arXiv preprint arXiv:2305.19420, 2023b. \n# A Proof Preparation \n<div style=\"text-align: center;\">A.1 Summary of key notation We summarize the frequently used notation in Table 2 for ease of reference </div>\nnotation\nmeaning\nK \u2208N+\ntotal number of tokens\nd \u2208N+\ntoken dimension\nm \u2208N+\nnumber of basic tasks\nH \u2208N+\nnumber of attention heads\nN \u2208N+\nnumber of examples in each prompt\nvk \u2208Rd, k \u2208[K]\nthe k-th token\nfi : Rd \u2192R, i \u2208[m]\nthe i-th basic task\n\u03bb \u2208Rm\ncoefficient vector\nyk = \u03bb\u22a4(f(vk) + \u03f5k), k \u2208[K]\nthe k-th label\nwhere s h jk is defined in (28). \nProof. See Corollary A.7 in Edelman et al. [2022]. We also need to make use of the following form of Young\u2019s inequality. Lemma 3. For any x 1, \u00b7 \u00b7 \u00b7, x l \u2208 R p, we have \n(28) \n(29) \n(30) \n(31) \nLemma 4 (Equivalence of the regression problems). Given any prompt P \u03bb: = (v 1, y 1, \u00b7 \u00b7 \u00b7, v N, y N), the following equivalence: \n\ufffd Proof. See Appendix D.2. \n# B Proof of Theorem 1 \nWe first outline the proof. To prove Theorem 1, we first remove the expectation in the expression of the loss function L in (9) by reformulating it to a deterministic form (see Lemma 5). With this new form, we show by induction that the loss function L is smooth (Lemma 10) and satisfies the Polyak-\u0141ojasiewicz (PL) condition (c.f. (49)). Provided with both smoothness and PL conditions, we are able to give the desired linear convergence rate [Karimi et al., 2016]. We define \ufffd \nWe also define the following matrices: \ufffd \n\ufffd where \ufffd Z:= (z 1, \u00b7 \u00b7 \u00b7, z K) \u2208 R m \u00d7 K. We first reformulate the loss function to remove the expectation in the population loss. Lemma 5 (Reformulation of the loss function). Under Assumption 1, the loss function L (\u03b8) could rewritten into the following equivalent form: \nwhere \n\ufffd \ufffd\ufffd \ufffd \ufffd \ufffd is a constant that does not depend on \u03b8, and \u00af Z is defined in (12). Proof. See Appendix D.3. Lemma 5 indicates that L \u22c6 is a lower bound of L. We\u2019ll later show that L \u22c6 is actually the infimum of L, i.e., L \u22c6 = inf \u03b8 L (\u03b8). Lemma 5 also indicates that, the necessary and sufficient condition for L (\u03b8 (t)) to converge to L \u22c6 during training is \n\ufffd To simplify the analysis, we introduce the following reparameterization to unify the learning rates of all parameters, and we\u2019ll consider the losses after reparameterization in the subsequent proofs. \n(33) \n(34) \n(36) \n(37) \n(38) \nand let \nWe denote \u03b1 as \u03b1:= (\u03b1 h,k) h \u2208 [H],k \u2208 [K] \u2208 R H \u00d7 K. The following lemma bounds the gradient norms by the loss function, which is crucial to the proof o Theorem 1. \ufffd Lemma 7 (Upper bound of the gradient norms). Suppose Assumption 1 holds and | \u03b1 (t) h,k | \u2264 \u03b1. Then for a h \u2208 [H], we have \ufffd\ufffd \ufffd\ufffd \nwhere \n\ufffd \ufffd where the first equality follows from Lemma 5, C k, B k is defined in (13). Let b h k denote the h-th column vector of B k, h \u2208 [H], i.e., B k: = (b 1 k, \u00b7 \u00b7 \u00b7, b H k), then for any k \u2208 [K] and t \u2208 N +, we have \ufffd\ufffd\ufffd (b h k) (t) \u2212 (b h k) (0) \ufffd\ufffd\ufffd 2 \u2264 \ufffd\ufffd \u00af Z \ufffd\ufffd 2 \ufffd\ufffd\ufffd (s h k) (t) \u2212 (s h k) (0) \ufffd\ufffd\ufffd 2 \n\ufffd \ufffd where the first equality follows from Lemma 5, C k, B k is defined in (13). Let b h k denote the h-th column vector of B k, h \u2208 [H], i.e., B k: = (b 1 k, \u00b7 \u00b7 \u00b7, b H k), then for any k \u2208 [K] an t \u2208 N +, we have \n(40) \n(42) \n(44) \n(45) \nwhere the third line uses Lemma 2, and that \n\ufffd where the second inequality follows from Lemma 7 (cf. (42)) and the third inequality follows from the inductive hypothesis and the fact that \u2113 (\u03be (s)) = L (\u03b8 (s)), \u2200 s. Combining (47) with (46), we have \n\ufffd \ufffd\ufffd here the last inequality follows from (15). The above inequality (48) indicates that \u03b6 0 / 2 \u2200 x \u2208 R K: \ufffd\ufffd\ufffd x \u22a4 B (t) k \ufffd\ufffd\ufffd 2 \u2265 \ufffd\ufffd\ufffd x \u22a4 B (0) k \ufffd\ufffd\ufffd 2 \u2212 \ufffd\ufffd\ufffd x \u22a4 (B (t) k \u2212 B (0) k) \ufffd\ufffd\ufffd 2 \u2265 \ufffd \n\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd which gives (43b). Therefore, we obtain the following PL condition: \nwhich gives (43b). \n\ufffd\ufffd \ufffd\ufffd where the equality comes from (45), and the last equality follows from (36). \nStep 2: verify the smoothness of the loss function. We first give the following lemma that bounds the Lipschitzness of b h k and \u03b4 \u03b8 k, which will be used later on. For notation simplicity, we let B, Q, \u03b1 denote B (\u03b8), Q (\u03b8), \u03b1 (\u03b8), respectively, and let B \u2032, Q \u2032, \u03b1 \u2032 denote B (\u03b8 \u2032), Q (\u03b8 \u2032), \u03b1 (\u03b8 \u2032), respectively. Lemma 8 (Lipschitzness of b h k and \u03b4 \u03b8 k). For all k \u2208 [K] and h \u2208 [H], and all transformer parameters \u03b8, \u03b8 \u2032, if max {| \u03b1 h,k |, | \u03b1 \u2032 h,k |} \u2264 \u03b1, then we have \ufffd \ufffd \ufffd \ufffd \n(46) \n(47) \n(48) \n(49) \n(50) \n(50) \n(51) \n\ufffd where we use (46) again to bound the first term in the second line, and use the fact that \ufffd\ufffd s h k (\u03b8 \u2032) \ufffd\ufffd 2 \u2264 1 and Cauchy-Schwarz inequality to bound the second term in the second line. We also need the following lemma which bounds the norm of B k and \u03b4 \u03b8 k. Lemma 9 (Upper bounds of b h k and \u03b4 \u03b8 k). For all k \u2208 [K] and h \u2208 [H], if max {| \u03b1 h,k |, | \u03b1 \u2032 h,k |} \u2264 \u03b1, then we have \n\ufffd\ufffd b h k \ufffd\ufffd 2 \u2264 \ufffd\ufffd \u00af Z \ufffd\ufffd 2, \ufffd\ufffd \u03b4 \u03b8 k \ufffd\ufffd 2 \u2264 \u03b3H\u03b1 + \u2225 A \u2225 2, \n\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd \ufffd \ufffd H \ufffd \ufffd\ufffd \u03b4 \u03b8 k \ufffd\ufffd 2 \u2264 \u03b3 h =1 | \u03b1 h,k | \ufffd\ufffd s h k \ufffd\ufffd 2 + \u2225 Ae k \u2225 2 \u2264 \u03b3H\u03b1 + \u2225 A \u2225 2. \n(52) (53) \n(54) \n(55) \nwhere the first inequality uses Young\u2019s inequality (c.f. Lemma 3). To obtain the smoothness of the loss function w.r.t. Q h, we first note that by (82) we ha \nTherefore, if max {| \u03b1 h,k |, | \u03b1 \u2032 h,k |} \u2264 \u03b1, we have \n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd where the third inequality uses Cauchy-Schwarz inequality. Combining the above inequality (57) Lemma 8 and Lemma 9, we have \n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd ere the third inequality uses Cauchy-Schwarz inequality. Combining the above inequality (57) with mma 8 and Lemma 9, we have \nwhere the last line uses (46) to bound \ufffd\ufffd s h k (\u03b8) \u2212 s h k (\u03b8 \u2032) \ufffd\ufffd 2. The above inequality (58) further gives \n\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd \ufffd where the first inequality makes use of Young\u2019s inequality (c.f. Lemma 3). Combining the above two relations (55) and (59), we obtain the smoothness of \u2113 w.r.t. \u03be as follows: \n(57) \n(58) \n(59) \nLemma 10 (Smoothness of the loss function). Let \u03b3: = \ufffd \u03b7 w /\u03b7 Q. For all transformer parameters \u03be, \u03be \u2032, i max {| \u03b1 h,k |, | \u03b1 \u2032 h,k |} \u2264 \u03b1, then we have \nLemma 10 (Smoothness of the loss function). Let \u03b3: = \ufffd \u03b7 w /\u03b7 Q. For all transformer parameters \u03be, \u03be \u2032, if max {| \u03b1 h,k |, | \u03b1 \u2032 h,k |} \u2264 \u03b1, then we have \u2225\u2207 \u03be \u2113 (\u03be) \u2212\u2207 \u03be \u2113 (\u03be \u2032) \u2225 2 \u2264 L \u2225 \u03be \u2212 \u03be \u2032 \u2225 2, (60) \nwhere \n\ufffd \ufffd Step 3: verify (43a). (45) implies \nwhich, combining with (52), gives \nCombining this with (36) we obtain \nwhich indicates \nTherefore, we have \n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd where the second inequality follows from (62) and the third inequality follows from the induction hypothesis (43c). (43a) follows from plugging \u03c3 defined in (44) into the above inequality and using the initializtion condition that \u03b1 (0) = 1 \u03b3 w (0) = 0. \n(60) \n(61) \n(62) \n(63) \n\ufffd\ufffd \ufffd\ufffd which, combined with the fact that L (\u03b8 (s)) = \u2113 (\u03be (s)) for all s (see Lemma 6), verifies (43c). Note that (36) implies that L \u22c6 \u2264L (\u03b8) holds for all \u03b8. And from (43c) we know that L (\u03b8 (t)) \u2192L t \u2192\u221e. Therefore, it follows that \n\ufffd\ufffd \ufffd\ufffd which, combined with the fact that L (\u03b8 (s)) = \u2113 (\u03be (s)) for all s (see Lemma 6), verifies (43c). Note that (36) implies that L \u22c6 \u2264L (\u03b8) holds for all \u03b8. And from (43c) we know that L (\u03b8 (t)) \u2192L \u22c6 as. Therefore, it follows that \nConsequently, (43c) is equivalent to (18). \n# C Proof of Theorem 2 \nBy (43c) we know that L (\u03b8 (t)) \u2192L \u22c6 as t \u2192\u221e. Thus from (36) we know that (37) and (38) hold. By Sherman-Morrison-Woodbury formula, we have \nThus we have \n\ufffd \ufffd \ufffd\ufffd where Z Q is defined in (19). On the other hand, it\u2019s straightforward to verify that \ufffd \u03bb defined in (20) admits the following clos \nhere Z is defined in (19). On the other hand, it\u2019s straightforward to verify that \ufffd \u03bb defined in (20) admits the following closed form \nOn the other hand, it\u2019s straightforward to verify that \ufffd \u03bb defined in (20) admits the following closed form: \nCombining the above two equations, we obtain \ufffd \ufffd \n\ufffd \ufffd\ufffd \ufffd \ufffd \ufffd \ufffd\ufffd where the last equality follows from (22). Now we give the iteration complexity for the mean-squared error between the prediction \ufffd y and the limit point \ufffd y \u22c6 to be less than \u03b5. Given any prompt P = P \u03bb, where \u03bb satisfies Assumption 4, we have \n\ufffd \ufffd\ufffd \ufffd \ufffd \ufffd \ufffd\ufffd where the last equality follows from (22). Now we give the iteration complexity for the mean-squared error between the prediction \ufffd y and the limit point \ufffd y \u22c6 to be less than \u03b5. Given any prompt P = P \u03bb, where \u03bb satisfies Assumption 4, we have \nLetting x i = y i \u2212 \u03bb \u22a4 z i \u2225 \u03bb \u2225 2 \u221a \u03c4, we have x i \u223cN (0, 1). Define \nZ = 2 \u2212 N\u03c4 \u2225 \u03bb \u2225 2 2. N \ufffd i =1 \u2225 \u03bb \u2225 2 2 \u03c4 (x 2 i \u2212 1) = \ufffd\ufffd y \u2212 Z \u22a4 \u03bb \ufffd\ufffd 2 \n(64) \n(65) \n(66) \n(67) \n\ufffd where we use (68) in the second inequality, and the third inequality follows from Assumption On the other hand, by (36) we have \nwhich gives \n\ufffd \ufffd \ufffd\ufffd\ufffd \ufffd\ufffd Thus we know that w.p. at least 1 \u2212 \u03b4, we have \n2 1 2 K 2 K 2 \u2264 1 2 \u2225 y \u2225 2 2 \u2264 \u03b5, 2 K \u2225 \ufffd y \u2212 \ufffd y \u22c6 \u2225 2 2 = 1 \ufffd\ufffd\ufffd\ufffd A \u2212 A \ufffd\ufffd\ufffd 2 \ufffd\ufffd\ufffd\ufffd \ufffd \ufffd A \u2212 A \ufffd \u22a4 y \ufffd\ufffd\ufffd\ufffd \n\ufffd\ufffd where the last relation follows from (69), (70) and (21). \ufffd\ufffd\ufffd \ufffd \n# D Proof of Key Lemmas \n# D.1 Proof of Proposition 1 \nFor notation simplicity we drop the superscript (0) in the subsequent proof. Let D k:= \ufffd V \u22a4 Q 1 v k, \u00b7 \u00b7 \u00b7, V \u22a4 Q H v k \ufffd \u2208 R N \u00d7 H. Note that \nP (x \u2208C ( \u02dc A) | \u02dc A) d\u00b5 ( \u02dc A)> 0, This suggests the column vectors of D k are i.i.d. and the density of each column vector is positive at any point x \u2208R (V), where R (V) \u2282 R N is the row space of V. Since \u00af Z has full rank, to prove B k has full rank a.s., we only need to argue that C k (:, 1 : N) has full rank w.p. 1. Below we prove this by contradiction (recall that by definition C k = softmax (D k), and we assume H \u2265 N). Suppose w.p. larger than 0, there exists one of C k (:, 1 : N) \u2019s column vector that could be linearly represented by its other N \u2212 1 column vectors. Without loss of generality, we assume this colomn vector is C k (:, 1) = softmax (D k (:, 1)). Let x = x (q 1): = exp (D k (:, 1)) = exp (V \u22a4 q 1). Then x could be linearly represented by exp(D k (:, i)), i = 2, \u00b7 \u00b7 \u00b7, N. Let \u02dc A: = exp (D k (:, 2 : N)), then w.p. larger than 0, x \u2208C (\u02dc A), where C (\u02dc A) is the column vector space of \u02dc A. i.e., we have \ufffd \n(68) \n(69) \n(70) \n(71) \nwhich further indicates that there exists \u02dc A \u2208 R N \u00d7 (N \u2212 1) such that P (x \u2208C (\u02dc A))> 0. Since the dimension o C ( \u02dc A) is at most N \u2212 1, there exists y \u2208 R N, y \u0338 = 0 such that y \u22a5C ( \u02dc A). Therefore, we have \nBy Assumption 3, without loss of generality, we assume that u 1 = (v 11, v 12, \u00b7 \u00b7 \u00b7, v 1 N) \u22a4 has different entries. For any vector w = (w 1, \u00b7 \u00b7 \u00b7, w d) \u22a4 \u2208 R d, we let \u02dc w = (w 2, \u00b7 \u00b7 \u00b7, w d) \u22a4 \u2208 R d \u2212 1 denote the vector formed by deleting the first entry of w. Let q 1 = (q, \u02dc q \u22a4 1) \u22a4. For any fixed \u02dc q 1 \u2208 R d \u2212 1, the function g (\u00b7| \u02dc q 1) : R \u2192 R defined by \n\ufffd \ufffd \ufffd \ufffd has finite zero points and thus {q \u2208 R | g (q | \u02dc q 1) = 0} is a zero-measure set. Therefore, we have \nR d \u2212 1 P (g (q | \u02dc q 1) = 0 | \u02dc q 1) d\u00b5 (\u02dc q 1) = 0, P (\u27e8 y, x \u27e9 = 0) = \ufffd \nwhich contradicts (72). Therefore, C k (:, 1 : N) has full rank with probability 1. \n# D.2 Proof of Lemma 4 \nLemma 4 can be verified by the following direct computation (recall that the noise in each label satisfies \u03f5 i i.i.d \u223cN (0, \u03c4 I m), \u2200 i \u2208 [N]): \nD.3 Proof of Lemma 5 We let \u03f5 P: = (\u03f5 1, \u00b7 \u00b7 \u00b7, \u03f5 N) \u2208 R m \u00d7 N, \u03f5: = (\u03f5 1, \u00b7 \u00b7 \u00b7, \u03f5 K) \u2208 R m \u00d7 K. Recall that y = (y 1, \u00b7 \u00b7 \u00b7, y N) \u22a4 we have y = (Z + \u03f5 P) \u22a4 \u03bb, \nWe let \u03f5 P: = (\u03f5 1, \u00b7 \u00b7 \u00b7, \u03f5 N) \u2208 R m \u00d7 N, \u03f5: = (\u03f5 1, \u00b7 \u00b7 \u00b7, \u03f5 K) \u2208 R m \u00d7 K. Recall that y = (y 1, \u00b7 \u00b7 \u00b7, y N) \u22a4 \u2208 R N. The we have y = (Z + \u03f5 P) \u22a4 \u03bb, (73 \nand \n(72) \n(73) \n(74) \n\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd where \ufffd a k denote the k-th column vector of matrix \ufffd A (\u03b8) defined in (35), and the fifth line uses Assumption 1. Note that for all k \u2208 [K], we have \n\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd where \ufffd a k denote the k-th column vector of matrix \ufffd A (\u03b8) defined in (35), and the fifth line uses Assumption 1. Note that for all k \u2208 [K], we have E \u03f5 (Z \ufffd a k \u2212 z k) \u22a4 (\u03f5 P \ufffd a k \u2212 \u03f5 k) = 0, (76) \nand that \n\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd \ufffd \ufffd \ufffd where 1 {k \u2208 [N]} is the indicator function that equals 1 if k \u2208 [N] and 0 otherwise, and we have made use of the assumption that \u03f5 k i.i.d. \u223cN (0, \u03c4 2 I m). Combining the above two equations with (75), we know that for k \u2208 [N], it holds that \n\ufffd\ufffd\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd \ufffd \ufffd \ufffd \ufffd\ufffd \ufffd\ufffd where c k = \u2212 \ufffd Z \u22a4 z k + m\u03c4 e k \ufffd \u22a4 \ufffd Z \u22a4 Z + m\u03c4 I \ufffd \u2212 1 \ufffd Z \u22a4 z k + m\u03c4 e k \ufffd + \u2225 z k \u2225 2 2 + m\u03c4. By a similar argument, we can show that for k \u2208 [K] \\ [N], it holds thet \n\ufffd\ufffd\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd where c \u2032 k = \u2212 \ufffd Z \u22a4 z k \ufffd \u22a4 \ufffd Z \u22a4 Z + m\u03c4 I \ufffd \u2212 1 \ufffd Z \u22a4 z k \ufffd + \u2225 z k \u2225 2 2. (78), (79) together with (33) and the definition of L \u22c6 give (36). \nD.4 Proof of Lemma 6 First, it holds that \nQ (t) h = Q (t \u2212 1) h \u2212 \u03b7 Q \u2207 Q h \u2113 (\u03be (t \u2212 1)) = Q (t \u2212 1) h \u2212 \u03b7 Q \u2207 Q h \u2113 (\u03be (t \u2212 1)). \nSecond, note that \n\ufffd \ufffd Dividing both sides of the above equality by \u03b3, we have \u03b1 (t) h = \u03b1 (t \u2212 1) h \u2212 \u03b7 Q \u2207 \u03b1 h \u2113 (\u03be (t \u2212 1)). Hence, (41) follows from combining (80) and (81). \n(76) \n(77) \n(78) \n(79) \n(80) \n(81) \nThroughout this proof, we omit the superscript (t) for simplicity. We first compute the gradient of L w.r.t. Q. By (36) we know that \nThroughout this proof, we omit the superscript (t) for simplicity. We first compute the gradient of L w.r.t Q h. By (36) we know that \nThroughout this proof, we omit the superscript (t) for simplicity. We first compute the gradient of L w.r.t. \nNote that \n\ufffd\ufffd\ufffd\ufffd where we use the fact that \ufffd\ufffd (v j \u2212 v i) v \u22a4 k \ufffd\ufffd 2 \u2264 2 (recall that we assume each v k has unit norm, k \u2208 [K Combining (82) and (83), we have the desired result \n\ufffd where \u00af f max is defined in (12) and the third line follows from Cauchy-Schwarz inequality. \n(82) \n(83) \n(84) \n",
    "paper_type": "theory",
    "attri": {
        "background": "In-context learning (ICL) refers to a remarkable capability of pretrained large language models, which can learn a new task given a few examples during inference. However, theoretical understanding of ICL is largely under-explored, particularly whether transformers can be trained to generalize to unseen examples in a prompt, which will require the model to acquire contextual knowledge of the prompt for generalization.",
        "problem": {
            "definition": "The problem focuses on understanding how transformers can learn contextual information from prompts containing only a few examples to generalize to unseen examples and tasks.",
            "key obstacle": "The main challenge is the underdetermination of the template function when prompts contain only a few examples with Gaussian noise, making it difficult to determine the exact template that generates the labels."
        },
        "idea": {
            "intuition": "The idea was inspired by the need to understand how transformers can effectively use contextual information from prompts to generalize.",
            "opinion": "The core opinion is that transformers can learn to perform ridge regression over basis functions, enabling them to generalize from limited examples.",
            "innovation": "The primary improvement compared to previous methods is the establishment of a linear convergence guarantee for training loss and the ability to learn contextual information from a small number of examples."
        },
        "Theory": {
            "perspective": "The theoretical perspective is based on analyzing the training dynamics of transformers through the lens of non-linear regression tasks.",
            "opinion": "The assumption is that transformers can generalize to unseen examples and tasks by learning the underlying template information during training.",
            "proof": "The proof shows that the training loss for a one-layer multi-head transformer converges linearly to a global minimum under mild assumptions."
        },
        "experiments": {
            "evaluation setting": "Experiments were conducted on a synthetic dataset with a one-layer transformer and a four-layer transformer, using 10,000 training samples and a test set of 200 samples.",
            "evaluation method": "The evaluation involved measuring training and inference losses, comparing the performance of the transformer on in-domain and out-of-domain datasets."
        },
        "conclusion": "The conclusion of the experiments is that transformers can acquire contextual information to generalize to unseen examples when prompts contain a limited number of query-answer pairs, validating the theoretical claims made in the paper.",
        "discussion": {
            "advantage": "The advantage of this paper is that it provides a theoretical framework for understanding the training dynamics of transformers in ICL, overcoming several restrictive assumptions of previous works.",
            "limitation": "A limitation is that the analysis relies on certain assumptions about the distribution of the data and the structure of the transformer, which may not hold in all practical scenarios.",
            "future work": "Future work could focus on exploring the implications of relaxing some of the assumptions made and applying the findings to more complex transformer architectures."
        },
        "other info": [
            {
                "info1": "The paper highlights the importance of the multi-head attention mechanism in enabling effective ICL."
            },
            {
                "info2": {
                    "info2.1": "The study is the first provable demonstration that transformers can learn contextual information.",
                    "info2.2": "The research provides insights into how the number of attention heads affects training dynamics."
                }
            }
        ]
    },
    "mount_outline": [
        {
            "section number": "1.1",
            "key information": "In-context learning (ICL) refers to a remarkable capability of pretrained large language models, which can learn a new task given a few examples during inference."
        },
        {
            "section number": "1.2",
            "key information": "The core opinion is that transformers can learn to perform ridge regression over basis functions, enabling them to generalize from limited examples."
        },
        {
            "section number": "3.2",
            "key information": "The theoretical perspective is based on analyzing the training dynamics of transformers through the lens of non-linear regression tasks."
        },
        {
            "section number": "3.4",
            "key information": "The conclusion of the experiments is that transformers can acquire contextual information to generalize to unseen examples when prompts contain a limited number of query-answer pairs."
        },
        {
            "section number": "6.1",
            "key information": "A limitation is that the analysis relies on certain assumptions about the distribution of the data and the structure of the transformer, which may not hold in all practical scenarios."
        },
        {
            "section number": "6.4",
            "key information": "Future work could focus on exploring the implications of relaxing some of the assumptions made and applying the findings to more complex transformer architectures."
        }
    ],
    "similarity_score": 0.7038382018478575,
    "image": null,
    "path": "/home/dany/codes/autosurvey/outputs/2025-01-07-2330_in-co/papers/In-Context Learning with Representations_ Contextual Generalization of Trained Transformers.json"
}