{
    "from": "arxiv",
    "scholar_id": null,
    "detail_id": "arXiv:0806.3912",
    "title": "A Gear-like Predictor-Corrector method for Brownian Dynamics Simulation",
    "abstract": "We introduce a Predictor-Corrector type method suitable for performing many-particle Brownian Dynamics simulations. Since the method goes over to the Gear's method for Molecular Dynamics simulation in the limit of vanishing friction, we refer to it as a Gear-like algorithm. The algorithm has been tested on a one-dimensional, stochastically damped harmonic oscillator model, showing that it can cover a wide range of friction coefficients with a high-order accuracy, excellent stability, and a very small energy drift on the long time scales.",
    "bib_name": "hou2008gearlikepredictorcorrectormethodbrownian",
    "md_text": "# A Gear-like Predictor-Corrector Method for Brownian Dynamics Simulation\nLu-Jing Hou1, 2 and Z. L. Mi\u02c7skovi\u00b4c1\n1Department of Applied Mathematics, University of Waterloo, Waterloo, Ontario, Canada N2L 3G1 2Institut f\u00a8ur Experimentelle und Angewandte Physik, Christian-Albrechts Universit\u00a8at zu Kiel, D-24098 Kiel, Germany (Dated: June 4, 2018; Received; Published)\nAbstract\nWe introduce a Predictor-Corrector type method suitable for performing many-particle Brownian Dynamics simulations. Since the method goes over to the Gear\u2019s method for Molecular Dynamics simulation in the limit of vanishing friction, we refer to it as a Gear-like algorithm. The algorithm has been tested on a one-dimensional, stochastically damped harmonic oscillator model, showing that it can cover a wide range of friction coefficients with a high-order accuracy, excellent stability, and a very small energy drift on the long time scales. PACS numbers: 02.70.-c, 47.57.-s, 52.40.Hf, 52.25.Vy\n# I. INTRODUCTION\nBrownian Dynamics (BD) simulation method [1, 2, 3, 4] has been widely used in studying problems in many dispersed systems, such as polymer solutions [5], colloidal suspensions [6, 7, 8], and, more recently, complex plasmas [9, 10, 11, 12, 13], and has been particularly regarded as the \u201dmainstay\u201d of colloid modeling over the past two decades. BD method may be regarded as a generalization of the usual Molecular Dynamics (MD) method, which is a viewpoint that will be held throughout the present paper. As the MD method is based on Newton\u2019s equations of motion, the BD method is based on their stochastic generalization, namely, the Langevin equation and its integral (or Kramers equation written in Hamilton form),\nHere, as usual, m, v and r are respectively the mass, velocity and the position of a Brownian particle, and F is the systematic (deterministic) force resulting from external sources and/or from the inter-particle interactions in a many-particle system of Brownian particles interacting with the ambient gas of light particles. What is different from Newton\u2019s equations is the appearance of dynamic friction, \u2212\u03b3v, and the stochastic (Brownian) acceleration, A(t). As already pointed out by Langevin, those two terms represent complementary effects of the same microscopic phenomenon: numerous, frequent collisions between the Brownian particle and molecules in the surrounding medium. While friction represents an average effect of those collisions, the stochastic acceleration represents fluctuations due to the discreteness of collisions with the ambient particles, and is represented by a delta-correlated Gaussian white noise. When the system is in thermal equilibrium, the friction and the stochastic acceleration are related to the ambient temperature via fluctuation-dissipation theorem. Note that the friction coefficient \u03b3 is usually regarded as constant [4]. The Langevin equation (1) may be integrated numerically in a manner similar to that used for Newton\u2019s equations in MD simulations [4, 14, 15, 16, 17], and the resulting technique is usually called Brownian Dynamics. However, when compared to the well-established MD techniques, algorithms for conducting BD simulations are considerably less well developed because of their stochastic nature. It should be noted that, besides the term Brownian Dynamics, one finds in literature other names that are used to designate various techniques of numerical integration of\n(1)\nLangevin equation, such as Langevin Dynamics, or Langevin Molecular Dynamics, depending on the background, area of application, or simply preferences of various authors [15]. It is beyond the scope of this paper to discuss all such techniques and subtle differences among them in the derivation of the simulation formulae and/or in their implementations. Therefore, to be specific, we are going to stick to the definitions used by Allen and Tildesley [4], and to the strategies proposed by Ermak et al. et al [1], Allen [2], van Gunsteren and Berendsen [3], which are so far the most popular BD methods used in practice. A straightforward method of conducting the BD simulation based on Eq. (1) was developed by Ermak et al. [1], in which equations of motion are integrated over a time interval t under the assumption that the systematic force F remains approximately constant over that interval. Such method is often referred to as an Euler-like method in the sense that it goes over to the Euler\u2019s scheme of standard MD simulation, in the limit of an infinitesimally small \u03b3. In spite of the low efficiency of Euler\u2019s method in the MD simulation, the Euler-like method in BD simulation seems to be very robust for very large \u03b3, and is still widely used in practice because of its simplicity [5, 7, 8]. However, very small time steps are required in this method to achieve bearable inaccuracy and energy drift, as will be demonstrated below. Ermak\u2019s method can be extended to higher order schemes by keeping higher-order terms in a Taylor series of the deterministic force F or, equivalently in the acceleration a \u2261F/m, as follows\nwhere a(n) represents the nth-order time derivative of a. For example, when integrating Eq. (1), Allen [2, 4] obtained a scheme by effectively keeping up to the second-order derivative in Eq. (2). His method is reduced to the Beeman\u2019s method for MD simulation when \u03b3 \u21920, and is therefore appropriately referred to as a Beeman-like method for BD simulation. We note that this method has a 3rd order accuracy for both the velocity and position, using the definition of Ref. [14] in which the order of an algorithm is given by the highest order of the time step in simulation formulae. An another algorithm for integrating Eq. (1), which also gained popularity in practice, was developed by van Gunsteren and Berendsen [3], by using similar assumption as Allen [2, 4]. Since their algorithm is reduced to the position Verlet algorithm for MD simulation in the limit \u03b3 \u21920, we shall refer to it as Verlet-like method for BD simulation. It was proven [2, 4] that the Verlet-like method is numerically equivalent to the Beeman-like method in position, whereas the latter has higher accuracy in velocity.\n(2)\nOver the years, much effort has been invested in searching for better and higher-order algorithms for BD simulation [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]. For example, similar idea of truncating the Taylor expansion was adopted by Helfand [18], Iniesta and Garcia de la Torre [22], and Honeycutt [24] to obtain second-order Runge-Kutta-like methods, and more recently by Hershkovitz [25] to obtained a fourth-order Runge-Kutta-like method. However, most of those algorithms [18, 22, 24, 25, 26] are based on direct extensions of the deterministic RungeKutta algorithms to include some stochastic terms [24], or on solving the deterministic part of the Langevin equation using standard Runge-Kutta package [25]. Consequently, such approaches require more than one evaluation of the deterministic force per time step, which clearly reduces their efficiency for simulating problems in many-particle systems [4, 14, 15, 16, 17]. More recently, Bra\u00b4nka and Heyes [26] developed a series of algorithms to improve the efficiency of BD simulation based on a finite step-size expansion for stochastic differential equations (SDEs), which may be therefore also classified as second-order Runge-Kutta-like methods. It was found that such algorithms could significantly increase the efficiency of simulation [26]. However, they are mainly designed for simulating over-damped systems, such as colloidal suspensions, as they are based on the so-called position Langevin equation [26], in which the variation of the velocity [i.e., the left-hand-side of the second line in Eq. (1)] is neglected [18]. Such simplification appears to be quite adequate for simulating polymer solutions and colloidal suspensions, which are always over-damped, but may not be suitable for simulating complex plasmas, which are typically only lightly damped [9, 10, 11, 12, 13]. Currently, the most advanced BD algorithms [27, 28, 30] (to the best of our knowledge) are based on operator expansions of time propagators for Fokker-Plank or Kramers equations using Trotter decomposition technique [15, 16, 17, 21, 23, 27, 28, 29, 30, 31, 32]. When \u03b3 \u21920, these methods reduce to the class of so-called symplectic integrators for Hamiltonian dynamics, which have the unique properties of conserving the phase-space volume and being time reversible. These properties result in excellent stability properties and only very small energy drift on the long time scales [16]. However, all such methods [21, 23, 27, 28, 29, 30, 31, 32] also use the standard RungeKutta algorithm to solve the deterministic part of dynamics and they, too, need multiple evaluations of deterministic forces per time step. As a consequence, they can become computationally quite expensive when used in simulation of many-particle systems, which restricts their applicability to systems of limited size, thus justifying further quest for more efficient algorithms of a comparable order.\nOn the other hand, the higher-order Predictor-Corrector (PC) methods, apparently, have not attracted much attention in BD simulation in comparison to their popularity in MD simulation [4, 14]. A PC method for BD was proposed by \u00a8Ottinger in 1996 [5], and was subsequently adopted by H\u00a8utter [6] in a simulation of colloidal suspensions. However, in their method the first step (predictor) was just a first-order Euler-like scheme, which obviously does not utilize the full spectrum of advantages offered by the PC method. Consequently, we propose in the present paper a class of general purpose PC algorithms, which cover a wide range of friction coefficient \u03b3 with higher-order accuracy, excellent stability, and very small energy drift on the long time scales. These methods reduce to Gear\u2019s methods for MD simulation in the limit of \u03b3 \u21920 [4, 14]. We shall discuss here only Gear-like algorithms that go up to the fifth-order, but extensions to higher orders should be quite straightforward, if required. The proposed Gear-like algorithms will be tested on simulation of a simple, one-particle system, and numerical comparisons will be made mainly with the Euler-like and Beeman-like (Verlet-like) methods because all these methods are based on a Taylor expansion of the deterministic force, Eq. (2), and they all require only one force evaluation per time step. As such, all these methods are specifically designed for simulations of large many-particle systems. Further discussion of advantages of the proposed algorithms over those involving higher-order Runge-Kutta-like methods [21, 23, 27, 28, 30] will be provided latter in the text. The paper is organized as follows. In Sec. II, we give detailed algorithms for conducting BD simulation. We next perform in Sec. III numerical tests for different methods (Euler-, Beemanand Gear-like) by using a stochastically damped harmonic oscillator (SDHO) model [33, 34]. Discussions of possible derivatives of the proposed BD method, as well as comparisons with the high-order Runge-Kutta-like methods are given in Sec. IV, which is followed by a brief conclusion in Sec. V.\n# II. ALGORITHMS FOR BD SIMULATION\n# A. General formula\nThere are various ways to derive formulae for conducting BD simulation starting from Langevin equation Eq. (1). We shall follow here the strategy adopted in Refs. [1, 2, 3, 4], and more recently in Refs. [34, 35], because it is simple and straightforward, especially for readers\nwith some background in simulation but lacking background in SDEs. Following the technique of integrating the Langevin equation which is elaborated in Ref. [34], one realizes that Eq. (1) can be integrated exactly over a short time, based on certain assumptions about the deterministic acceleration a(t), thus giving updating formulae for BD simulation. The resulting formulae emphasize the fact that, under the assumptions that the stochastic acceleration in Eq. (1) is a Gaussian white noise and that \u03b3 is constant, the two dynamic variables, v(t) and r(t), are actually normally distributed random variables themselves [or Gaussian random variables (GRVs)]. Consequently, according to the Normal linear transform theorem [34, 35], v(t) and r(t) are completely determined by their instantaneous means (vectors) and variances (scalars), and can be expressed, respectively, as follows\nv(t) = mean{v(t)} + \ufffd var{v(t)} Nv(0, 1) r(t) = mean{r(t)} + \ufffd var{r(t)} Nr(0, 1).\n\ufffd Here, N(0, 1) is a short-hand notation for a random vector [N = {Nx, Ny, Nz} in threedimensions (3D) or N = {Nx, Ny} in two-dimensions (2D)], whose components are mutually independent, standard (or unit) normal distributions (i.e., having the mean 0 and variance 1). The subscripts v and r in Eq. (3) emphasize that the two random normal vectors are associated with the velocity and position, respectively, and that they are different but correlated, as will be shown below. In the following, for the sake of simplicity, we shall occasionally denote the means by angular brackets, \u27e8v\u27e9and \u27e8r\u27e9, and use standard deviations \u03c3v = \ufffd var{v} and \u03c3r = \ufffd var{r}, instead of variances. We emphasize the significance of Eq. (3) because it provides the general updating formula for BD simulation. Namely, with Eq. (3), the process of solving the stochastic differential equation Eq. (1) and obtaining the two random variables v(t) and r(t) becomes simply a matter of determining the two sets of deterministic quantities: the means and the variances of v(t) and r(t), as well as the covariance between v(t) and r(t). Most importantly, the variances and covariances can be shown to be independent of the form of deterministic acceleration a(t). For variances, we find [1, 2, 4, 34, 35]:\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/97e5/97e5f12b-8df7-4c91-b52a-c83b335e10b5.png\" style=\"width: 50%;\"></div>\n(3)\n(4)\nwhere kB is the Boltzmann constant and T the temperature of the surrounding medium. In passing, we note that, when a Brownian particle is in equilibrium with the medium, T also defines its kinetic temperature. However, a Brownian particle may have a kinetic temperature different from T, which opens the possibility of simulating non-equilibrium processes by using BD, such as particle stopping in a medium [11]. Further, the only non-zero covariances are cov{vx, x} = cov{vy, y} = cov{vz, z} \u2261cov{v, r}, and are given by (note, cov{v, r} \u2261\u27e8vr\u27e9\u2212\u27e8v\u27e9\u27e8r\u27e9) [34, 35]:\nr(t) = \u27e8r\u27e9+ b1N1(0, 1) + b2N2(0, 1), v(t) = \u27e8v\u27e9+ \u03c3vN1(0, 1),\nwith b1 = cov{v, r}/\u03c3v and b2 = \ufffd \u03c32 r \u2212b2 1, where the unit normals N1(0, 1) and N2(0, 1) are now, by design, statistically (component-wise) independent of each other, and may be generated, e.g., by the Box-Muller method [36] on a computer. It is worthwhile pointing out that the updating formulae Eq. (6) can be interpreted as a two-step algorithm: first, one calculates the means of the velocity and the position at time t and, second, one adds random increments of the velocity and position. Similar idea may also be seen in the Fokker-Planck based methods, e.g., in Ref. [28]. This notion is very important in the sense that the first step is no more than evaluation of deterministic Newton\u2019s equations with the addition of an average friction force, so that, in principle, any algorithm suitable for MD simulation (for example, Verlet, Beeman and even multi-step PC algorithms [4, 14]) may be used here. Moreover, with the second step being essentially independent of the first step, it can be always completed at the end of the time step as a correction to the previous step. More importantly, in the above two steps, the inaccuracy, or error, enters only in the first step through assumptions made regarding the deterministic acceleration a(t) [14], whereas in the second step, random increments of the velocity and position are added with the weights obtained from Eqs. (4,5), which are exact and independent of the assumptions employed in the first step. Now, the only problem that remains is to determine the means of v(t) and r(t), which are closely dependent on the assumptions made about a(t), and which result in different simulation methods. We provide details for the Gear-like methods in the following.\n(5)\n(6)\nGiven the form of a(t), defined by the manner of how is the Taylor series in Eq. (2) truncated, \u27e8v\u27e9and \u27e8r\u27e9can be obtained in a number of ways by integrating Eq. (1). For simplicity, we follow here Lemons\u2019 methodology [34, 35], in which Eq. (1) is reduced to a set of deterministic (ordinary) differential equations by taking the statistical averages of both sides, giving\nwhere the fact that the Brownian acceleration A(t) is a Gaussian white noise with the mean 0 was used. It is also important to note that the second equation in (7) may be further simplified by letting \u27e8v\u27e9= e\u2212\u03b3t\u27e8v\u27e9\u2032, so that\n\u27e8r\u27e9= r0 + c1v0t + c2a0t2 + c3 \u02d9a0t3 + c4\u00a8a0t4 + \u00b7 \u00b7 \u00b7 + cna(n\u22122) 0 tn + \u00b7 \u00b7 \u00b7 , \u27e8v\u27e9= c0v0 + c1a0t + c2 \u02d9a0t2 + c3\u00a8a0t3 + c4...a 0t4 + \u00b7 \u00b7 \u00b7 + cna(n\u22121) 0 tn + \u00b7 \u00b7 \u00b7 .\nIt is interesting to note that the coefficients in Eq. (9) obey very simple recursive relations. For n = 0, we have c0 = exp (\u2212\u03b3t), while for n \u22651, we find\nAs expected, these coefficients reduce to those of a standard Taylor series when \u03b3 \u21920. To construct the Gear-like method for BD simulation, one also needs higher order derivatives of the velocity (or position) [37]. In principle, that may be attempted directly, by taking successively time derivatives on both sides of the second equation in Eq. (7), but that approach turns out to be\n(7)\n(8)\n(9)\n(10)\nEq. (11), together with Eq. (7), constitutes a Taylor-like series which can be used directly to construct the Gear-like PC method, as follows. In a direct analogy with simulations in deterministic systems, the Gear-like PC methods for BD simulation also include three stages, namely, predicting, force evaluating, and correcting [4, 14, 37]. The difference is that, one has to add random displacements of the velocity and position by using Eq. (6) at the end of a time step to complete the BD simulation. The basic procedure goes as follows. Predicting: In this stage, one has:\nwhere the superscript P is to indicate that these are quantities in the predicting stage. (For simplicity, we have dropped derivatives of a(t) higher than the third order, but extensions to higher orders are quite straightforward.) One may notice in Eq. (12) that we have used in Eq. (9) the means of the position and velocity instead of using Taylor series of the position and velocity, as is normally done in the Gear method for MD simulation [4, 14]. Other than that, the remaining parts of this stage (derivatives of the force) are essentially the same as those in the MD simulation. Force evaluating: In this stage, the predicted position rP(t) is used to obtain a new force, that is, new acceleration a(t), and a difference between the predicted acceleration aP(t) and the new\n(11)\nacceleration a(t) is formed:\n\ufffd \ufffd It can be seen that this step is exactly the same as in MD simulation [4, 14]. Correcting: In this stage, the above difference term is used to correct all predicted positions and their \u201dderivatives\u201d, as follows:\nwith\n<div style=\"text-align: center;\">and the coefficients given in the following table:</div>\n\u03b1i\n3th-order\n4th-order\n5th-order\n\u03b10\n1\n6\n19\n120\n3\n16\n\u03b11\n5\n6\n3\n4\n251\n360\n\u03b12\n1\n1\n1\n\u03b13\n1\n3\n1\n2\n11\n18\n\u03b14\n0\n1\n12\n1\n6\n\u03b15\n0\n0\n1\n60\nThis table is simply a reproduction of those in Refs. [4, 14, 37], and is provided here for completeness. By using parameters in different columns, one may realize 3rd-, 4th-, and 5th-order (or 4-, 5- and 6-value) [4, 14] Gear-like algorithms for BD simulation. Note that the first two lines in Eq. (14) are slightly different from those in MD simulation, in order to restore the damping effect on deterministic acceleration, and to keep the consistency with the corresponding terms in Eq. (9) [or the first two lines in Eq. (12) ].\n(13)\n(14)\n(15)\nAdding random displacements: The above three stages are the same as those of Gear\u2019s algorithm for MD simulation. However, to complete the BD simulation, we have to use the updating formulae Eq. (6) to add random displacements of the velocity and position. It should be noted that now the corrected values rC and vC should be used in the places of \u27e8r\u27e9and \u27e8v\u27e9in Eq. (6), respectively. Also note that, to implement the simulation, one needs the initial conditions, r0, v0, a0, \u02d9a0, \u00a8a0 and ...a0, at t = 0. This poses a problem for the very first several steps of simulation, because \u02d9a0, \u00a8a0 and ...a 0 are undefined. The simplest way to get around this issue is to set all of them to be zero at the very first step, whereas their values will be updated during subsequent iterations. A better way would be to start the simulation by using a Runge-Kutta procedure for the first few steps [14]. However, neither of these solutions of the problem will have any effect on the results in real, many-particle simulations. The above are the basic procedures for the Gear-like PC method for BD simulation. It should be restated that these formulae and the simulation stages are quite similar to those in the Gear method for MD simulation of Newton\u2019s equations [4, 14], except for the expressions for the velocity and position in Eq. (12) and Eq. (14), and for the addition of random displacement at the end of every time step. When \u03b3 \u21920, the Gear-like method goes over to the Gear method for MD simulation. In the following we shall show that the performance of the proposed Gear-like method also shares many features with its counterpart in MD simulations.\n# III. TESTING THE ALGORITHM\nIn this section, we present some simple computational examples as testing cases for our Gearlike algorithm, and for the previously designed Euler-like and Beeman-like (Verlet-like) algorithms. For simplicity, we shall occasionally denote the Euler-like, Beeman-like, Verlet-like and Gear-like methods by EL, BL, VL, and GL, respectively. We employ the model of a one-dimensional (1D) SDHO [33, 34], in which Eq. (1) may be simplified to\nd dtv = \u2212\u03b3v \u2212\u03c92 0r + A(t), d dtr = v.\n(16)\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/6e56/6e56bd2d-e284-4a50-bfc4-306c1b659d4b.png\" style=\"width: 50%;\"></div>\nFIG. 1: (Color online) Deviations in the position, velocity and energy from their respective exact solutions within the first 100 time units. The left column is for \u03b3 = 0.01 and the right one for \u03b3 = 0.1. Here, GL-3, GL-4 and GL-5 denote the 3rd-, 4th-, and 5th-order Gear-like methods, respectively. The time step is fixed at 0.01. The (red) dashed lines, (blue) solid lines, and (black) solid lines show the deviations of energy, velocity and position, respectively. Note that the energy deviation is defined relative to the exact values by E(t)/Ee(t) \u22121. According to our discussion above, especially following Eq. (6), the task of a BD simulation is simply to predict the position r(t) and velocity v(t) of a Brownian particle at time t, given the set of initial conditions at time 0. As previously pointed out, r(t) and v(t) are normally distributed random vectors, whose variances and covariances are exact (at the level of Langevin equation), whereas their means are calculated numerically according to certain approximation schemes, such as EL, BL, VL or GL methods. From this point of view, the errors come only from evaluation of the means. In other words, the accuracy in calculating the means will decide the main performance of a BD simulation, so we begin our tests by considering the means.\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/29aa/29aadce5-8592-41ea-bbbe-4107fa24f0f6.png\" style=\"width: 50%;\"></div>\nFIG. 2: (Color online) Amplitudes of time-dependent deviations (or the largest deviations) in the position and velocity within 1000 time units for different methods. Here, EL and BL denote the Euler-like and Beeman-like methods, respectively. \u03b3 = 0.01 and the time step of 0.05 are used in these tests. As usual [4, 14], we firstly carry out simulations over certain periods and record, as a measure of accuracy, the deviations of r and v from their exact solutions without the inclusion of random displacements. We shall also judge the behavior of simulations by monitoring the quantity E(t) = v2(t) + \u03c92 0r2(t), (17) which is proportional to the total energy of the Brownian particle. Note that, because of the existence of damping, this energy is no longer a conserved quantity, but rather decreases exponentially with the factor exp(\u22122\u03b3t). This may be seen from the exact solutions for the mean position and velocity listed in the Appendix C. In order to judge the energy conservation performance of numerical methods, we normalize E(t) by its exact counterpart Ee(t), which is simply obtained from Eq. (17) by substituting the exact values for the position and velocity. The resultant ratio E(t)/Ee(t) should be a conserved quantity with the expected value of unity.\n(17)\nWithout loss of generality, in all ensuing simulations we set kBT = 1, m = 1 and \u03c90 = \u221a 2/2, and choose the initial conditions to be r0 = 1 and v0 = 0. These parameters are also used in the exact results based on Appendix A. The results of simulations for deviations in the position, velocity and energy from their exact solutions) are shown in Fig. 1 for the 3rd-, 4th-, and 5th-order Gear-like methods (denoted as GL3, GL-4 and GL-5, respectively) within the first 100 time units. Note that the period of the damped oscillator is approximately 8.9 for both \u03b3 = 0.01 and \u03b3 = 0.1, and that the highest amplitude of velocity is approximately \u221a 2/2. The oscillatory patterns of the deviations in position and velocity resemble approximately those of the exact solutions, but with much smaller amplitudes. The patterns of the energy deviations have a higher frequency (doubled) and seldom oscillate around 0; rather, their oscillating centers drift in an approximately linear manner (in a semi-logarithmic plot). The slope of this line is usually defined as the energy drift, which is the main criterion testing the energy conservation in an algorithm [4, 14]. Of course, one would expect the slope to be as small as possible. Another criterion for the energy conservation is the amplitude of oscillations in the energy deviation, which is called the noise of the energy drift. Needless to say, the noise should be small, too, in accurate simulations. It is interesting to notice that some of the slopes in Fig. 1 are negative, indicating that the energy is damped. This is quite different from the usual situation in the MD simulation where damping is absent by definition, and where the slopes of energy drift are always found positive. This, and other aspects of energy drift will be further discussed below. The amplitudes of the time-dependent deviations in position and velocity are shown in Fig. 2 for an extended time period of 1000 time units. One can easily see large differences in the amplitudes among different methods, with the patterns of the Euler-like and Beeman-like (Verlet-like) methods looking similar to those of the Gear-like method, but exhibiting orders of magnitude larger amplitudes than the Gear-like method. This is to be expected as, generally, all Gear-like methods have much better accuracy than Euler-like and Beeman-like (Verlet-like) methods. It should be furthermore pointed out that, except for deviations of the Euler-like method, which grow monotonously, all other deviations pass through broad maxima around the time of 200 time units. This indicates that the Euler-like method is not stable, while the others are. This illustrates yet another aspect in which BD algorithms differ from those of MD simulation, where the deviations invariably grow with time [4]. Namely, it is obvious that the finite damping \u03b3 actually stabilizes numerical algorithms (except for the Euler-like method). This is not surprising at all, because previous studies [15, 17, 38] have demonstrated a possibility of stabilizing the MD\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/b10d/b10d2d37-3da0-4224-a319-f1ac55bfaf65.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">FIG. 3: (Color online) The largest deviation in the position from exact solution vs. the time step size in th first 20 time units, for different methods and different \u03b3s.</div>\nsimulation by introducing a small, but finite damping. A similar idea is also well-known in the computational fluid dynamics where, for example, a small artificial viscosity is often introduced in fluid simulations to stabilize the computation [39]. Next, we make some comparisons involving different time steps, as that is always the key issue in both the MD and BD simulations. Fig. 3 shows the largest deviations (defined by the largest deviation in the first 20 units) in position versus the size \u03b4t of the time step for different methods and different friction coefficients \u03b3. This figure is plotted in a double logarithmic scale, and the curves are nearly straight lines. The slope of these lines is called the apparent order [14], illustrating the dependence of error on the time step size. Namely, if the error is found to be proportional to \u03b4tp, then the exponent p is the apparent order. It is found that for very small \u03b3, for example \u03b3 = 0.01, as shown in Fig. 3(a), the apparent orders are pEL \u22481, pBL \u22482, pGL\u22123 \u22483.5, pGL\u22124 \u22484.2 and pGL\u22125 \u22484.6, respectively for the Euler-like, Beeman-like, 3rd-, 4th-, and 5thorder Gear-like methods. These values are very close to those from the MD simulations where\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/f936/f93648ba-e89b-4010-a103-e7c3b6f5ca4f.png\" style=\"width: 50%;\"></div>\ndamping is absent [14]. When \u03b3 increases, the absolute value of the error for Euler-like and Beeman-like methods decreases, while pEL and pBL remain almost unchanged. On the other hand, pGL\u22123, pGL\u22124 and pGL\u22125 slightly decrease with increasing \u03b3. For example, for \u03b3 = 1, as shown in Fig. 3(c), Gear-like methods have the worst performance in accuracy: the apparent orders become now pGL\u22123 \u22483.1, pGL\u22124 \u22483.9 and pGL\u22125 \u22484.0), but the amplitudes of their errors are still much smaller than those of the Beeman-like and Euler-like methods. We further provide a more detailed analysis of the energy conservation performances. We have already discussed the energy drift and noise for Gear-like methods in Fig. 1. In particular, negative energy drifts were noticed there for the 4th- and 5th-order Gear-like methods. However, this is not the case for all time step sizes, as illustrated in Fig. 4, showing the energy drifts in the 4thand 5th-order methods for different time step-sizes. We see that, when the step-size increases, the energy drift for GL-4 becomes increasingly positive, while that of GL-5 grows increasingly\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/ebfa/ebfa16e1-db15-4c38-964e-e6b87c7ac252.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">FIG. 5: (Color online) Energy drift in one period of oscillation vs. the time step size for different method and for \u03b3 = 0.01 and 0.1.</div>\nnegative, until a very large time step is used (e.g., \u03b4t = 0.6, not shown in the figure). On the other hand, the noise in the energy drift is always seen to increase with \u03b4t. However, for GL-3, the trends in the energy drift are seen in Fig. 1 to be quite different, especially for smaller \u03b3. Namely, the oscillations in the energy deviation seem rather symmetrical about zero, with the amplitude of the noise being at least two orders of magnitude larger than the drift, as can be seen in the top left panel of Fig. 1. It is found that the Beeman-like method exhibits similar behavior as GL-3, which makes it very hard to do the least-squares fitting and linear regression analysis [14]. On the other hand, for large \u03b3, e.g. \u03b3 > 1, the whole energy of the system is practically damped to zero in a few time units, so that it does not make much sense to discuss the energy drift in such cases. Therefore, in the following we shall omit the energy drift analysis for the BL and GL-3 methods altogether, as well as for other methods in the cases of large \u03b3. Figure 5 shows the energy drift over one period of oscillations versus the time step size [14] for\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/1cd1/1cd1e87e-2427-4c6e-9d21-2535ddbf3b0d.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">FIG. 6: (Color online) Noise in the energy drift (defined by the average amplitude of oscillations in the firs 100 time units) vs. the time step size, for different methods and for \u03b3 = 0.01 and 0.1.</div>\n100 time units) vs. the time step size, for different methods and for \u03b3 = 0.01 and 0.1. the EL, GL-4 and GL-5 methods with two different friction coefficients \u03b3. Similarly, Fig. 6 shows the noise in the energy deviation (defined by the averaged amplitudes of oscillations in the first 100 time units) versus the time step size, for these same methods with the same friction coefficients \u03b3. Since those figures are also plotted in a double logarithmic scale, we see that both the energy drift and the noise increase almost linearly with the time step size, and that the slopes of these curves are very close to the corresponding apparent orders, shown in Fig. 3. Moreover, the energy drifts for \u03b3 = 0.1 in the GL-4 and GL-5 methods seem worse off than the corresponding drifts for \u03b3 = 0.01, but the magnitudes of the energy drift and noise are still very small. In the above, we have discussed the short-time performances of various BD methods in terms of accuracy and energy drift, without considering random displacements in the position and velocity. In the following, we perform several long-time tests including the random terms, in order to test the statistical properties of the simulation results.\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/5a04/5a04f018-b0a9-42a0-96c5-d2598343be03.png\" style=\"width: 50%;\"></div>\nFIG. 7: (Color online) Solid lines show the exact probability distribution functions (PDFs) for velocity and position given by Eq. (A2), while symbols (circles and dots) show the statistics of 80, 000 samples taken from 800, 000 time units of simulation using the G-5 method. (Note that the PDFs have been scaled up, and their peaks are now unity.) Lower panels show the deviations of PDFs obtained in simulations from the exact ones, for the BL, GL-3, GL-4, and GL-5 methods. \u03b3 = 0.01 and \u03b4t = 0.1 are used in these simulations. In the long time limit, the oscillator approaches thermal equilibrium with its environment, so that both its velocity and position should become normally distributed. This may be easily seen from their exact solutions, Eq. (A1), or more clearly from their long time limits, Eq. (A2), which are plotted in Fig. 7, along with the statistical ensembles obtained from the simulation data. In this figure, solid lines show the probability distribution functions (PDFs) of the velocity and position given by Eq. (A2), whereas symbols (circles and dots) show ensembles of 80, 000 sample points taken from 800, 000 time units of simulation. (Note that the first 2000 time units are used to allow the oscillator to reach an equilibrium, so that data from this period are not included in the ensembles shown in Fig. 7). The dashed lines display deviations between the simulation data and the exact PDFs. We used \u03b3 = 0.01 and \u03b4t = 0.1 in simulations, allowing us to compare the results from the BL, GL-3, GL-4 and GL-5 methods, whereas the EL method is ruled out because it is not stable under these conditions. Since there are essentially no visible differences in the distribution\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/2ef3/2ef38285-e924-41aa-8859-3eac1682fd3a.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">0 2 4 Normalized velocity and position \u22124 \u22122 0</div>\n<div style=\"text-align: center;\">\u22124 \u22122 0 2 4 Normalized velocity and position \u22124 \u22122 0 2</div>\nstep sizes and damping coefficients. Note that the PDFs have been scaled up, and their peaks are now unity, as is shown in Fig. 7. functions generated by these four methods, we only show the PDF from the GL-5 method as an example, but display all deviations. We see that the deviations of all GL methods lie approximately within the range of (\u22123%, 3%), which is the statistical error for 80, 000 samples according to our experience. [We use the Box-Muller method to take 80, 000 samples, with the PDF given by Eq. (A2), and compare the resultant PDF with the exact PDF. This gives a deviation in the range of (\u22123%, 3%).] The deviation from the BL method, as shown in the figure, is a bit larger: within the range of (\u22124%, 4%). With a smaller time step \u03b4t and/or larger \u03b3, all the above methods (EL, GL-3, GL-4, and GL-5) exhibit basically the same performance in the long time limit, and all their deviations are well within the range of the statistical error. Generally, a larger \u03b3 would allow a larger time step \u03b4t to be used for the same accuracy in the long time limit, and this is true for all methods including the EL method. For example, this method requires typically \u03b3 > 1, along with the step size of about \u03b4t = 0.1, enabling it to produce deviations in the PDF comparable to the other methods, as is shown in Fig. 8.\n# IV. DISCUSSION\n# A. Possible simplification\nWe have provided detailed derivation of a class of Gear-like PC methods for performing BD simulation, and we tested them by using the SDHO model. In particular, we have compared\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/1500/15009966-4e43-4dc6-8dc7-cf0f3d4fc610.png\" style=\"width: 50%;\"></div>\nthe performances of different BD methods, namely, the Euler-like, Beeman-like (Verlet-like) and Gear-like methods, and discussed several similarities and differences between the BD and MD simulations. However, it may be sometimes computationally too demanding to implement a full BD simulation scheme, so we discuss briefly here some possible derivatives of the BD method. One possible simplification that might be made to the above BD simulation procedure is to neglect the correlation between the velocity and position, i.e., to neglect their covariance. This may be done by simply setting b1 = 0 in Eq. (6), as many researchers actually do in their simulations. Therefore, we have also performed simulations without the covariance, and the results turned out essentially the same as those taking full account of the covariance. Physically, it is not easy to see why such a simplification should work at all. In fact, Fig. 9, showing the correlation coefficient b1/\u03c3r versus the time step size for different \u03b3, implies that the correlation between the velocity and position is not negligible at all. Therefore, it seems that monitoring the accuracy, energy conservation, and statistical properties of the ensembles of data from numerical results is not sufficient to fully evaluate performance of an algorithm. Further simulations with many-particle systems are currently being carried out to test if this simplification would affect any other physical\nquantities of such systems. Yet another possible simplification to the above procedure is to apply a finite difference scheme for the deterministic force directly to Langevin equation (1), and numerically solve the resultant formulae like in MD simulation, but with the inclusion of corrections from the Langevin terms at the end of each time step. It can be proved that this simplification is equivalent to using linear approximations to the coefficients cn in the Taylor-like series of Eq. (9), for example, by letting\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/edc5/edc587f2-82af-4a44-a4e1-fdd8882b8afb.png\" style=\"width: 50%;\"></div>\nClearly, when \u03b3t \u226a1, the above expressions would provide very good approximations to their real values given by Eq. (9). However, even if \u03b3t = 0.01, the use of this approximation would produce an error of magnitude around 10\u22124, which is still much larger than the accuracy that the Gear-like methods can achieve.\n# B. Comparison with High-order Runge-Kutta-like methods\nWe provide here a brief discussion of the strengths and weaknesses of our algorithm in comparison with some of the most recent developments in the area of high-order algorithms for BD simulation, emphasizing that they typically involve Runge-Kutta methods [25, 27, 28], One should note that the algorithms based on decomposition of the exponential operator for time propagation provide superior stability of simulation, especially in the limit of low damping, owing to their unique properties of conserving the phase-space volume and being time reversible when simulating Hamiltonian dynamics problems. However, according to Bussi and Parrinello [31], while such algorithms are derived with the aim of producing accurate trajectories up to a given order, they usually break down when a high damping is applied, which is the situation where time reversibility is irrelevant. Moreover, the design of such algorithms is not focused on the correctness of the ensemble generated in simulation [31], which may become a serious shortcoming when simulating, e.g., equilibrium structure of a many-particle system interacting\nwith a bath. On the other hand, our method has demonstrated excellent performance in the long time limit, where equilibrium distribution functions were reproduced within the statistical error, both for the present single-particle model system, and for the many-particle applications in dusty plasmas [11, 13]. An additional advantage of the methods based on the time propagator with Fokker-Planck operator lies in the fact that various decomposition techniques make analysis quite transparent and allow for systematic strategies in developing higher-order schemes, the highest so far being the fourth-order numerical integrators developed by Drozdov and Brey [27], and by Forbert and Chin [28]. However, it is precisely the decomposition of the exponentiated Fokker-Planck operator that seems to hinder further extensions to orders higher than fourth because of excessive growth in the complexity of such techniques with increasing order. On the other hand, simplicity of our algorithm makes extensions to orders higher than fifth quite straightforward, therefore offering an attractive pay-off for their lack of transparency. As mentioned in the Introduction, the most serious limitation of algorithms involving highorder Runge-Kutta-like methods, such as [25, 27, 28], may arise when systems with large numbers of Brownian particles are simulated, where the need for force evaluations including all interparticle interactions becomes the most critical issue in any simulation. For example, the method of Hershkovitz [25], when used in a 1D simulation, requires four evaluations of force, four GRVs, and one evaluation of the force derivative per time step. Moreover, the method of Drozdov and Brey [27], and the K4a method of Forbert and Chin [28] require three evaluations of force, one of the force derivative, and four GRVs for the former method while the latter method requires even eight GRVs. The K4b and K4c methods of Forbert and Chin [28] require eight force evaluations and three GRVs per step. Yet the accuracy of these methods goes only up to the fourth order, whereas our method achieves easily the fifth-order accuracy with only one force evaluation and three GRVs per time step, which presents its greatest advantage for many-particle simulations. It should be mentioned, however, that the main weakness of our algorithm lies in the fact that it can handle only simple models of particle interactions with a bath, characterized with constant friction (diffusion) coefficients and with fluctuations driven by the Gaussian white noise. On the other hand, the methods based on the time propagator decomposition techniques [27, 28] are capable of solving rather general SDEs, e.g., multivariable Langevin equation with configurationdependent diffusion coefficients, or Kramers equation with colored noise.\nIn summary, a Gear-Like Predictor-Corrector algorithm was proposed for BD simulation. It has been tested by using a 1D stochastically-damped-harmonic-oscillator model in terms of its accuracy, energy conservation, and the long-time statistical properties, and the results were compared with those obtained by using the Euler-like and Beeman-like (Verlet-like) methods. It was found that the present method exhibits much better performance in all the above tests. At the same time, when compared to the recent high-order Runge-Kutta-like methods [25, 27, 28], our algorithm promises superior efficiency for simulations in many-particle systems with constant friction (diffusion) coefficient and with Gaussian white noise, as only one force evaluation is needed per time step. We note that our Gear-like algorithm has already been used successfully for simulations of both equilibrium and nonequilibrium phenomena in strongly-coupled dusty plasmas, involving up to \u223c104 interacting dust particles [11, 12]. More simulations with many-particle Yukawa systems are being carried out to further test the performance of our method, and the results will be reported elsewhere [13].\n# Acknowledgments\nThis work was supported by NSERC and PREA. L.J.H. is now at Christian-Albrechts Universit\u00a8at zu Kiel, and he gratefully acknowledges supports from Alexander von Humboldt Foundation and from Prof. Alexander Piel.\n# APPENDIX A: STOCHASTIC DAMPED HARMONIC OSCILLATOR\nThe problem of a stochastic damped harmonic oscillator was first worked out in detail by Chandrasekhar in 1943 [33]. We provide here the list of his final results to facilitate the discussion in the main text.\nwhere \u03c91 = \ufffd \u03b32 \u22124\u03c92 0. It should be noted that the above equations apply only when \u03b3 \u22652\u03c90, i.e., in the over-damped case, while in the weakly-damped case, i.e., when \u03b3 < 2\u03c90, one needs to simply redefine \u03c91 as \u03c91 = \ufffd 4\u03c92 0 \u2212\u03b32, and replace cosh and sinh with cos and sin, respectively.\n(A1)\n",
    "paper_type": "method",
    "attri": {
        "background": "This paper addresses the issue of improving the accuracy and stability of Brownian Dynamics (BD) simulations, which have been less developed compared to Molecular Dynamics (MD) methods. Existing BD algorithms often require multiple evaluations of deterministic forces per time step, making them inefficient for many-particle systems. The proposed Gear-like method aims to overcome these limitations by providing a higher-order, efficient algorithm suitable for a wide range of friction coefficients.",
        "problem": {
            "definition": "The primary problem is the inadequacy of existing Brownian Dynamics algorithms, which are less efficient and stable compared to Molecular Dynamics methods, particularly for many-particle systems.",
            "key obstacle": "The main challenge is that existing BD methods require multiple force evaluations per time step, which limits their applicability to larger systems and reduces computational efficiency."
        },
        "idea": {
            "intuition": "The idea stems from recognizing the potential of higher-order Predictor-Corrector (PC) methods, which have been underutilized in the context of BD simulations, despite their success in MD simulations.",
            "opinion": "The proposed Gear-like algorithm introduces a new class of PC methods that leverage the strengths of existing approaches while addressing their weaknesses, particularly in terms of accuracy and efficiency.",
            "innovation": "The key innovation is that the proposed method achieves higher-order accuracy while requiring only a single evaluation of the deterministic force per time step, making it more suitable for many-particle simulations."
        },
        "method": {
            "method name": "Gear-like Predictor-Corrector method",
            "method abbreviation": "GL-PC",
            "method definition": "A higher-order Predictor-Corrector algorithm designed for Brownian Dynamics simulations that efficiently integrates the Langevin equation with improved stability and accuracy.",
            "method description": "The method involves predicting, force evaluating, and correcting the positions and velocities of Brownian particles, incorporating random displacements to account for stochastic effects.",
            "method steps": [
                "Predict the position and velocity using current estimates.",
                "Evaluate the new force based on the predicted position.",
                "Correct the predicted values using the difference between predicted and evaluated forces."
            ],
            "principle": "The effectiveness of the Gear-like method lies in its ability to accurately model the dynamics of Brownian particles under varying friction coefficients while maintaining computational efficiency through a single force evaluation."
        },
        "experiments": {
            "evaluation setting": "The method was tested on a one-dimensional stochastically damped harmonic oscillator model, comparing its performance with Euler-like and Beeman-like methods across various friction coefficients.",
            "evaluation method": "Performance was assessed by measuring deviations in position, velocity, and energy conservation over time, as well as by analyzing the statistical properties of the simulation results."
        },
        "conclusion": "The Gear-like method demonstrated superior accuracy and stability in BD simulations compared to traditional methods, effectively conserving energy and producing results consistent with theoretical predictions over long time scales.",
        "discussion": {
            "advantage": "The proposed method achieves higher-order accuracy and stability while requiring only one evaluation of the deterministic force per time step, making it particularly advantageous for simulations of large many-particle systems.",
            "limitation": "The method is limited to simple models characterized by constant friction coefficients and Gaussian white noise, which may restrict its applicability to more complex systems.",
            "future work": "Future research will focus on extending the method to handle more complex interactions and exploring its performance in various many-particle systems, including Yukawa systems."
        },
        "other info": {
            "acknowledgments": "This work was supported by NSERC and PREA. L.J.H. acknowledges support from the Alexander von Humboldt Foundation.",
            "additional notes": {
                "note1": "The proposed method has already been successfully applied in simulations involving up to 10,000 interacting dust particles in dusty plasmas.",
                "note2": "Further simulations are planned to test the performance of the Gear-like method in different physical scenarios."
            }
        }
    },
    "mount_outline": [
        {
            "section number": "1.1",
            "key information": "The proposed Gear-like method aims to improve the accuracy and stability of Brownian Dynamics simulations, which are less developed compared to Molecular Dynamics methods."
        },
        {
            "section number": "1.2",
            "key information": "This paper addresses the inadequacy of existing Brownian Dynamics algorithms and highlights the importance of efficient algorithms in the context of many-particle systems."
        },
        {
            "section number": "2.1",
            "key information": "The paper discusses the significance of Brownian Dynamics in simulating particle systems, contrasting it with Molecular Dynamics methods."
        },
        {
            "section number": "2.2",
            "key information": "The Gear-like method is defined as a higher-order Predictor-Corrector algorithm designed for Brownian Dynamics simulations, integrating the Langevin equation with improved stability and accuracy."
        },
        {
            "section number": "3.1",
            "key information": "The method involves predicting, force evaluating, and correcting the positions and velocities of Brownian particles, incorporating random displacements to account for stochastic effects."
        },
        {
            "section number": "3.2",
            "key information": "The Gear-like method achieves higher-order accuracy while requiring only a single evaluation of the deterministic force per time step, making it efficient for many-particle simulations."
        },
        {
            "section number": "3.3",
            "key information": "The main challenge identified is that existing BD methods require multiple force evaluations per time step, limiting their applicability to larger systems."
        },
        {
            "section number": "4.3",
            "key information": "The proposed method has been successfully applied in simulations involving up to 10,000 interacting dust particles in dusty plasmas."
        },
        {
            "section number": "8.4",
            "key information": "Future research will focus on extending the Gear-like method to handle more complex interactions and exploring its performance in various many-particle systems."
        }
    ],
    "similarity_score": 0.551794515941626,
    "image": null,
    "path": "/home/dany/codes/autosurvey/outputs/2025-01-11-0858_fine-/papers/A Gear-like Predictor-Corrector method for Brownian Dynamics Simulation.json"
}