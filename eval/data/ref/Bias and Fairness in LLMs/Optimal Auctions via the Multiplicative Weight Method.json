{
    "from": "arxiv",
    "scholar_id": null,
    "detail_id": "arXiv:1211.1699",
    "title": "Optimal Auctions via the Multiplicative Weight Method",
    "abstract": "We show that the multiplicative weight update method provides a simple recipe for designing and analyzing optimal Bayesian Incentive Compatible (BIC) auctions, and reduces the time complexity of the problem to pseudo-polynomial in parameters that depend on single agent instead of depending on the size of the joint type space. We use this framework to design computationally efficient optimal auctions that satisfy ex-post Individual Rationality in the presence of constraints such as (hard, private) budgets and envy-freeness. We also design optimal auctions when buyers and a seller\u2019s utility functions are non-linear. Scenarios with such functions include (a) auctions with \u201cquitting rights\u201d, (b) cost to borrow money beyond budget, (c) a seller\u2019s and buyers\u2019 risk aversion. Finally, we show how our framework also yields optimal auctions for variety of auction settings considered in [20, 2, 11, 12, 13], albeit with pseudo-polynomial running times.",
    "bib_name": "bhalgat2013optimalauctionsmultiplicativeweight",
    "md_text": "# Optimal Auctions via the Multiplicative Weight Method\nMay 4, 2018\n# Abstract\nWe show that the multiplicative weight update method provides a simple recipe for designing and analyzing optimal Bayesian Incentive Compatible (BIC) auctions, and reduces the time complexity of the problem to pseudo-polynomial in parameters that depend on single agent instead of depending on the size of the joint type space. We use this framework to design computationally efficient optimal auctions that satisfy ex-post Individual Rationality in the presence of constraints such as (hard, private) budgets and envy-freeness. We also design optimal auctions when buyers and a seller\u2019s utility functions are non-linear. Scenarios with such functions include (a) auctions with \u201cquitting rights\u201d, (b) cost to borrow money beyond budget, (c) a seller\u2019s and buyers\u2019 risk aversion. Finally, we show how our framework also yields optimal auctions for variety of auction settings considered in [20, 2, 11, 12, 13], albeit with pseudo-polynomial running times.\narXiv:1211.1699v3\n# 1 Introduction\nIn this paper, we present a simple framework for designing Bayesian Incentive Compatible (BIC) auctions. This model of auction design was pioneered by Myerson [28]. There is a common prior over the private valuations of all buyers, and the mechanism has to enforce incentive compatibility in expectation over the revealed types of other buyers (where these types are assumed to be drawn from the prior), and the randomness introduced by the mechanism. The optimal BIC auction design problem is purely computational - in most cases, it is possible to design an optimal mechanism in time polynomial in the support of the joint type space of the priors of all buyers. As the support can be exponential in the number of buyers, the question arises: Can we design optimal auctions whose computational complexity is polynomial in the number of buyers, items, and parameters that only depend on individual buyers? This was first posed as a computational problem in [19]. Though this question was answered in the affirmative in economic literature [28, 9] for simple settings such as multi-unit auctions, it remained largely open in more general settings. An impressive sequence of recent papers [25, 20, 2, 11, 12, 13] answer this question in the affirmative under a wide variety of allocation constraints, with both single and multi-dimensional types for each buyer. These algorithms are based on reducing the revenue maximization problem to a convex\n\u2217University of Pennsylvania. Supported in part by NSF grant IIS-0904314. Email: bhalgat@seas.upenn.edu. \u2020Microsoft Research Search Labs. Email: sreenivas.gollapudi@microsoft.com. \u2021Duke University. Supported by an Alfred P. Sloan Research Fellowship, a gift from Cisco, and by NSF via grants CCF-0745761, CCF-1008065, and IIS-0964560. Part of this work was done while the author was visiting Twitter, Inc. Email: kamesh@cs.duke.edu.\nKamesh Munagala\u2021\ncombination over analogous welfare maximization problems on the same allocation constraints via convex programming techniques, hence reducing an exponential time computation over the joint type space to polynomial time in the type space of a single buyer.\nOur Contributions In this paper, we show that the classical multiplicative weight update method [33, 31, 3] yields a simple framework for designing optimal auctions along with an elementary analysis. This framework, presented in Section 5, is based on writing an explicit program connecting ex-interim variables to ex-post variables (allocations, payments, utilities, etc). It then reduces the revenue maximization problem to single-bidder optimization problems using the dual (Lagrangian) variables in the explicit program, hence reducing the running time to depend only on single-buyer input parameters. Its key advantages stem from the nature of the problem formulation that explicitly encodes the optimal mechanism\u2019s action in each realization:\n# \u2022 It is extremely simple to state and generalize.\n\u2022 In contrast with previous techniques, we do not have to argue about feasibility of ex-interim solutions or explicitly convert them to ex-post allocations. The technique is \u201cone-shot\u201d yield ing the mechanism directly from the dual variables.\n\u2022 The ellipsoid based techniques developed in the previous work are sensitive to the geometry of the feasible ex-interim allocation region defined by the separation oracle; when this region is not convex, such as when the welfare maximization problem can only be solved approximately [13], the optimization becomes complex. In contrast, the multiplicative weight update based techniques do not face any such hurdle (as long as the oracle subproblem can be solved) and yield a relatively simple approach to design mechanisms in such conditions (see Appendix A.1).\nOur approach can be used to derive recent results (mentioned above) on optimal auction design with multi-dimensional type spaces and allocation constraints [20, 2, 11, 12, 13] (see Appendix A.1), albeit with running times that are pseudo-polynomial in single-bidder parameters (instead of fully polynomial). This is however not the main focus of the paper. We focus on designing optimal mechanisms for several new settings where the only known previous results were approximation algorithms. Though previous techniques can be adapted to solve these variants, we illustrate how our technique provides a direct approach to such auction design problems. The settings we consider involve designing mechanisms for the following scenarios:\n\u2022 Auctions with hard payment constraints such as budgets;\n\u2022 Making the BIC mechanism and utility model more robust to the common prior assumption by enforcing individual rationality ex-post (in presence of hard payment constraints), and\n\u2022 Non-linear utility functions for seller and buyers, which includes scenarios such as risk averse seller and/or buyers, buyers with quitting rights, and cost to borrow money beyond budget.\nWe discuss these aspects briefly next, before presenting our results. Ex-post Rationality and Payment Constraints: A criticism of Bayesian Incentive Compatibilit (BIC) is that it is not robust to the common prior assumption on all buyers; in particular, if  buyer is agnostic to this prior information, the allocations and payments may make no sense to him\nSee for instance [5, 27] for a discussion of this aspect, as well as the discussion implicit in [20]. One simple constraint to make the mechanism more robust is to ensure that the voluntary participation (or individual rationality (IR)) constraint always holds: Given a buyer\u2019s revealed type, its allocation and payment in any outcome of the mechanism yield it non-negative utility for that revealed type. This is a very intuitive constraint, since a buyer will participate even when he has no knowledge of the prior. In several settings, a BIC mechanism can indeed be converted into one where this constraint holds as well. A notable exception to this happens when there are payment constraints on the buyers. We consider BIC mechanism design in settings where there are general ex-post constraints not only on allocations, but also on the payments buyers make. The most important example is constraints on payments made by individuals, i.e., budget constraints; another example is fairness constraints on allocations and payments across buyers, such as the popular envy-freeness constraint. The presence of these ex-post payment constraints reduces the participation risk from an individual buyer\u2019s perspective and encourages their participation. Consider for instance the case where buyers have (possibly private) hard budget constraints. There is a fairly long line of work [16, 17, 26, 9, 30] in economics literature on optimal BIC auctions with either public or private budget constraints. It was realized early on that budgets make the problem significantly harder even when they are publicly known. One crucial difference is that in the presence of payment constraints, a BIC mechanism can be implemented as an all-pay mechanism where buyers submit payment with bids (regardless of final allocations); this is ex-interim IR, but cannot be converted to a mechanism that is ex-post IR. As far as we are aware, the design of optimal auctions with ex-post IR constraints has not been considered in literature before. Non-linear Utilities: In many auction design problems, the buyer\u2019s utility is not linear in his allotment or payment. Consider, for example, auctions with quitting rights for buyers [18]. Unlike the traditional BIC model where the allocations and payments are binding ex-post (so that the utility is linear in each scenario and only quasi-linear in expectation), in the quitting rights model, a buyer can decide to not participate (or quit) ex-post, so that the utility is quasi-linear in each outcome of the mechanism, and hence non-linear. The presence of quitting rights is important for a mechanism, as in variety of settings, the outcome cannot be legally enforced on buyers and it remains a buyer\u2019s choice to accept the outcome ex-post. We also consider a setting where a buyer incurs an arbitrary monotone cost to arrange for payments beyond his budget [22]; this includes scenarios where a buyer can take a loan for additional payment, but he incurs an extra cost for the loan set up and the interest. Lastly, we consider riskaversion of buyers and the seller [23]. Again, previous techniques do not address such constraints. Informal Problem Statements and Our Results We present efficient algorithms for optimal BIC auctions that satisfy ex-post IR in the presence of constraints on both payment and allocation in fairly general settings. We also design the optimal auctions in many models where buyers have non-linear utility over allocation and payment. We assume the buyer\u2019s type is discrete, and there are n buyers and m items. The running time we obtain are polynomial in the n, m, 1 \u01eb, and the size of the type space of each buyer. It also depends polynomially on the ratio of largest to smallest valuations, and the ratio largest to smallest marginal prior probabilities for a single buyer. \u2022 Multi-unit auction with arbitrary valuations (Section 4): There are m homogeneous items.\nrameterized by his type. Each buyer can also have a hard (possibly private) budget constrai and we seek ex-post IR mechanisms.\n\u2022 Non-linear utility functions (Sec. 6): We consider the multi-unit auction setting when the private utility of a buyer is an arbitrary function of allocation and payment, which is parametrized by a discrete type. As special cases, we consider the quitting rights model [18] described above, as well as the setting where an agent can borrow money at a cost [22]. Finally, we allow the seller to have utilities on payments received [23, 6]. Our setting allows positive transfers, and do not need individual rationality as a constraint for optimality (both of which can raise more utility for a risk-averse seller).\ndo not need individual rationality as a constraint for optimality (both of which can raise more utility for a risk-averse seller). \u2022 Multi-item auctions (Appendix A): There are m divisible items (for instance, ad categories in an adword auction). Each buyer\u2019s type is multi-dimensional but additive across items. Given any vector of revealed types, the allocations and payments must satisfy an arbitrary set of polyhedral constraints. As before, each buyer can have (potentially private) hard budget constraint, and we require IR to hold ex-post. In the absence of other constraints on allocations and payments, we enforce ex-post envyfreeness constraints where a buyer should not derive more utility from the allocation and payment made to another buyer. \u2022 Procurement auctions (Appendix C): The agents have private costs on procuring items. The utility of the auctioneer is linear in the subset of items he procures. The auctioneer has a budget constraint on payments. This is a special case of budget feasible mechanisms [32, 4] with linear utility functions.\n\u2022 Procurement auctions (Appendix C): The agents have private costs on procuring items. The utility of the auctioneer is linear in the subset of items he procures. The auctioneer has a budget constraint on payments. This is a special case of budget feasible mechanisms [32, 4 with linear utility functions.\nWe note that all results in this work easily extend when the distributions are correlated, as long as there is black box access to samples from the joint type space. (See Appendix B for details.) Finally, though it is not the main point of the paper, we also note that this approach also derives all recent results on optimal auction design with multi-dimensional type spaces and allocation constraints [20, 2, 11, 12, 13] (see Section 5 and Appendix A.1), albeit with pseudo-polynomia running times.\nOverview of the Technique The general framework to derive auctions using the multiplicative weight method is summarized in Section 5. A key ingredient of this framework is to explicitly encode the mechanisms\u2019s action (allocation and payment for each buyer) in each realization, and connect them to the set of holistic variables using the linearity of expectation constraints. The former are exponentially many in number, but are connected to the latter via polynomially many linearity of expectation constraints. Our main insight is to use the multiplicative weight update (or Lagrangean) method to decide feasibility of these linearity of expectation constraints, and show that the oracle sub-problem that this method requires has a very simple structure - it decouples into a linear program over holistic variables, and into a per sample (or type vector) optimization problem of a certain form over the mechanism\u2019s action variables. Even though the latter is over exponentially many type vectors, it can be estimated by solving the per-sample optimization subproblem over polynomially many samples. The per sample optimization subproblem is problem-specific, yet it is an easy exercise to decide when this problem will admit to polynomial time solutions. Assuming it does, the framework yields a pseudo-polynomial time algorithm to computer a \u01eb-BIC mechanism that is an additive \u01eb approximation to the optimal revenue.\n# We note, the classical multiplicative weight update framework [3] looks at the per-constraint violation by the average-of-all-rounds solution; we require (and establish) a slight generalization to this framework (see Section 3):\n\u2022 The framework can handle different linear constraints in each round.\n\u2022 We consider the average violation of the ith constraint (for each i) by the solution to the oracle sub-problem for a uniformly chosen round. With this change, the framework no longer requires the underlying solution space to be convex.\nIn comparison with previous work, our optimization technique is based on the Lagrangean of an explicitly written program instead of trying to directly characterize the space of primal interim allocations rules. Our running times are pseudo-polynomial in the ratio of largest to smalles marginal prior probabilities. We leave improving this dependence without sacrificing any BIC o optimality properties as future work.\nRelated Work Though many auctions implemented in practice incorporate budget constraints (for instance, ad allocation auctions), most theoretical results in the absence of a Bayesian assumption show impossibility of designing auctions with specific properties. For instance, recent work [21, 24] shows the impossibility of designing auctions that are Pareto-optimal in terms of welfare even in multi-unit settings. Furthermore, Nisan [29] show that competitive equilibria need not exist even when agents have additive valuations for items. The lone exceptions are positive results for simple multi-unit settings [21, 24, 7, 1] with unlimited supply of the item. In view of these impossibility results, it is more natural to consider the Bayesian setting; however all results so far [16, 17, 26, 9, 30, 20, 12] only satisfy individual rationality in expectation over the priors. We present (what we believe are) the first efficient algorithms for designing optimal auctions that satisfy individual rationality ex-post in a wide variety of situations. We finally note that there has been a sequence of recent work on designing approximation algorithms for auctions in the Bayesian setting. For instance, the results in [14, 8, 7, 15] and subsequent papers show constant factor approximations to optimal auctions under a stronger model called dominant strategy incentive compatibility; the results in [32, 4] show constant factor approximations to the welfare of procurement auctions subject to a budget constraint (what they term budget feasible mechanisms); and the results in [6] considers the seller\u2019s as well as buyers\u2019 risk-aversion. In this paper, our focus is on designing optimal (or near-optimal) auctions and not on approximation algorithms.\n# 2 Preliminaries\nWe describe notations used in the paper: There are n buyers and a risk-neutral seller. The type space for buyer i is Ti, and we denote the individual type of buyer i by ti. We use t to indicate the vector of reported types of all buyers in a realization of the mechanism. We also abuse the notation slightly to use ti to indicate buyer i\u2019s type in t. The seller maintains a prior distribution over the types of the buyers. The probability distribution of buyer i over its type is given by Di and we use D to indicate the joint distribution over types of all buyers. We use \u00b5(t) to denote the density of type vector t, and fi(ti) to denote the probability of type ti for buyer i. For exposition of our results, we assume independence across buyers; however our results easily extend when buyers\u2019\ndistributions are correlated (Appendix B). Further, for each auctions setting studied in this work, we use OPT to denote the expected revenue (or the utility) of the optimal mechanism under the same set of constraints.\n# 2.1 Bayesian Incentive Compatibility\nA mechanism is a mapping from a vector of revealed types (or bids) to a (possibly randomized) set of allocations and payments for each buyer. For most of this paper, we assume the utility of a buyer is linear: For any allocation made and payment charged to the buyer, his utility is the difference between the welfare from the allocation and the payment.\nBayesian (ex-interim) Incentive Compatibility In this model of incentive compatibility, we assume the prior is common knowledge, and buyers are interested in maximizing their expected utility, where the expectation is over the types of the other buyers drawn from their respective priors. More formally, let Ui(t\u2032 i, ti) denote the expected utility for buyer i when he reveals type t\u2032 i and his true type is ti, where this expectation is over the types of the other buyers (drawn from their prior distributions) and the randomness in the mechanism. A Bayesian Incentive Compatible (BIC) mechanism has to enforce that:\nA mechanism is said to be \u01eb-BIC if it enforces Ui(ti, ti) \u2265Ui(t\u2032 i, ti) \u2212\u01eb for every pair of types ti, t\u2032 i \u2208Ti.\nRobust (ex-post) Individual Rationality The BIC constraint only requires the allocations and payments to satisfy IR ex-interim. In this paper, we consider a sub-class of mechanisms that satisfy a more robust (ex-post) notion of IR: If buyer i reveals type ti, then its allocation and payment should yield non-negative utility for the reported type in each outcome of the mechanism. We term this constraint ex-post IR.\nBudgets Constraints Each buyer is associated with a budget constraint. The budgets can be either publicly known, or it is buyer\u2019s private information specified using his type. We denote buyer i\u2019s budget by Bi, when budgets are public. For private budgets, we use Bi(t) to denote buyer i\u2019s budget when his type is t. Unless mentioned otherwise, we assume that a buyer\u2019s utility of paying more than his budget is \u2212\u221e.\n# 2.2 Problem Statements\nIn this work, we primarily focus on designing BIC mechanisms that maximize expected revenue and satisfy IR and budget constraints ex-post.\n\u2022 Multi-unit Auctions (Section 4): The seller has m identical items, each buyer i is associated with a publicly known valuation function vi : N \u00d7 Ti \u2192R+; his valuation for receiving k items is vi(k, ti) when his type is ti. We assume that vi(k, ti) \u22650 for each k \u22650, i, ti \u2208Ti and vi(0, ti) = 0 for each i, ti \u2208Ti. We note, these valuations easily capture scenarios where each buyer wants at most one item.\n\u2022 Non-linear Utility (Section 6): Various multi-unit auction settings that involves buyers as well as the seller with non-linear utility functions are illustrated in Section 6.\n Multi-item Auctions with Divisible Items (Appendix A): The seller offers m distinct types o divisible items. We assume that buyers have additive valuations: if buyer i of type t receives xij amount of item j, for each j, then his total valuation of the allocation is \ufffd j xijvij(t) Further, in addition to budget and ex-post IR constraints, we are given a polyope P over the set of feasible allocation and payments in a realization of the mechanism.\n\u2022 Budget Feasible Mechanisms: We describe the setting as well as our result in Appendix C.\nRunning Times We are given a parameter L, that for any single buyer, bounds the absolute value of (a) his payment, (b) his valuation for any set of items, and (c) his utility (for any allocation and payment). Further, we assume that fi(t) \u22651/L for each i, t \u2208Ti. Our algorithms produce \u01eb-BIC mechanisms that are additive \u01eb approximation to revenue in time polynomial in n (#buyers), m (#items), maxi |Ti|, and the parameters L and 1/\u01eb.\n# 3 The Multiplicative Weights Update Framework\nIn this section, we present a slight generalization to the multiplicative weights update framework to decide the feasibility of a set of linear constraints over arbitrary spaces. We note its difference compared to the classical framework:\n\u2022 The framework can (and needs to) handle different linear constraints in each round.\n\u2022 We consider the average violation of the ith constraint (for each i) by the solution to th oracle sub-problem for a uniformly chosen round (instead of the violation by the averag solution of all rounds). With this change, the framework no longer requires the underlyin solution space to be convex (Observation 1).\nWe next illustrate the framework using the exposition and bounds due to [3]. We first define the generic problem to decide the feasibility of linear constraints: Given an arbitrary set P \u2208Rs, and an r \u00d7 s matrix A,\nThe running time of the algorithm is quantified in terms of the Width defined as:\nOracle(A, y): Solve C(A, y) = max{ytAz : z \u2208P}.\nWe now describe a generalization of the Arora-Hazan-Kale (AHK) procedure that allows th matrix A and vector b to be different in each step, albeit with the same number of rows r, and sam width bound \u03c1. Denote the matrix at time t to be At, and its ith row by ait; denote the vector  at time t to be bt. The following theorem follows by simply re-working the analysis in [3], we omit its proof.\nAlgorithm 1 Generalized AHK Algorithm\nLet K \u21904\u03c12 log r\n\u01eb2\n; y1 = 1\nfor t = 1 to K do\nFind xt using Oracle(At, yt).\nif C(At, yt) < yT\nt bt then\nDeclare LP(At, bt, P) infeasible and terminate.\nend if\nFor i = 1, 2, . . . , r, set Mit = aitxt \u2212bit .\nUpdate yit+1 for i = 1, 2, . . . , r as follows:\nyit+1 \u2190yit(1 \u2212\u01eb)Mit/\u03c1 if Mit \u22650.\nyit+1 \u2190yit(1 + \u01eb)\u2212Mit/\u03c1 if Mit < 0.\nOptional step: Normalize yt+1 to have unit l1-norm.\nend for\nReturn (x1, x2, . . . , xK).\nTheorem 3.1. If for all t, LP(At, bt, P) is feasible, the procedure never declares infeasibility, and the sequence (x1, x2, . . . , xK) satisfies:\n# Theorem 3.1. If for all t, LP(At, bt, P) is feasible, the procedure never declares infeasibility, and the sequence (x1, x2, . . . , xK) satisfies:\n\ufffd t(aitxt \u2212bit) K + \u01eb \u22650 \u2200i\nObservation 1. If P is convex and (At, bt) are the same for all t, then x\u2217= (\ufffd t xt)/K is a feasible solution with Ax\u2217\u2265b \u2212\u01eb1. Further, even if P is not convex, the procedure is well-defined and we can interpret x\u2217as choosing one of the xt uniformly at random from {x1, x2, . . . , xK}.\n# 4 Multi-unit Auctions\nIn this section, we describe a framework for designing mechanisms by the multiplicative weight update method using multi-unit auctions as an example. We generalize this example to a structural framework in Section 5, and present more instantiations of this framework in later sections. We begin by the case where valuations of different buyers are independent, the only feasibility constraint is on the supply of items, and i.e. at most m items can be allocated, each buyer is associated with a public budget constraint, and the objective is to design an \u01eb-BIC mechanism that is (a) feasible, (b) ex-post IR, and (c) satisfies the budget constraints in each realization. The technique to handle private budgets is explained in Section 4.3. The following theorem states our result for multi-unit auctions:\nTheorem 4.1. For multi-unit auctions with per buyer budget constraints, there exists a polynomia time algorithm to compute a mechanism that is ex-post IR, \u01eb-BIC, and is an \u01eb-approximation to the revenue of the optimal mechanism (under the same set of constraints).\nIn the rest of the section, we prove Theorem 4.1. Consider a realization of the mechanism, le t be the reported type vector of all buyers. In the realization, let xiq(t) \u2208{0, 1} be an indicato variable indicating whether buyer i is allocated q \u2208{0, 1, . . . , m} items when the reported typ vector is t. Let pi(t) be the payment made by buyer i. As vector x(t), p(t) must be feasible, i should satisfy the constraints F(t) shown below.\nLet Xiq(ti) be the probability that buyer i is allocated q items when his reported type is ti, and let Pi(ti) be his expected payment when his type is ti. This probability is over the randomness due to the other buyers\u2019 valuations, and due to the randomness in the mechanism. We get\nThe BIC constraint is the following: \u2200i, ti, t\u2032 i \u2208Ti,\nFurther, we add a constraint to check whether revenue OPT is feasible. This can be written as the constraint: \ufffd i,ti\u2208Ti fi(ti)Pi(ti) \u2265OPT (4)\nFurther, we add a constraint to check whether revenue OPT is feasible. This can be written as the\nRandomized Mechanisms An astute reader will object that the set F(t) only captures the space of deterministic mechanisms and an optimal mechanism can take a randomized action for type vector t. To capture randomized mechanisms, we have to replace F(t) with the convex hull of the set F(t). However, this will only be a technicality - the multiplicative weight update framework described below optimizes a linear function of {x(t), p(t)} over this set, and this optimization problem is clearly the same whether we use F(t) or its convex hull. Since the same observation can be made of all the problems considered in this paper, we will use F(t) for expositional simplicity.\n# 4.1 Structural Characterization\nWe define the set of feasibility constraints C as the set of constraints F(t) for all type vectors t, combined with the BIC constraint (3) and the revenue constraint Eq (4). Consider deciding feasibility of Equations 1 and 2 subject to the constraints C. This is equivalent to deciding the feasibility of following constraints, referred to as EQ:\n\ufffd Using the multiplicative weight method, the feasibility problem reduces to a sequence of Oracle(\u03b1, \u03b2 problems, where \u03b1iqti, \u03b2iti (1 \u2264i \u2264n, q \u2208{0, 1, . . . , m}, ti \u2208Ti) are the dual multipliers which could\n\u2200i, q, ti \u2208Ti\n(1)\n\u2200i, ti \u2208Ti\n(2)\n(3)\n(4)\n \ufffd subject to the following constraints:\n\ufffd q vi(q, ti)Xiq(ti) \u2212Pi(ti) \u2265 \ufffd q vi(q, ti)Xiq(t\u2032 i) \u2212Pi(t\u2032 i) \u2200i, ti, t\u2032 i \u2208Ti \ufffd i,ti\u2208Ti fi(ti)Pi(ti) \u2265 OPT {xiq(t)} \u2208 F(t) \u2200t\nDecoupling of the Oracle Note that Oracle(\u03b1, \u03b2) separates into two optimization problems. The first is the poly-size linear program LPexp:\nsubject to the following constraints:\n\ufffd q vi(q, ti)Xiq(ti) \u2212Pi(ti) \u2265 \ufffd q vi(q, ti)Xiq(t\u2032 i) \u2212Pi(t\u2032 i) \u2200i, ti, t\u2032 i \u2208Ti \ufffd i,ti\u2208Ti fi(ti)Pi(ti) \u2265 OPT\n\ufffd The second is the problem A(\u03b1, \u03b2), which for every type vector t, solves the following problem:\nsubject to the constraints F(t).\nSolving the Problem A(\u03b1, \u03b2) Now we give a poly-time algorithm to solve the problem A(\u03b1, \u03b2). Observe that, in an optimal assignment, if buyer i is given q items, then (a) \u03b2iti \u22640 \u21d2pi(t) = 0, and (b) \u03b2iti > 0 \u21d2pi(t) = min{Bi, vi(q, ti)}. The allocation problem can be solved using dynamic programming as follows: Process buyers in order n to 1. Let A[i, k] be the value of A(\u03b1, \u03b2) considering buyers i though n and k items. The values of A[i, k] can be computed as follows:\nA[i, k] = min0\u2264j\u2264k(A[i + 1, k \u2212j] + j \u00d7 \u03b1ijtiF + max{\u03b2iti \u00d7 min{Bi, vi(j, ti)}, 0})\nAs we shall see later, we will require the algorithm to break ties consistently; this can always be achieved by having a state-less implementation of the algorithm.\nUsing Multiplicative Weight Update Framework Now we setup the parameters for the multiplicative weight update framework. Recall that L is the largest possible welfare a single buyer can receive from any allocation. Further, L also upper bounds individual buyer\u2019s budgets. Then, the width of each equality constraint (EQ) is bounded by max{n, L} = L. As maxi |Ti| \u2264L, the number of constraints in EQ are bounded by 2nmL. Further, the minimum support for any type\n\u2200t\nfor a buyer is bounded by 1/L. Given any \u01eb > 0, choose \u03b4 = \u01eb/(nmL) and K = O \ufffd L2 log(nmL) \u03b42 \ufffd ; let (\u03b11, \u03b21), (\u03b12, \u03b22), . . . , (\u03b1K, \u03b2K) be the dual variables in rounds 1, . . . , K associated with the multiplicative weight update process. Our mechanism M (\u03b1[1 . . . K], \u03b2[1 . . . K]) is defined below; Lemma 4.3 establishes its important properties. Definition 4.2. Let t be the reported type vector. The mechanism M (\u03b1[1 . . . K], \u03b2[1 . . . K]) chooses an integer \u2113between 1 and K uniformly at random, and solves the problem A(\u03b1\u2113, \u03b2\u2113) for type vector t. It then executes allocations and payments according to the solution of A(\u03b1\u2113, \u03b2\u2113). Lemma 4.3. (a) The mechanism M (\u03b1[1 . . . K], \u03b2[1 . . . K]) is \u01eb-BIC, ex-post IR, (b) a buyer never pays more than his budget, and (c) its expected revenue is at least OPT \u2212\u01eb. Proof. Using the properties of the multiplicative update framework, Equations 1, and 2 are violated by at most \u01eb/(nL). Since maxi,q,ti\u2208Ti vi(q, ti) \u2264L, the error in each BIC constraint is bounded by \u01eb/n. Further, the error in the revenue equation is bounded by \u01eb as maxi,ti\u2208Ti Pi(ti) \u2264L. This completes the proof of the lemma.\nThe only remaining issue is to compute the values of the dual variab them exactly will require time \u03a0i|Ti| which is exponential in n.\n# 4.2 Efficient Computation via Sampling\nThe main hurdle in running multiplicative update framework is that each constraint in EQ is ove exponentially many variables. We relax each constraint in EQ by \u03b4 = \u01eb nmL. The relaxed constraint are\nIf the relaxed constraints are feasible (with respect to feasibility constraints C), then it is easy to check that this implies that the BIC constraints are satisfied to an additive \u01eb, and the revenue generated is at least OPT \u2212\u01eb. Further, note that the width of each of relaxed constraint is bounded by \u03c1 = mL. We apply the multiplicative weight update method as follows: In each round \u2113, given dual weights (\u03b1\u2113, \u03b2\u2113), we do the following. Generate C = O(nmL3 log(nmLK)/\u01eb) samples from D; let S\u2113be this set. Let Siti\u2113\u2282S\u2113be the set of samples in which buyer i has type ti \u2208Ti. We consider relaxed and sampled version of constraints EQ:\nWe now apply the Oracle to these relaxed constraints using the dual weight vector \ufffd \u03b1\u2113,  We make a crucial observation: Observation 2. The function Oracle reduces to solving A(\u03b1\u2113, \u03b2\u2113) on these samples.\n(5)\n(6)\nWe now establish the correctness of our procedure. Let LP(D) be the feasibility problem (constraints C and EQ) defined on distribution D and let LP(S\u2113) for 1 \u2264\u2113\u2264K be the feasibility problem defined on S\u2113, where constraints in EQ are relaxed by \u03b4. We focus on the allocation constraints; the analysis for payment constraints is similar. Let {x\u2113 iq(t)} denote the solution to the Oracle on LP(S\u2113). Let {x\u2217 iq(t)} denote the feasible solution for LP(D) with no slack. Lemma 4.4. With high probability (\u22651 \u22121/poly(nmLK/\u01eb)), for all 1 \u2264l \u2264K, we have:\n\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd Proof. Since we assumed fi(ti) \u22651/L, using Hoeffdings\u2019s bounds and union bound, the probability that, for each i, ti \u2208Ti, \u2113, |Siti\u2113| \u2208(1\u00b1\u01eb)C\u00d7fi(ti) is 1\u2212poly(nmLK/\u01eb). Thus |Siti\u2113| = \u2126(nmL2K/\u01eb) for each i, t \u2208Ti, K. We now prove the first part. The value of x\u2113 iq(t) is determined by the values of dual variables \u03b1\u2113, \u03b2\u2113. From the previous observation, the Oracle decomposes into solving A(\u03b1\u2113, \u03b2\u2113) on individual samples. The values of xiq(t) for different values of t can be seen as a distribution parameterized by \u03b1\u2113, \u03b2\u2113, and since the set S\u2113is chosen independent of previous rounds and of \u03b1\u2113, \u03b2\u2113, the process of drawing type vectors for S\u2113can be seen as drawing independent samples from this distribution. As each xiq(t) \u2208{0, 1} (i.e. a bounded random variable), we can apply Hoeffding\u2019s inequality and union bound to prove the first part. For the second part, note x\u2217 iq(t) \u2208{0, 1}, and the process of sampling valuation vectors t corresponds to sampling from distribution {x\u2217 iq}. The proof now follows using Hoeffding\u2019s inequality and union bound. As a corollary, suppose LP(D) is feasible without any slack, then LP(S\u2113) is feasible for 1 \u2264\u2113\u2264K with high probability (\u22651 \u22121/poly(nmLK/\u01eb)). This implies that the Oracle will not return infeasibility w.h.p. To establish the correctness, it remains to bound the error in each constraint when the samples are drawn from D and M(\u03b1[1, . . . , K], \u03b2[1, . . . , K]) is used determine allocations and payments. We focus on one constraint:\nUsing Theorem 3.1, we get\nwhere x\u2113 iq(t) denotes whether in round \u2113, buyer i is given q items when the type vector is t. Applyin Lemma 4.4 once again, we have:\nre x\u2113 iq(t) denotes whether in round \u2113, buyer i is given q items when the type vector is t. Applying\nThis shows that if round \u2113\u2208{1, 2, . . . , K} is chosen uniformly at random and its allocation and payment according to mechanism A(\u03b1\u2113, \u03b2\u2113) are used, this yields a \u01eb-BIC mechanism with revenue OPT \u2212\u01eb.\n# 4.3 Handling Private Budgets\nNext, we illustrate how to extend our techniques when buyers\u2019 budgets are private and specified through the reported types. Recall that Bi(ti) denotes buyer i\u2019s budget when his reported type is ti. Under the assumption that, the utility of paying more than the budget is \u2212\u221efor buyer, we offer all items to an arbitrarily chosen buyer with a vanishingly small probability; otherwise we run the mechanism M (\u03b1[1 . . . T], \u03b2[1 . . . T]). In such case, buyer i never reports type t\u2032 i with Bi(t\u2032 i) > Bi(ti) when his real type is ti. Now the BIC constraint changes to\n\ufffd q vi(q, ti)Xiq(ti) \u2212Pi(ti) \u2265 \ufffd q vi(q, ti)Xi(t\u2032 i) \u2212Pi(t\u2032 i) \u2200i, ti, t\u2032 i \u2208Ti with Bi(ti) \u2265Bi(t\u2032 i)\nThus, in-spite of having utility of \u2212\u221efor paying more than the budget, the width of the LP does not increase and we can use techniques developed in the earlier part of this section to develop an \u01eb-BIC, ex-post IR mechanism.\n# 5 Overall Framework for Optimal Auction Design\nWe next summarize the generic framework for mechanism design using the multiplicative weigh update method. There are two sets of variables:\n\u2022 Action Variables: For each type vector t, xi(t) and pi(t) indicates the mechanism\u2019s allocation and payment for buyer i. As discussed earlier, the optimal mechanism can take a randomized action for a type vector t; it does not affect the analysis of the framework.\n\u2022 Action Variables: For each type vector t, xi(t) and pi(t) indicates the mechanism\u2019s allocation and payment for buyer i. As discussed earlier, the optimal mechanism can take a randomized action for a type vector t; it does not affect the analysis of the framework. \u2022 Holistic Variables: For buyer i, each ti, t\u2032 i \u2208Ti, Ui(ti, t\u2032 i) indicates the average utility for reporting type ti when the real type is t\u2032 i. Further, Pi(ti, t\u2032 i) is his average payment for reported type ti when the real type is t\u2032 i. There are three sets of constraints: \u2022 F(t): the feasible set of actions for type vector t. In each realization, \u27e8x(t), p(t)\u27e9\u2208F(t). \u2022 EQ: the set of constraints that connect action variables to holistic variables. This connection is problem specific, we illustrate its generic structure. For buyer i and a reported type vector t, where ti \u2208t is his reported type, let ui(tti\u2208t, t\u2032 i, xi(t), pi and hi(tti\u2208t, t\u2032 i, xi(t), pi(t)) be his utility and payment when t\u2032 i is his real type and \u27e8xi(t), pi(t)\u27e9\n\u2022 Holistic Variables: For buyer i, each ti, t\u2032 i \u2208Ti, Ui(ti, t\u2032 i) indicates the average utility for reporting type ti when the real type is t\u2032 i. Further, Pi(ti, t\u2032 i) is his average payment for reported type ti when the real type is t\u2032 i. here are three sets of constraints: \u2022 F(t): the feasible set of actions for type vector t. In each realization, \u27e8x(t), p(t)\u27e9\u2208F(t). \u2022 EQ: the set of constraints that connect action variables to holistic variables. This connection is problem specific, we illustrate its generic structure. For buyer i and a reported type vector t, where ti \u2208t is his reported type, let ui(tti\u2208t, t\u2032 i, xi(t), pi(t and hi(tti\u2208t, t\u2032 i, xi(t), pi(t)) be his utility and payment when t\u2032 i is his real type and \u27e8xi(t), pi(t)\u27e9\n\u2022 Holistic Variables: For buyer i, each ti, t\u2032 i \u2208Ti, Ui(ti, t\u2032 i) indicates the average utility for reporting type ti when the real type is t\u2032 i. Further, Pi(ti, t\u2032 i) is his average payment for reported type ti when the real type is t\u2032 i.\nUi(ti, t\u2032 i) = \ufffd t|ti\u2208t \u00b5(t) fi(ti)ui(tti\u2208t, t\u2032 i, xi(t), pi(t)) Pi(ti, t\u2032 i) = \ufffd t|ti\u2208t \u00b5(t) fi(ti)hi(tti\u2208t, t\u2032 i, xi(t), pi(t))\n\u2022 Linear constraints on holistic variables such as BIC, revenue, and other ex-interim constraints\n\u2022 Linear constraints on holistic variables such as BIC, revenue, and other ex-interim constraints. Each equation in EQ plays the role of an expert in the multiplicative weight update framework. The oracle problem Oracle(\u03b1\u2113, \u03b2\u2113) in round \u2113asks us to solve, for dual multipliers \u03b1\u2113, \u03b2\u2113, the following:\nEach equation in EQ plays the role of an expert in the multiplicative weight update framework. The oracle problem Oracle(\u03b1\u2113, \u03b2\u2113) in round \u2113asks us to solve, for dual multipliers \u03b1\u2113, \u03b2\u2113, the following:\nMaximize \ufffd t \ufffd \u00b5(t) \u00d7 \ufffd i,t\u2032 i\u2208Ti \ufffd \u03b1\u2113 itit\u2032 iui(tti\u2208t, t\u2032 i, xi(t), pi(t)) + \u03b2\u2113 itit\u2032 ihi(tti\u2208t, t\u2032 i, xi(t), pi(t)) \ufffd\ufffd\n \ufffd  \ufffd subject to constraint F(t) for each t. The optimization problem A(\u03b1\u2113, \u03b2\u2113) for type vector t m mizes, subject to constraint F(t), the quantity\n\ufffd i,t\u2032 i\u2208Ti \ufffd \u03b1\u2113 itit\u2032 iui(tti\u2208t, t\u2032 i, xi(t), pi(t)) + \u03b2\u2113 itit\u2032 ihi(tti\u2208t, t\u2032 i, xi(t), pi(t))\n\ufffd \ufffd \ufffd Let ALG be the algorithm that can solve this problem optimally. Then, as established in Section 4, it suffices to solve A(\u03b1, \u03b2) for C samples of type vectors drawn from the joint distribution; C = poly(n, m, \ufffd i |Ti|, 1/\u01eb, L). The dual multipliers \ufffd \u03b1\u2113+1, \u03b2\u2113+1\ufffd are computed based on the error in each constraint in round \u2113. The process is repeated K = poly(n, \ufffd i |Ti|, 1/\u01eb, L) times; this generates K sets of dual variables \ufffd (\u03b11, \u03b21), (\u03b12, \u03b22), . . . , (\u03b1K, \u03b2K) \ufffd . The eventual mechanism is as follows: for reported type vector t, pick a round at random, say \u2113, and solve the optimization problem A(\u03b1\u2113, \u03b2\u2113) for type vector t. In general, a main hurdle to achieving tractability is that the Lagrange multipliers, \u03b1, \u03b2 can be negative. We note, in many cases the full generality of the framework is not needed: We can eliminate several variables, and the constraints EQ as well as the holistic variables can take a simple form that is more tractable. We present instantiations of this framework for multi-item auctions next. The key point is the following: As long as the Oracle subproblem constructed above is polynomial time solvable or admits to an approximation algorithm, the entire framework yields a polynomial time algorithm, or a similar approximation guarantee.\nMulti-item Auctions and Tractability It is quite straightforward to extend the above framework to multi-dimensional auctions. We discuss the case with budgets and other ex-post IR constraints such as envy-freeness in Appendix A, and we only summarize it below. The action variables are xij(t), which denotes whether item j allocated to buyer i when the buyers\u2019 type vector is t; and pi(t), which is the price paid by buyer i. For any t, the allocation and payments must be feasible for a set of allocation and IR constraints, denoted by F(t). The holistic variables are Xijti, denoting the expected allocation of item j to buyer i when his type is ti, and Piti denoting the expected price paid. When a buyer\u2019s welfare is linear in the valuations for different items, the BIC\n# he holistic variables. The overall problem reduces to checkin\n# constraints are linear in the holistic variables. The overall problem reduces to checking feasibi of constraints\nfi(ti)Xijti = \ufffd t|ti\u2208t \u00b5(t)xij(t) \u2200i, j, ti \u2208Ti fi(ti)Piti = \ufffd t|ti\u2208t \u00b5(t)pi(t) \u2200i, ti \u2208Ti\n\ufffd In Appendix A, we show that when the items are divisible, the agent\u2019s utilities are linear, and the set of feasible allocations is convex, the Oracle problem remains tractable even with private ex-post budgets and other IR constraints. We note, if there are no ex-post constraints on payments (setting in [20, 12, 13]), the only action variables capture allocations for each buyer given the joint type revealed, so that F(t) is simply the space of feasible allocations. The constraints EQ relate these per-scenario allocation variables to the expected allocations for each buyer given his type. Since there are no per-scenario payment constraints, the holistic payment variables are only present in the BIC and ex-interim IR constraints, and do not need corresponding action variables. Furthermore, when the allocation sets are downward closed, it is easy to show that the constraints EQ can now be written as inequality constraints instead of equality as follows.\nfi(ti)Xijti \u2264 \ufffd t|ti\u2208t \u00b5(t)xij(t) \u2200i, j, ti \u2208Ti\n\ufffd The advantage of doing this is that it makes the Oracle subproblem have non-negative Lagrange multipliers, which makes the subproblem equivalent to welfare maximization over the feasible allo cation space. We sketch in Appendix A.1 how this approach derives the results for approximately optimal auctions over downward closed allocation spaces presented in [13].\n# 6 Non-Linear Utility Functions\nIn this section, we consider multi-unit auctions (with budgets) when agents have non-linear utility functions. We first consider two well studied special cases of buyers with non-linear utility function over allocation and payment, namely (a) auction with quitting rights and (b) the soft budget constraint with cost to borrow. We also address a general setting in which the seller has a nonlinear utility function over revenue and buyers have arbitrary utility functions over allocations and payments (which includes scenarios such as buyers\u2019 and/or seller\u2019s risk-aversion).\n# 6.1 Auctions with Quitting Rights\nWe first consider a model of auctions with quitting rights [18]: The outcome of the mechanism is not binding on the buyer, and in each realization of the mechanism, the buyer has the option to quit if his payment is more than his valuation of the allocated set. In other words, in each outcome, his utility is the maximum of zero and the difference in his welfare and payment. We note, even though the ex-post IR constraint makes a buyer\u2019s utility non-negative for the correctly reported type, the non-binding nature of contract makes utility non-negative even for mis-reporting the type. This makes the BIC constraint non-linear in the expected allocations and payments, and a buyer\u2019s expected utility for each type needs to be computed explicitly. As before, consider a realization of the mechanism, let t be the reported type vector of all buyers. In the realization, let xiq(t) \u2208{0, 1} be an indicator variable indicating whether buyer i is allocated q \u2208{0, 1, . . . , m} items when the reported type vector is t. Let pi(t) be the payment\nLet Ui(ti, t\u2032 i) be buyer i\u2019s expected utility when his reported type is ti and the real type is t\u2032 i. W get, \u2200i, ti, t\u2032 i \u2208Ti\nLet Ui(ti, t\u2032 i) be buyer i\u2019s expected utility when his reported type is ti and the real type is t\u2032 i. We\n(Recall, we denote buyer i\u2019s reported type in t by ti.) The BIC constraint is the following: Ui(ti, ti) \u2265Ui(t\u2032 i, ti) \u2200i, ti, t\u2032 i \u2208Ti\n\ufffd i,ti fi(ti)Pi(ti) \u2265 OPT fi(ti)Pi(ti) = \ufffd t|ti\u2208t \u00b5(t)pi(t) \u2200i, ti \u2208Ti\n\ufffd We discuss the correctness of the revenue constraints: as the mechanism is always individual rational for the reported type, the revenue from buyer i for type vector t is pi(t), when he reports his type truthfully. The Oracle problem A(\u03b1, \u03b2), which for every type vector t, solves the following subject to constraints F(t):\nMaximize \ufffd it\u2032 i \u03b1itit\u2032 i \ufffd max \ufffd\ufffd q vi(q, t\u2032 i)xiq(t) \u2212pi(t), 0 \ufffd\ufffd + \ufffd i \u03b2itipi(t)\n\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd  \ufffd For any type vector t, this can be solved using dynamic programming: if q items are allocated to buyer i then the payment is uniquely determined as follows:\n\ufffd \ufffd  \ufffd For any type vector t, this can be solved using dynamic programming: if q items are allocated to buyer i then the payment is uniquely determined as follows: (a) If \u03b2iti \u22640, then pi(t) = 0 (b) If \u03b2iti > 0, then pi(t) is the price that maximizes \ufffd t\u2032 i \u03b1itit\u2032 i \ufffd max{\ufffd q vi(q, t\u2032 i)xiq(t) \u2212pi(t), 0} \ufffd . Its value lies in the set {0, Bi} \u222a{vi(q, t\u2032 i)|t\u2032 i \u2208Ti} and can be computed in polynomial time. This implies a poly-time dynamic program analogous to that in Section 4. We get the following theorem using multiplicative weight update method.\nTheorem 6.1. For multi-unit auctions with quitting rights and budget constraints, there exists a polynomial time algorithm to compute an \u01eb-BIC mechanism with revenue OPT \u2212\u01eb.\n# 6.2 Soft Budget Constraints\nUntil now, we have assumed that buyers have fixed budgets and cannot pay more than their budgets. Recently, models with soft budgets have been considered assuming a buyer\u2019s ability to borrow at an additional cost [22]. The model is formally defined as follows: buyer i is associated with a piecewise linear function ci : R \u2192R; ci(p) denotes the total cost for arranging payment p and we assume\nthat ci(p) \u2212p is monotone. For instance, if buyer i can arrange for interest-free Bi dollars, and has to pay an interest rate of r beyond that; then ci(p) = p + max{(1 + r) \u00d7 (p \u2212Bi), 0}. The function ci easily accounts for situations where (a) there is an additional fixed cost to setup the loan, and (b) the total interest amount increases with the amount of the loan. The buyer\u2019s utility in a realization is his valuation of the allocated items minus the cost for his payment. The details are similar to the previous setting, we note the differences. The function U(ti, t\u2032 i) changes to\n# fi(ti)Ui(ti, t\u2032 i) = \ufffd t|ti\u2208t \u00b5(t) \ufffd\ufffd q vi(q, t\u2032 i)xiq(t) \u2212ci(pi(t)) \ufffd\n\ufffd q vi(q, ti)xiq(t) \u2212ci(p(t)) \u22650\nMaximize \ufffd it\u2032 i \u03b1itit\u2032 i \ufffd\ufffd q vi(q, t\u2032 i)xiq(t) \u2212ci(pi(t)) \ufffd\n \ufffd \ufffd\ufffd \ufffd The optimal solution has the following property: if q items are allocated to buyer i, then his payment within the set {0, vi(q, ti)} and among the end points of the linear pieces of ci(p). Thus the optimal assignment can be found using dynamic programming and an \u01eb-BIC mechanism can be designed using the multiplicative update framework.\n# 6.3 Non Linear Utility for Seller\nThe settings considered until now assume that the seller\u2019s utility is linear in revenue and the objective is to maximize his expected revenue. In this section, we address the setting in which the seller is associated with an arbitrary monotone utility function U : R \u2192R; i.e. the seller\u2019s utility for revenue Z is U(Z). The objective of the mechanism is to maximize the seller\u2019s expected utility EZ [U(Z)]. Further, each buyer i is associated with an arbitrary utility function ui : Z \u00d7N \u00d7Ti \u2192 R+; buyer i\u2019s utility for receiving q items for a payment of p is ui(p, q, ti) where ti is his type. This includes scenarios where the seller and/or the buyers are risk averse. We make following assumptions on the nature of utility functions, as well as on the optimal mechanism: (a) a buyer\u2019s payment is allowed to be negative (positive transfer is allowed) however the set of possible payments from a buyer is restricted to integers between \u2212L and L, (b) for each i, ti \u2208Ti, p, q, |ui(p, q, ti)| \u2264L, and (c) U(0) = 0. The assumption about integral payments is for simplicity in exposition; if all buyers\u2019 and seller\u2019s utility functions are monotone and have bounded derivative, then any BIC mechanism can be converted into an \u01eb-BIC mechanism whose payments are integral - we simply round down the payment to a suitably discretized value so that the utility does not change by more than \u01eb. The reason we allow positive transfers in the above framework is that it can raise much more utility for the seller (see [6] for details). In the optimal mechanism, let xipq(t) be an indicator variable that denote whether buyer i is given q items for a payment of p when buyers\u2019 type vector is t. For any t, allocation and payments must be feasible for the following set of constraints F(t), where the final constraint imposes ex-post\nLet Xipq(ti) denote the probability that buyer i is allocated q items at price p when his revealed type is ti. The problem reduces to checking the feasibly of the following set of constraints\n\ufffd \ufffd\ufffd \ufffd subject to constraints given by F(t) (for all type vectors t) and the BIC constraint given below: \ufffd p,q (Xipq(ti) \u2212Xipq(t\u2032 i)) \u00d7 ui(p, q, ti) \u2265 0 \u2200i, ti, t\u2032 i \u2208Ti\n\ufffd As before, the Oracle problem A(\u03b1, \u03b2), for each type vector t, solves the following Max \ufffd\ufffd i,p,q,ti\u2208t \u03b1ipqtixipq(t) + \u03b2 \u00d7 U \ufffd\ufffd i,p,q p \u00d7 xipq(t) \ufffd\ufffd\nMax \ufffd\ufffd i,p,q,ti\u2208t \u03b1ipqtixipq(t) + \u03b2 \u00d7 U \ufffd\ufffd i,p,q p \u00d7 xipq(t) \ufffd\ufffd\nMax \ufffd\ufffd i,p,q,ti\u2208t \u03b1ipqtixipq(t) + \u03b2 \u00d7 U \ufffd\ufffd i,p,q p \u00d7 xipq(t) \ufffd\ufffd\n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd subject to constraints F(t). We note that \u03b1ipqt can be both positive or negative, however \u03b2 is always positive. Solving A(\u03b1, \u03b2) for t: The problem can be solved optimally using a dynamic program as follows: let A(i, k, z) be the maximum value of the objective function when k items are allocated to first i buyers generating a total revenue of z from them. The recurrence relation for the dynamic program is\n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd subject to constraints F(t). We note that \u03b1ipqt can be both positive or negative, however \u03b2 is always positive. Solving A(\u03b1, \u03b2) for t: The problem can be solved optimally using a dynamic program as follows:\n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd ject to constraints F(t). We note that \u03b1ipqt can be both positive or negative, however \u03b2 is\nNote, our assumption that payments to buyers are always integral and bounded between \u2212L and +L. Thus, A(\u2217, \u2217, z) needs to defined only for 2nL different values of revenue, and the dynamic program can be solved in time polynomial in L. Using the multiplicative weight update framework, we get following theorem: Theorem 6.2. Given a seller with arbitrary utility function over total revenue and buyers with arbitrary utility functions over payments and allocations, there exists a polynomial time algorithm to compute an \u01eb-BIC mechanism with expected utility OPT \u2212\u01eb for the seller. We note that if we only wish to impose ex-interim IR, then we remove the final constraint in F(t), and instead add:\nNote, our assumption that payments to buyers are always integral and bounded between \u2212L and +L. Thus, A(\u2217, \u2217, z) needs to defined only for 2nL different values of revenue, and the dynamic program can be solved in time polynomial in L. Using the multiplicative weight update framework we get following theorem:\n\ufffd p,q Xipq(ti) \u00d7 ui(p, q, ti) \u2265 0 \u2200i, ti \u2208Ti\nReferences\n# References\n1] Z. Abrams. Revenue maximization when bidders have budgets. In SODA, pages 1074\u20131082, 2006.\n[2] S. Alaei, H. Fu, N. Haghpanah, J. D. Hartline, and A. Malekian. Bayesian optimal auctions via multi- to single-agent reduction. In EC, 2012. [3] S. Arora, E. Hazan, and S. Kale. The multiplicative weights update method: A meta algorithm and applications. Theory of Computing, 8:121\u2013164, 2012. [4] X. Bei, N. Chen, N. Gravin, and P. Lu. Budget feasible mechanism design: from prior-free to bayesian. In STOC, pages 449\u2013458, 2012. [5] D. Bergemann and S. Morris. Robust mechanism design. Econometrica, 73(6):1771\u20131813, 2005. [6] A. Bhalgat, T. Chakraborty, and S. Khanna. Mechanism design for a risk averse seller. In WINE, 2012. [7] S. Bhattacharya, V. Conitzer, K. Munagala, and L. Xia. Incentive compatible budget elicitation in multi-unit auctions. In SODA, 2010. [8] S. Bhattacharya, G. Goel, S. Gollapudi, and K. Munagala. Budget constrained auctions with heterogeneous items. In STOC, 2010. [9] K. C. Border. Reduced form auctions revisited. Economic Theory, 31(1):167\u2013181, 2007. 10] C. Borgs, J. T. Chayes, N. Immorlica, M. Mahdian, and A. Saberi. Multi-unit auctions with budget-constrained bidders. In EC, pages 44\u201351, 2005. 11] Y. Cai, C. Daskalakis, and S. M. Weinberg. An algorithmic characterization of multidimensional mechanisms. In STOC, 2012. 12] Y. Cai, C. Daskalakis, and S. M. Weinberg. Optimal multi-dimensional mechanism design: Reducing revenue to welfare maximization. In FOCS, 2012. 13] Y. Cai, C. Daskalakis, and S. M. Weinberg. Reducing revenue to welfare maximization : Approximation algorithms and other generalizations. In SODA, 2013. 14] S. Chawla, J. D. Hartline, D. L. Malec, and B. Sivan. Multi-parameter mechanism design and sequential posted pricing. In STOC, pages 311\u2013320, 2010. 15] S. Chawla, D. L. Malec, and A. Malekian. Bayesian mechanism design for budget-constrained agents. In EC, 2011. 16] Y. Che and J. Gale. Expected revenue of the all-pay auctions and first-price sealed bid auctions with budget constraints. Economic Letters, 50:373\u2013380, 1996. 17] Y. Che and J. Gale. The optimal mechanism for selling to a budget constrained buyer. Journal of Economic Theory, 92(2):198\u2013233, 2000. 18] O. Compte and P. Jehiel. On quitting rights in mechanism design. American Economic Review, 97(2):137\u2013141, 2007.\n[19] V. Conitzer and T. Sandholm. Self-interested automated mechanism design and implications for optimal combinatorial auctions. In ACM Conference on Electronic Commerce, pages 132\u2013 141, 2004. [20] C. Daskalakis and S. M. Weinberg. Symmetries and optimal multi-dimensional mechanism design. In EC, 2012. [21] S. Dobzinski, R. Lavi, and N. Nisan. Multi-unit auctions with budget limits. In FOCS, 2008. [22] P. Dutting, M. Henzinger, and I. Weber. An expressive mechanism for auctions on the web. In WWW, 2011. [23] P. Eso and G. Futo. Auction design with a risk averse seller. In Economic Letters, 1999. [24] G. Goel, V. Mirrokni, and R. Paes Leme. Polyhedral clinching auctions and the adwords polytope. In STOC, 2012. [25] J. D. Hartline and B. Lucier. Bayesian algorithmic mechanism design. In STOC, pages 301\u2013 310, 2010. [26] J. Laffont and J. Robert. Optimal auction with financially constrained buyers. Economic Letters, 52(2):181 \u2013 186, 1996. [27] D. Mookherjee and S. Reichelstein. Dominant strategy implementation of Bayesian incentive compatible allocation rules. J. Econ. Theory, 56(2):378\u2013399, 1992. [28] R. B. Myerson. Optimal auction design. Mathematics of Operations Research, 6(1):58\u201373, 1981. [29] N. Nisan. Google\u2019s auction for tv ads. In ESA, 2009. [30] M. Pai and R. Vohra. Optimal auctions with financially constrained bidders. Working Paper, 2008. [31] S. A. Plotkin, D. B. Shmoys, and E. Tardos. Fast approximation algorithms for fractional packing and covering problems. Math. Oper. Res., 1995. [32] Y. Singer. Budget feasible mechanisms. In FOCS, 2010. [33] N. E. Young. Randomized rounding without solving the linear program. In SODA, 1995.\n# A Multi-item Auctions\nIn this section, we illustrate how to use our framework for multi-item auctions, when buyers have additive valuations and items are divisible. The setting is described in detail in Section 2. As earlier, the objective is to design an \u01eb-BIC mechanism that is feasible, ex-post IR, satisfies buyers\u2019 budget constraints, and maximizes seller\u2019s revenue. For simplicity in exposition, we assume that buyers\u2019 budgets are public; our techniques can be easily extended to handle private budgets. The technically interesting aspect is that we can write constraints coupling allocations and payments across buyers, for instance envy-freeness constraints. At the end, in Section A.1, we show that our framework provides a simple recipe for deriving recent results in [20, 12, 13] for general allocation constraints. In the mechanism, let xij(t) denote the fraction of item j allocated to buyer i when the buyers\u2019 type vector is t; and let pi(t) be the price paid by buyer i. For any t, the allocation and payments must be feasible for the following convex set of constraints, denoted by F(t):\nx(t), p(t) \u2208P(t) and pi(t) \u2264Bi \u2200i and \ufffd vij(ti)xij(t) \u2265pi(t) \u2200i, ti \u2208Ti\nx(t), p(t) \u2208P(t) and pi(t) \u2264Bi \u2200i and \ufffd j vij(ti)xij(t) \u2265pi(t) \u2200i, ti \u2208Ti\nLet Xijti denote the expected allocation of item j to buyer i when his type is ti and let Piti  the expected price paid. For target revenue OPT, the problem reduces to checking feasib constraints:\nLet Xijti denote the expected allocation of item j to buyer i when his type is ti and let Piti denote the expected price paid. For target revenue OPT, the problem reduces to checking feasibility of\nfi(ti)Xijti = \ufffd t|ti\u2208t \u00b5(t)xij(t) \u2200i, j, ti \u2208Ti fi(ti)Piti = \ufffd t|ti\u2208t \u00b5(t)pi(t) \u2200i, ti \u2208Ti\n\ufffd subject to the constraints given by F(t) for all t and:\n\ufffd j vij(ti)Xijti \u2212Piti \u2265\ufffd j vij(ti)Xijt\u2032 i \u2212Pit\u2032 i \u2200i, ti, t\u2032 i \u2208Ti \ufffd i,t fi(ti)Piti \u2265OPT\n\ufffd We use techniques developed in Section 4 to solve the feasibility problem. As before, it would require implementation of Oracle(\u03b1, \u03b2) that reduces to solving A(\u03b1, \u03b2), which for each type vector t, computes:\n\ufffd We use techniques developed in Section 4 to solve the feasibility problem. As before, it would require implementation of Oracle(\u03b1, \u03b2) that reduces to solving A(\u03b1, \u03b2), which for each type\nMaximize \ufffd i,j \u03b1ijtixij(t) + \ufffd i \u03b2itipi(t)\nsubject to the constraints F(t). As F(t) is convex, A(\u03b1, \u03b2) can be solved optimally using an LP for any t. Thus we get the following theorem:\nTheorem A.1. For multi-item auctions with additive valuations and arbitrary convex constraints on the set of feasible allocations an payment in any realization, there exists a polynomial time algorithm to compute a feasible, ex-post rational, \u01eb-BIC mechanism with expected revenue OPT \u2212\u01eb. Envy-Freeness The techniques in this section can be extended to support envy-freeness in each realization of the mechanism. Consider the setting where F(t) only has the ex-post IR constraints x(t), p(t) \u22650 and \ufffd j vij(ti)xij(t) \u2265pi(t) \u2200i\n# Envy-freeness means that no buyer receives more utility from the allocation and payment made  another buyer. We can enforce this by simply adding\n\ufffd xij(t)vij(ti) \u2212pi(t) \u2265 \ufffd xi\u2032j(t)vij(ti) \u2212pi\u2032(t)\n\ufffd xij(t)vij(ti) \u2212pi(t) \u2265 \ufffd xi\u2032j(t)vij(ti) \u2212pi\u2032(t) \u2200i, i\u2032\nto F(t). Note, F(t) still remains convex and A(\u03b1, \u03b2) can be solved in polynomial time. Our auctions extend to the case where there are m = O(1) indivisible items. The valuation to buyer i for obtaining subset S of items given type t is vi(S, t).\n# A.1 General Allocation Constraints\nFor multi-dimensional auctions without ex-post IR or payment constraints, our approach can handle general allocation constraints (over indivisible items) as considered in [20, 12, 13]. We illustrate this for the multi-item auction problem with additive valuations and indivisible items, where the allocation set F(t) = {x(t) \u2208P} is downward closed and only admits to c-approximately optimizing welfare [13]. The key hurdle with applying the above methodology as is, is that the dual multipliers can be negative. But this is easy to fix: Since we do not have payment constraints, we simply need to check the feasibility of the following inequality constraint:\nfi(ti)Xijti \u2264 \ufffd t|ti\u2208t \u00b5(t)xij(t) \u2200i, j, ti\nfi(ti)Xijti \u2264 c \u00d7 \ufffd t|ti\u2208t \u00b5(t)xij(t) \u2200i, j, ti\n \ufffd The Oracle(\u03b1) problem maximizes welfare, \ufffd i,j \u03b1ijtixij(t) subject to F(t). Since the constraint is inequality, we have \u03b1 \u22650 so that the Oracle sub-problem is precisely welfare maximization. Suppose this has a c approximation. Suppose there is a feasible solution to the original program of the following form f(t)X\u2217 \u2264 \ufffd  \u00b5(t)x\u2217 (t) \u2200i, j, t\n\ufffd i,j,ti \u03b1ijtifi(ti)X\u2217 ijti \u2264 \ufffd i,j,ti \u03b1ijti \ufffd t|ti\u2208t \u00b5(t)x\u2217 ij(t)\n\ufffd \ufffd \ufffd Since Oracle(\u03b1) has a c-approximation, there exists a solution \u02dcx that can be computed i nomial time such that:\n\ufffd i,j,ti \u03b1ijtifi(ti)X\u2217 ijti \u2264 c \u00d7 \ufffd i,j,ti \u03b1ijti \ufffd t|ti\u2208t \u00b5(t)\u02dcxij(t)\n\ufffd  \ufffd \ufffd This implies that the multiplicative weight update method using the c-approximate oracle will never declare infeasibility of the relaxed program. The rest of the argument is the same as before, and yields a randomized mechanism using the multiplicative weight method. The only issue is in making the final mechanism obey the BIC constraints since the inequality constraint implies the probability of allocation need not be exactly Xijti in expectation, and could be larger. The fix is however a standard trick that works for downward closed environments. Suppose the final slack in the constraint for (i, j, ti), that is, the ratio of LHS to RHS, is \u03b2ijti \u22641, then whenever the mechanism decides to allocate item j to buyer i for type ti, we allocate with probability \u03b2ijti. This ensures the expected allocation is exactly Xijti/c. If the charge exactly Pit/c via an all-pay scheme, then this ensures that the mechanism is BIC with revenue OPT/c.\n# Correlated Distributions\nIn this section, we illustrate how to extend our techniques to handle correlated distributions for multi-unit auctions. Our techniques are generic and easily extend to other settings considered in the paper. Note, in Section 4, the BIC constraint of multi-unit auctions is stated as\n\ufffd q vi(q, ti)Xiq(ti) \u2212Pi(ti) \u2265 \ufffd q vi(q, ti)Xiq(t\u2032 i) \u2212Pi(t\u2032 i) \u2200i, ti, t\u2032 i \u2208Ti\n\ufffd where Xiqti and Piti are defined as\nfi(ti)Xiqti = \ufffd t|ti\u2208t \u00b5(t)xiq(t) \u2200i, q, ti \u2208Ti fi(ti)Piti = \ufffd t|ti\u2208t \u00b5(t)pi(t) \u2200i, ti \u2208Ti\n\ufffd The BIC constraint stated above requires independence across buyers. With correlated distributions, if buyer i\u2019s real type is ti and his reported type is t\u2032 i, then the probability that he is allocated q items is not necessarily Xiq(t\u2032 i); same holds for expected payments. With correlated distributions, these values need to computed explicitly. Fix buyer i; for each ti, t\u2032 i \u2208Ti, define Xiqtit\u2032 i as the probability that buyer i is allocated q items when his real type is ti and the reported type is t\u2032 i; Pitit\u2032 i is defined as buyer i\u2019s expected payment when his real type is ti and reported type is t\u2032 i. For each type vector t\u2212i of other buyers, let zitit\u2032 i(t\u2212i) = \u00b5(ti|t\u2212i) \u00b5(t\u2032 i|t\u2212i). We now simplify the value of Xiqtit\u2032 i.\n \ufffd Note, buyer i\u2019s type in t is t\u2032 i. Thus the problem reduces to checking the feasibility of followin constraints, denoted by EQ\n \ufffd te, buyer i\u2019s type in t is t\u2032 i. Thus the problem reduces to checking the feasibility of following\n   \ufffd subject to constraints F(t) for all t, and:\n  \ufffd q Xiqtitivi(q, ti) \u2212Pititi \u2265 \ufffd q Xiqtit\u2032 ivi,q(ti) \u2212Pitit\u2032 i \u2200i, ti, t\u2032 i \u2208Ti\n\ufffd i,ti\u2208Ti fi(ti)Pitit\u2032 i \u2265 R \u2200i, ti \u2208Ti\n\ufffd As before, the implementation of Oracle(\u03b1, \u03b2) requires solving A(\u03b1, \u03b2), which for each vector\n\ufffd As before, the implementation of Oracle(\u03b1, \u03b2) requires solving A(\u03b1, \u03b2), which for each vector t = (ti, t\u2212i) of types, maximizes:\n\ufffd i,q,t\u2032 i \u03b1iqt\u2032 itizit\u2032 iti(t\u2212i)xiq(t) + \ufffd i,t\u2032 i \u03b2it\u2032 itizit\u2032 iti(t\u2212i)pi(t)\nsubject to constraints F(t). This problem can be solved optimally using a dynamic program just as before. Running Time: Note that the width \u03c1 of the constraint EQ is linearly dependent upon maxi,ti,t\u2032 i\u2208Ti zitit\u2032 i(t\u2212i), denoted by zmax. The term zmax can be seen as the maximum ratio of conditional probabilities of two different types for a buyer, when the type vector of other buyers is fixed.\nject to constraints F(t). This problem can be solved optimally using a dynamic program just\nRunning Time: Note that the width \u03c1 of the constraint EQ is linearly dependent upon maxi,ti,t\u2032 i\u2208Ti zitit\u2032 i(t\u2212i) denoted by zmax. The term zmax can be seen as the maximum ratio of conditional probabilities of two different types for a buyer, when the type vector of other buyers is fixed.\nTheorem B.1. For multi-unit auctions with budgeted buyers and correlated distributions, if for any buyer i, conditioned of each type vector of other buyers t\u2212i, if the ratio of maximum and minimum probability of his two types is bounded by zmax, then there exists a polynomial (in zmax) time algorithm to compute a feasible, ex-post rational, \u01eb-BIC mechanism with expected revenue OPT \u2212\u01eb.\n# C Budget Feasible Mechanisms\nIn this section, we illustrate our results for designing budget feasible mechanisms. We first describe the setting: the auctioneer has a (hard) budget of B; we assume that B is an integer bounded by L. There are n agents, and each agent produces a different type of item. Each agent is associated with a private cost to produce the item; specifically, agent i\u2019s cost of producing his item is ci(t) where t is his type. The auctioneer\u2019s valuation of set of items S is given by a G(S) = \ufffd j\u2208S vj, i.e., linear in set S. The objective is to design a BIC mechanism that maximizes auctioneer\u2019s expected valuation of procured items such that (a) the auctioneer never pays more than B in any realization, and (b) the mechanism is ex-post IR for each agent, i.e. if the item from agent i of type t is procured, then he is paid at least ci(t). For simplicity in exposition, we assume {ci(ti)} are integers in {0, 1, 2, . . . , L}. Let t be the reported valuation vector. In the realization of the mechanism, let xi(t) denote whether the item is procured from agent i, and pi(t) be the payment made to agent i. The allocation and payments must be feasible for the following set of constraints, denoted by F(t):\nLet Xiti be the probability that agent i\u2019s item is procured when his type is ti; and Piti be the expected payment made to him in this case. Let S(t) denote the set of agents whose items are procured when the type vector is t. Let OPT be the auctioneer\u2019s expected valuation of the procured items. Then the problem reduces to checking feasibility of constraints:\n\ufffd  \ufffd subject to constraints F(t) for all t and:\nPiti \u2212ci(ti)Xiti \u2265 Pit\u2032 i \u2212ci(ti)Xit\u2032 i \u2200i, ti, t\u2032 i \u2208Ti\nAs in Section 4, we require implementation of Oracle(\u03b1, \u03b2, \u03b3) which involves solving A(\u03b1, \u03b2, \u03b3) where for each vector t of types, it computes:\nsubject to the constraints F(t). As earlier, \u03b1iti and \u03b2iti can be positive or negative, however \u03b3 is always positive. We now illustrate a polynomial time algorithm to solve this problem. Recall, S(t)\n(7)\nis the set of agents whose items are procured when the bid vector is t. Then for each i \u2208S(t), we have (a) \u03b2iti \u22640 \u21d2pi(t) = ci(ti), and (b) If there is at least one agent i \u2208S(t) such that \u03b2iti \u22650, then there exists at most one agent j = argmaxi\u2208S(t)\u03b2iti such that pj(t) > cj(tj), and then pj(t) = B \u2212\ufffd i\u2208S(t),i\u0338=j ci(ti); such an agent can be seen as the winner in the allocation. Clearly, if agent i is the winner of an allocation, then all agents j \u2208S(t) must have \u03b2jtj \u2264\u03b2iti. The algorithm is as follows: We guess one agent as the winner; let i be that agent. Let Si = {j|\u03b2jtj \u2264\u03b2iti}. The goal is to find a subset Q \u2286Si with the following properties: \u2022 i \u2208Q since we guess i as belonging to Q. \u2022 \ufffd j\u2208Q cj(tj) \u2264B, since Q must be budget feasible. \u2022 Oracle = \ufffd j\u2208Q,j\u0338=i \ufffd \u03b1jtj + (\u03b2jtj \u2212\u03b2iti)cj(tj) + \u03b3vj \ufffd + \u03b1iti + \u03b3vi + B\u03b2iti is maximized. This is now just a knapsack problem where the cj(tj) are item sizes; B is the knapsack capacity; and the profit of item j is \u03b1jtj + (\u03b2jtj \u2212\u03b2iti)cj(tj) + \u03b3vj. Since we assumed cj(tj) are integers in {0, 1, 2, . . . , L}, this can be solved in time polynomial in n, L. Thus we get the following theorem. Theorem C.1. When the auctioneer has additive valuation for the set of procured items, then there exists a poly-time algorithm to compute an ex-post IR, \u01eb-BIC mechanism with expected revenue OPT \u2212\u01eb. When the costs ci(t) are not integers, we can discretize them for the purpose of solving the knapsack instance. This leads to a violation of the budget B by an additive amount \u01eb, but otherwise our result remains unchanged. Our results also extends to the setting where the auctioneer is interested in procuring m = O(1) items, and has arbitrary valuations G(S) on subsets S of items of constant size.\n \ufffd \u2022 Oracle = \ufffd j\u2208Q,j\u0338=i \ufffd \u03b1jtj + (\u03b2jtj \u2212\u03b2iti)cj(tj) + \u03b3vj \ufffd + \u03b1iti + \u03b3vi + B\u03b2iti is maximized.\n \ufffd \ufffd \ufffd This is now just a knapsack problem where the cj(tj) are item sizes; B is the knapsack capacity and the profit of item j is \u03b1jtj + (\u03b2jtj \u2212\u03b2iti)cj(tj) + \u03b3vj. Since we assumed cj(tj) are integers in {0, 1, 2, . . . , L}, this can be solved in time polynomial in n, L. Thus we get the following theorem.\n",
    "paper_type": "method",
    "attri": {
        "background": "This paper addresses the issue of designing optimal Bayesian Incentive Compatible (BIC) auctions, particularly focusing on the computational complexity associated with existing methods, which often depend on the size of the joint type space of all buyers. The authors highlight that previous solutions have been limited in their applicability due to this complexity, prompting the need for a new approach that simplifies the auction design process while ensuring optimal outcomes.",
        "problem": {
            "definition": "The problem at hand is to create BIC auctions that are computationally efficient, ensuring that the design can accommodate constraints such as individual rationality and budget limitations while maximizing revenue.",
            "key obstacle": "The primary challenge is the exponential time complexity associated with existing methods that rely on the joint type space of all buyers, making it impractical for larger auctions with more participants."
        },
        "idea": {
            "intuition": "The authors are inspired by the multiplicative weight update method, which has been successful in various optimization problems, leading them to explore its application in auction design.",
            "opinion": "The proposed idea is to utilize the multiplicative weight update method to simplify the auction design process, allowing for the creation of optimal BIC auctions that are computationally efficient.",
            "innovation": "The main innovation is the reduction of the auction design problem to single-bidder optimization problems, significantly decreasing the running time to depend solely on parameters related to individual buyers rather than the entire buyer set."
        },
        "method": {
            "method name": "Multiplicative Weight Update Method for Auction Design",
            "method abbreviation": "MWUM-AD",
            "method definition": "This method employs the multiplicative weight update framework to design optimal auctions by connecting ex-interim and ex-post variables, thereby reducing the computational complexity to be polynomial in individual buyer parameters.",
            "method description": "The core of the method involves formulating a program that links various auction variables and optimizes them using the multiplicative weight update technique.",
            "method steps": [
                "Define the auction parameters and constraints.",
                "Apply the multiplicative weight update method to derive the optimal auction mechanism.",
                "Solve the resulting optimization problems iteratively to ensure compliance with BIC and individual rationality constraints."
            ],
            "principle": "The method is effective because it leverages the structure of the auction problem, allowing for a reduction in complexity and making it feasible to design auctions that satisfy stringent constraints."
        },
        "experiments": {
            "evaluation setting": "The experiments were conducted using various auction settings, including multi-unit auctions with hard budget constraints and non-linear utility functions for buyers and sellers.",
            "evaluation method": "The performance of the proposed method was assessed through simulations that compared the revenue generated by the MWUM-AD against traditional auction methods, ensuring that the results adhered to BIC and individual rationality constraints."
        },
        "conclusion": "The experiments demonstrated that the multiplicative weight update method significantly improves the efficiency of designing optimal BIC auctions, achieving results that are both computationally feasible and economically advantageous.",
        "discussion": {
            "advantage": "The key advantage of the proposed method is its ability to handle complex auction scenarios with constraints while maintaining a polynomial time complexity, making it suitable for larger auctions.",
            "limitation": "One limitation is that the method may not be applicable in scenarios with highly correlated buyer valuations, as the assumptions made during the optimization may not hold.",
            "future work": "Future research could explore further refinements of the method to enhance its applicability in correlated settings and investigate the potential for extending the framework to other auction types."
        },
        "other info": {
            "authors": [
                {
                    "name": "Kamesh Munagala",
                    "affiliation": "Duke University"
                },
                {
                    "name": "Sreenivas Gollapudi",
                    "affiliation": "Microsoft Research"
                },
                {
                    "name": "A. Bhalgat",
                    "affiliation": "University of Pennsylvania"
                }
            ],
            "funding": "Supported by NSF grants and other research fellowships."
        }
    },
    "mount_outline": [
        {
            "section number": "1. Introduction",
            "key information": "This paper addresses the issue of designing optimal Bayesian Incentive Compatible (BIC) auctions, particularly focusing on the computational complexity associated with existing methods."
        },
        {
            "section number": "2. Background and Definitions",
            "key information": "The problem at hand is to create BIC auctions that are computationally efficient, ensuring that the design can accommodate constraints such as individual rationality and budget limitations while maximizing revenue."
        },
        {
            "section number": "3. Algorithmic Bias",
            "key information": "The primary challenge is the exponential time complexity associated with existing methods that rely on the joint type space of all buyers, making it impractical for larger auctions with more participants."
        },
        {
            "section number": "4. Ethical AI",
            "key information": "The proposed idea is to utilize the multiplicative weight update method to simplify the auction design process, allowing for the creation of optimal BIC auctions that are computationally efficient."
        },
        {
            "section number": "5. Model Interpretability",
            "key information": "The core of the method involves formulating a program that links various auction variables and optimizes them using the multiplicative weight update technique."
        },
        {
            "section number": "6. Responsible AI",
            "key information": "The experiments demonstrated that the multiplicative weight update method significantly improves the efficiency of designing optimal BIC auctions, achieving results that are both computationally feasible and economically advantageous."
        },
        {
            "section number": "8. Future Directions",
            "key information": "Future research could explore further refinements of the method to enhance its applicability in correlated settings and investigate the potential for extending the framework to other auction types."
        }
    ],
    "similarity_score": 0.5341838070684997,
    "image": null,
    "path": "/home/dany/codes/autosurvey/outputs/2025-01-15-0337_algor/papers/Optimal Auctions via the Multiplicative Weight Method.json"
}