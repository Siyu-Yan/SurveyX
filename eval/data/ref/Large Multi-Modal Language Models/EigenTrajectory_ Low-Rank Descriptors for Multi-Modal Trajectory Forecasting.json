{
    "from": "arxiv",
    "scholar_id": null,
    "detail_id": "arXiv:2307.09306",
    "title": "EigenTrajectory: Low-Rank Descriptors for Multi-Modal Trajectory Forecasting",
    "abstract": "Capturing high-dimensional social interactions and feasible futures is essential for predicting trajectories. To address this complex nature, several attempts have been devoted to reducing the dimensionality of the output variables via parametric curve fitting such as the B\u00b4ezier curve and Bspline function. However, these functions, which originate in computer graphics fields, are not suitable to account for socially acceptable human dynamics. In this paper, we present EigenTrajectory (ET), a trajectory prediction approach that uses a novel trajectory descriptor to form a compact space, known here as ET space, in place of Euclidean space, for representing pedestrian movements. We first reduce the complexity of the trajectory descriptor via a low-rank approximation. We transform the pedestrians\u2019 history paths into our ET space represented by spatio-temporal principle components, and feed them into off-the-shelf trajectory forecasting models. The inputs and outputs of the models as well as social interactions are all gathered and aggregated in the corresponding ET space. Lastly, we propose a trajectory anchor-based refinement method to cover all possible futures in the proposed ET space. Extensive experiments demonstrate that our EigenTrajectory predictor can significantly improve both the prediction accuracy and reliability of existing trajectory forecasting models on public benchmarks, indicating that the proposed descriptor is suited to represent pedestrian behaviors. Code is publicly available at https: //github.com/inhwanbae/EigenTrajectory.",
    "bib_name": "bae2023eigentrajectorylowrankdescriptorsmultimodal",
    "md_text": "# EigenTrajectory: Low-Rank Descriptors for Multi-Modal Trajectory Forecasting\nInhwan Bae1* Jean Oh2 Hae-Gon Jeon1\u2020 1GIST AI Graduate School 2Carnegie Mellon University\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/013a/013a261f-b5de-4e3f-953b-f1b570e0973e.png\" style=\"width: 50%;\"></div>\n# Abstract\nCapturing high-dimensional social interactions and feasible futures is essential for predicting trajectories. To address this complex nature, several attempts have been devoted to reducing the dimensionality of the output variables via parametric curve fitting such as the B\u00b4ezier curve and Bspline function. However, these functions, which originate in computer graphics fields, are not suitable to account for socially acceptable human dynamics. In this paper, we present EigenTrajectory (ET), a trajectory prediction approach that uses a novel trajectory descriptor to form a compact space, known here as ET space, in place of Euclidean space, for representing pedestrian movements. We first reduce the complexity of the trajectory descriptor via a low-rank approximation. We transform the pedestrians\u2019 history paths into our ET space represented by spatio-temporal principle components, and feed them into off-the-shelf trajectory forecasting models. The inputs and outputs of the models as well as social interactions are all gathered and aggregated in the corresponding ET space. Lastly, we propose a trajectory anchor-based refinement method to cover all possible futures in the proposed ET space. Extensive experiments demonstrate that our EigenTrajectory predictor can significantly improve both the prediction accuracy and reliability of existing trajectory forecasting models on public benchmarks, indicating that the proposed descriptor is suited to represent pedestrian behaviors. Code is publicly available at https: //github.com/inhwanbae/EigenTrajectory.\n# 1. Introduction\nTrajectory prediction involves forecasting the future footsteps of agents based on their past movements. This task is considered one of the core technologies for autonomous navigation, social robot platforms and surveillance systems. Many existing approaches [1, 2, 5, 10, 15, 19, 28, 35, 36, 37,40,48,55,69,73,74,77,101,108,109] design their prediction models in the Euclidean space, i.e., to directly infer\n<div style=\"text-align: center;\"></div>\nFigure 1. A common pipeline of trajectory prediction models and the proposed EigenTrajectory. For each observation, (a) existing models predict future trajectories using the raw data in Euclidean space; (b) our approach transforms the raw data into our ET space, then captures the social interaction and predicts the coefficient of our trajectory descriptor.\na sequence of 2D coordinates of future frames. These approaches force the models to learn both informative behavioral features and their motion dynamics from raw trajectory data. Such direct predictions can intuitively describe agents\u2019 behaviors in the temporal series of spatial coordinates; however, in a higher-dimensional space, it is hard for the models to determine explanatory features. Recent works have described the pedestrian\u2019s movements using trajectory descriptors instead of dealing with all raw coordinate information. Inspired by human beings traveling pathways with a higher level of connotation (e.g., a person who gradually decelerates to turn right, or makes a sharp turn while going straight) [66], parametric curve functions are introduced. In particular, Hug et al. [22,23] introduce the B\u00b4ezier curve, and Jazayeri and Jahangiri [25] propose a B-spline curve-based representation for effectively modeling continuous-time trajectories. These methods successfully reduce the dimensionality of trajectories by abstractly representing lengthy sequential coordinates in a spatial domain using a smaller set of key points. It is, however, unclear how well these parametric functions can capture human motions and behaviors as they have been designed for computer graphics [17,62,71] and part modeling [86,89,91]. In this paper, departing from existing parametric curve functions, we present an intuitive trajectory descriptor that is learnable from real-world human trajectory data as illus-\ntrated in Fig. 1. First, we decompose a stacked trajectory sequence using Singular Value Decomposition (SVD). To represent the data concisely, we reduce the dimensionality by performing the best rank-k approximation. Through this process, all trajectories can be approximated as a linear combination of k eigenvectors, which we call EigenTrajectory (ET) descriptor. Next, we aggregate the social interaction features and then predict the coefficients of the eigenvectors for the future path in the same space. Here, after clustering the coefficients, a set of trajectory anchors, which can be interpreted as the coefficient candidates, is used to ensure a diversity of prediction paths. Finally, trajectory coordinates can be reconstructed through the matrix multiplication of the eigenvector and the coefficients. Experimental results demonstrate that the proposed EigenTrajectory (ET) descriptor can successfully represent the pedestrian motion dynamics and significantly improve the prediction accuracy of existing prediction models on various public benchmarks.\n# 2. Related Works\n# 2.1. Pedestrian Trajectory Prediction\nPioneering works [20,53,61,98] model pedestrian movements following the social force theory or energy minimization to describe surrounding interactions and future movements. Since then, there have been significant advances in both social interaction and motion modeling with the introduction of Convolutional Neural Networks (CNNs) and Recurrent neural networks (RNNs) for trajectory prediction. One pioneering work is Social-LSTM [1], which introduces a long short-term memory (LSTM) to recurrently predict future coordinates. Agent\u2019s LSTM hidden states are shared with each other by a social pooling mechanism which leverages a neighbor\u2019s hidden state information inside a spatial grid. Attention mechanisms [16,24,69,84] are also used to directly share social relations based on neighbors\u2019 influence. Better prediction results are achievable when using additional surveillance view images [12,13,14,28,41,47,49,50, 51,68,70,77,78,80,82,97,103,107]. Recently, graph neural network-based methods, which define a graph representation with pedestrian nodes and interaction edges, are successfully incorporated into the trajectory prediction. Graph Convolutional Networks (GCNs) [2,27,55,78], Graph Attention networks (GATs) [5, 21, 28, 39, 40, 73, 83], and transformers [4, 18, 57, 88, 90, 101, 102] are utilized to update the graph-structured pedestrian features. From the perspective of trajectory forecasting, probabilistic inferences are studied for multi-modal trajectory prediction. Gaussian modeling [1,2,36,55,73,74,75,95,99,101] estimates the bi-variate parameters of distribution to represent the possibility of moving routes. The Generative Adversarial Network (GAN) [12, 19, 21, 28, 38, 42, 68, 77, 107] introduces additional discriminators to generate realistic paths.\nConditional Variational AutoEncoder (CVAE)-based methods [7, 11, 24, 30, 31, 35, 48, 69, 79, 85, 92, 94] utilize random latent vectors as features for each person\u2019s walking direction and speed. They infer future trajectories recurrently [1,8,11,18,19,30,46,52,58,63,69,96,104,106] or simultaneously [2, 3,37, 55,72, 73] in common. These approaches directly infer spatial coordinates in the Euclidean space without interpretable abstraction, which can suffer from an overfitting problem due to high dimensionality, and noisy paths can be generated as illustrated in Fig. 2.\n# 2.2. Parametric Trajectory Descriptor\nTo achieve a high-level abstraction of trajectory data, several recent works have introduced parametric trajectory descriptors. Hug et al. [23] propose a probabilistic, parametric N-curve model based on the B\u00b4ezier curve. To generate multi-modal predictions, multiple curves are computed from the Gaussian mixture model of random variables. Hug et al. [22] also introduce a variation of the Mixture Density Networks which is operated in the B\u00b4ezier curve domain instead of the raw data. A Gaussian process-based refinement framework is adopted in their model. Alternatively, another work in [25] represents each trajectory using a B-spline curve, and predicts the coefficients of this curve with the CVAE and inverse reinforcement learning. The B\u00b4ezier curve and B-spline use a Bernstein polynomial and piecewise polynomial as basis functions, respectively. These methods interpolate points on the curve through a weighted sum of a set of control points, but are still costly because it requires a large number of two-dimensional control points. One possible way to tackle this is to use polynomial curves; however, there are limitations on the precise path representations, and the abstract polynomial coefficients are difficult to learn. More fundamentally, although these works can successfully predict a temporally-smooth walking path using well-known curve functions, such parametric descriptors may be hard to fit irregular trajectories of human pedestrians.\n# 3. Methodology\nOur approach aims at learning an intuitive abstraction of human movements. To overcome the limited naturalness of parametric curves, we adopt a data-driven approach to leverage the distributions of human trajectories in the realworld data. Additionally, to address the dimensionality issue, we propose a low-rank approximation strategy to succinctly represent human trajectories in a more compact space than the Euclidean space. We achieve our goals by creating a novel trajectory descriptor specialized for representing human movements. We start with a definition of trajectory prediction in Sec. 3.1. We then introduce the mathematical formulations of ET descriptor and transformations between the\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/3827/3827fc23-42c1-444d-b0e4-c6a67b65ae61.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/f07a/f07a8965-8ae6-431f-8302-933c29cc9e87.png\" style=\"width: 50%;\"></div>\nFigure 2. Visualization of the trajectory prediction strategies. The most widely used method is to directly predict 12 future raw points. The B\u00b4ezier curve and B-spline are defined by a set of control points, and roughly model the movements. Our method can accurately represent pedestrian paths with a linear combination of our novel ET descriptors.\nEuclidean and ET spaces in Sec. 3.2. Using our descriptor, we describe how well existing trajectory forecasting baseline models can be operated in our novel space in Sec. 3.3.\n# 3.1. Problem Definition\nThe problem of trajectory prediction involves forecasting the future paths of agents in an environment from their path histories. Here, a trajectory can be represented by a temporal series of spatial points. Formally, the observation trajectory with length Tobs can be represented as An ={(xt n, yt n) | t\u2208 [1, ..., Tobs]}, where (xt n, yt n) is the 2D spatial coordinate of a pedestrian n at specific time t. Similarly, a ground truth future trajectory for prediction time length Tpred can be defined as Bn = {(xt n, yt n) | t \u2208[Tobs+1, ..., Tpred]}. A trajectory problem is defined as a pair [A, B]. The goal of a forecasting model is to predict s possible multi-modal future trajectories \u02c6 Bs given observation A as input.\n# 3.2. EigenTrajectory (ET ET ET) Descriptor\nInspired by successful uses of Eigenvalue decomposition and Singular Value Decomposition (SVD) in extracting key feature information from raw data in various domains [26, 33,34,60,76,81,87], we propose an SVD-based approach for representing the gist of human trajectories. We assume that pedestrian movements are mainly represented by directions and speed variations that can be captured via principal components in the data. Since a little noise from people\u2019s staggering or tracking can also be added into the representation, we assume that using the top k components in the eigenvectors would be sufficient to correspond to the raw trajectory data. To fully benefit from the successful dimensionality reduction of SVD, we also apply it into our framework to represent spatio-temporal trajectory data as a linear combination of a set of eigenvectors. The proposed ET descriptor consists of two elements: k most representative singular vectors of trajectories and their combination coefficients that can explain any given trajectory.\nFigure 3. Visualization of the first six ET descriptors u1, u2, ..., u6 learned from the ETH/UCY dataset. The top row shows the examples of the ET descriptors in 2D Euclidean space. The middle and bottom rows illustrate the temporal variations of the x and y positions, respectively.\nMathematical formulation. To make an efficient trajectory descriptor, we need to find the principal components of the trajectory distribution. In mathematical terms, our goal is to obtain the eigenvectors of a covariance matrix from raw trajectory data. We first construct the trajectory matrices A and B by stacking all pedestrians\u2019 observations and predicted trajectories from a training set. We then apply SVD to both trajectory matrices A and B as follows:\nA = Uobs\u03a3obsV \u22a4 obs, B = Upred\u03a3predV \u22a4 pred,\n(1)\nwhere U=[u1, \u00b7 \u00b7 \u00b7 , uL] and V =[v1, \u00b7 \u00b7 \u00b7 , vN] are orthogonal matrices and \u03a3 is a diagonal matrix, consisting of singular values \u03c31 \u2265\u03c32 \u2265\u00b7 \u00b7 \u00b7\u2265\u03c3r >0. Here, L is the number of dimensions (i.e., the number of parameters) of the trajectory, L = 2 \u00d7 Tobs for observation and L = 2 \u00d7 (Tpred \u2212Tobs) for the predicted trajectory. N is the number of pedestrians in the whole dataset, and r is the rank of A and B. Since each trajectory can be more or less dominant to form a unique eigenvector, the resulting eigenvectors can be considered as a set of motion features that can jointly characterize trajectory variations. Rank-k approximation. Based on the assumption that human trajectories can be described using a few key parameters on directions and speed, we can approximate trajectory \u02dc An using a linear combination of the first k left singular vectors Uk = u1, \u00b7 \u00b7 \u00b7 , uk as:\nwhere cobs,n denotes a set of coefficients specifying the relevance of each principal component and \u02dc An is known as the best rank-k approximation of A. Here, k representative vectors are the eigenvectors of trajectories AA\u22a4that is used to summarize the raw trajectories in our trajectory prediction approach. We apply the same approximation to the predicted trajectory B as follows:\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/5de3/5de343b7-b965-485b-b8ed-7c5ede714e05.png\" style=\"width: 50%;\"></div>\nThey can be regarded as the k principal components. A pair (cn, Uk) of the coefficients and rank-k singular vectors constitutes the ET descriptor. In Fig. 3, we visualize the ET descriptors for predicted trajectory B and k = 6 where the trajectories represented in rank-k vectors explain the spatial displacement of pedestrians over time. Specifically, u1 and u2 encode the constant velocity motion in the x and y directions, respectively. The reason why both eigenvectors appear first is that most people in the dataset walk at a constant speed while maintaining their directions. Next, u3 and u4 show velocity changes in the x and y-axis directions, respectively. Using the combination of the vectors, it is feasible to learn complex movements, e.g., a person is going straight in the beginning, but then slows down or turns left/right. In u5 and u6, we also observe a velocity change, but ET descriptors can represent a more detailed trajectory by combining them with the previous eigenvector. We call the space spanned by ET descriptors as the ET space. Transformation between spaces. Using the ET descriptors, we can project a trajectory defined in Euclidean space into the ET space. Given trajectories An and Bn, we project it as:\n(4)\nwhere c is a coefficient vector defined in the ET space. Each coefficient determines how much a corresponding ET descriptors affects a pedestrian path. Obviously, the inverse transformation of Eq. (4) is available. At this time, the reconstructed path is low-rank approximated. Since U is an orthogonal matrix, it can be invertible through a transpose operation as follows:\n(5)\n\ufffd \ufffd As visualized in Fig. 4, a simple straight path can be expressed with only one ET descriptor (k = 1). However, the more complex the trajectory, the larger value of k is needed. Nevertheless, most paths can be represented just with k, which is small enough compared to the original trajectory dimension k \u2264L.\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/630e/630e4e0b-d630-4796-82ff-f78991307740.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Figure 5. An overview of the trajectory anchor generation and anchor refinement step in our ET space.</div>\n# 3.3. Forecasting in the ET ET ET Space\nUsing the ET descriptor and transformation operators, we optimize each module designed for trajectory forecasting in our ET space. In addition, we propose a trajectory anchor to ensure the diversity of the predicted trajectories. This enables the off-the-shelf forecasting model to take the full benefits of the ET descriptor in an end-to-end manner. Trajectory prediction using the ET ET ET descriptor. Given a trajectory prediction problem [A, B], using Eqs. (2) and (3), we use the training data to compute the ET descriptors for the observed and predicted trajectories, denoted by (cobs,n, Uobs,k) and (cpred,n, Upred,k), respectively. Trajectory anchor generation. Anchor-based methods are widely used in various fields, especially object detection [43, 64]. In the trajectory prediction, social anchors, offering the interpretability of egocentric characteristics, are introduced in [9, 29, 93, 105]. However, these approaches mainly use hand-crafted anchors and work in Euclidean or Polar coordinate systems. In this paper, we introduce a datadriven anchor used in our novel ET space, which covers all feasible and diverse multi-modal futures. We first normalize the translation, rotation, and speed of the trajectories in the training dataset as visualized in Fig. 5. Next, we project all normalized N paths into the ET space using Eq. (4). We then cluster them in the ET space instead of using them in the original Euclidean space. Since there is a duality between the Euclidean space and the ET space with an isometry U \u22a4 pred,k, the distance between the trajectories in the Euclidean space \u2225\ufffd Bi\u2212\ufffd Bj\u2225is equal to those between the corresponding coefficient vectors in the ET space \u2225cpred,i \u2212 cpred,j\u2225. Hence, the clustering can be performed to yield the same results in both spaces, but it can be done more reliably and more efficiently in the ET space. Note that the clustering becomes more difficult because of the well-known curse of dimensionality [6,54] and this process is executed once at the initialization step before training the model. We use these clustered s centroids \u00afcs n as a trajectory coefficient anchor, and compute the correction offset for refinement in the prediction module. Observations in the ET ET ET space. As a next step, we project the input observed path into the ET space using the ET descriptor Uobs,k calculated in Eq. (2) and transformation function in Eq. (4). This higher level of abstraction for the input data representations according to the change of the trajec-\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/a6e5/a6e52d10-6855-4e66-820e-5fd102f9a7ef.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\"></div>\n<div style=\"text-align: center;\"></div>\nFigure 6. Illustration of the social interaction modeling strategies. (a) Social interactions between pedestrians are captured and gathered for each footstep in the Euclidean space. (b) The intra- and inter-personal interactions are modeled by ET descriptor coefficients in our ET space.\ntory descriptor has a fundamental impact on the design of subsequent modules. In addition, the forecasting model can focus on the principal component of physical movements and has an additional effort of trajectory noise suppression by reducing the dimensionality. History encoder in the ET ET ET space. The set of ET descriptor coefficients for the observation is then fed to the trajectory forecasting model as input. Since the Euclidean coordinate sequence An can be transformed into a linear combination of ET descriptors cobs,n, the model is able to omit a process for finding physical motion properties from the raw point and to immediately use the movement patterns. Interaction modeling in the ET ET ET space. Since the method for the trajectory description uses the ET space, it is necessary to define social interactions in the same space. The recent models try to design interaction modules through a separation of the social relations between agents into spatial and temporal perspectives [55,73,101]. We map these spatial and temporal interactions one-to-one. To do this, we extract both the inter-personal and intra-personal interactions from our ET space, as illustrated in Fig. 6. In the inter-personal point of view, the relation between agents is captured with respect to the coefficients. Here, people with similar coefficients may be peers walking in a same direction; otherwise, they may need to avoid collisions. This information from each coefficient dimension is then aggregated in the intrapersonal interaction stage to capture a rich social relation feature. We directly utilize the well-designed GNN and attention mechanism of the existing off-the-shelf models in our system with only a minor change for the dimension. Extrapolation decoder in the ET ET ET space. With the rich features in the ET space, we also predict future trajectories in the same space. To fully reflect the multi-modal and nonlinear characteristics of human motions, we introduce the trajectory anchor-based method defined in the preparation stage. Using the trajectory anchor, the model predicts the correction vector f, which has the same shape as the anchor. This correction vector is added to the initial value of the trajectory anchor to obtain the final s trajectory coefficients as follows: \u02c6cs  = \u00afcs  + f s . (6)\n# Interaction modeling in the ET ET ET space. Since the met\n ET ET ET for the trajectory description uses the ET space, it is necessary to define social interactions in the same space. The recent models try to design interaction modules through a separation of the social relations between agents into spatial and temporal perspectives [55,73,101]. We map these spatial and temporal interactions one-to-one. To do this, we extract both the inter-personal and intra-personal interactions from our ET space, as illustrated in Fig. 6. In the inter-personal point of view, the relation between agents is captured with respect to the coefficients. Here, people with similar coefficients may be peers walking in a same direction; otherwise, they may need to avoid collisions. This information from each coefficient dimension is then aggregated in the intrapersonal interaction stage to capture a rich social relation feature. We directly utilize the well-designed GNN and attention mechanism of the existing off-the-shelf models in our system with only a minor change for the dimension. Extrapolation decoder in the ET ET ET space. With the rich features in the ET space, we also predict future trajectories in the same space. To fully reflect the multi-modal and nonlinear characteristics of human motions, we introduce the trajectory anchor-based method defined in the preparation stage. Using the trajectory anchor, the model predicts the correction vector f, which has the same shape as the anchor. This correction vector is added to the initial value of the trajectory anchor to obtain the final s trajectory coefficients as follows:\nfeatures in the ET space, we also predict future trajectories in the same space. To fully reflect the multi-modal and nonlinear characteristics of human motions, we introduce the trajectory anchor-based method defined in the preparation stage. Using the trajectory anchor, the model predicts the correction vector f, which has the same shape as the anchor. This correction vector is added to the initial value of the trajectory anchor to obtain the final s trajectory coefficients as follows:\n(6)\nDescriptor\nDim\nETH\nHOTEL\nUNIV\nZARA1\nZARA2\nAVG\nLinear interpolation\n4\n386 / 703 143 / 215 163 / 344 256 / 426 155 / 232 221 / 384\nB\u00b4ezier curve [22,23]\n12\n24 / 47\n17 / 23\n18 / 20\n18 / 19\n18 / 18\n19 / 25\nB-spline [25]\n12\n25 / 45\n19 / 24\n21 / 21\n20 / 20\n21 / 20\n21 / 26\nET\nET\nET descriptor\n4\n40 / 107\n20 / 36\n14 / 45\n13 / 38\n08 / 28\n19 / 51\n6\n27 / 65\n14 / 27\n08 / 23\n07 / 20\n04 / 14\n12 / 30\n8\n19 / 50\n11 / 23\n05 / 15\n04 / 12\n03 / 09\n08 / 22\n10\n13 / 39\n07 / 20\n03 / 11\n03 / 09\n02 / 06\n06 / 17\n12\n06 / 33\n03 / 17\n01 / 08\n01 / 07\n01 / 05\n03 / 14\nTable 1. Comparison of the trajectory approximation accuracy of\nTable 1. Comparison of the trajectory approximation accuracy of each descriptor. Both the observation and the prediction are curves fitted or approximated to each descriptor, reconstructed in the Euclidean space to fairly measure the error. The averaged L2 distances between ground truth and reconstructed trajectory points are reported (Observation/prediction, Dim: Dimension of descriptor, Unit: mm). Bold: Best, underline: Second best.\nReconstruction in the Euclidean space. As a last step, we reconstruct the s refined coefficients \u02c6cs pred,n, and convert them into the full trajectory points. For a fair comparison with the existing methods, we transform the model output to the original Euclidean coordinate system using Eq. (5). Note that in the inference stage, we utilize Uobs and Upred obtained from the training datasets for the transformation and reconstruction. The reconstructed trajectories are then used for loss functions and evaluation metrics.\n# 3.4. Implementation Details\nWe incorporate our ET into six state-of-the-art pedestrian trajectory forecasting baselines [48,55,56,59,73,102]. To validate the generality of our ET space, we simply change the size of the input and output channel dimensions of them. We use a loss function which is a linear combination of three terms to train our EigenTrajectory models. First, we measure a Frobenius norm between the refined coefficients cpred,n to regress the ground truth coefficient cpred. Here, the winnertakes-all process [67] is chosen to back-propagate only to the closest trajectory anchors for the training:\n(7)\n\ufffd \ufffd Next, we calculate a Euclidean norm between the reconstructed path and the ground-truth raw coordinate, and then average them along a time axis as shown below:\n\ufffd\ufffd\ufffd (8)\n\ufffd \ufffd Lastly, we impose an additional penalty for the last prediction frame. The ground-truth coefficient cpred obtained by the low-rank approximation tends to be more careless for the endpoint because it is designed to minimize the error of the whole path. We thus penalize the endpoint coordinate so\nSTGCNN [55]\nEigenTrajectory - STGCNN\nSGCN [73]\nEigenTrajectory - SGCN\nADE \u2193\nFDE \u2193\nTCC \u2191\nCOL \u2193\nADE \u2193\nFDE \u2193\nTCC \u2191\nCOL \u2193\nGain \u2191\nADE \u2193\nFDE \u2193\nTCC \u2191\nCOL \u2193\nADE \u2193\nFDE \u2193\nTCC \u2191\nCOL \u2193\nGain \u2191\nETH\n0.650\n1.097\n0.510\n1.804\n0.365\n0.582\n0.471\n1.050\n46.9%\n0.567\n0.997\n0.545\n1.686\n0.360\n0.565\n0.438\n1.160\n43.3%\nHOTEL\n0.496\n0.858\n0.270\n3.936\n0.147\n0.220\n0.272\n1.700\n74.3%\n0.308\n0.533\n0.295\n2.523\n0.131\n0.210\n0.269\n1.752\n60.7%\nUNIV\n0.441\n0.798\n0.637\n9.691\n0.246\n0.427\n0.751\n8.548\n46.5%\n0.374\n0.668\n0.689\n6.846\n0.244\n0.428\n0.791\n8.362\n35.9%\nZARA1\n0.341\n0.532\n0.710\n2.528\n0.217\n0.393\n0.808\n1.396\n26.1%\n0.285\n0.508\n0.746\n0.791\n0.200\n0.347\n0.841\n1.147\n31.6%\nZARA2\n0.305\n0.482\n0.394\n7.150\n0.168\n0.290\n0.645\n6.212\n39.7%\n0.225\n0.422\n0.491\n2.234\n0.153\n0.261\n0.611\n5.892\n38.1%\nAVG\n0.447\n0.753\n0.504\n5.022\n0.229\n0.383\n0.589\n3.781\n49.2%\n0.352\n0.626\n0.553\n2.816\n0.218\n0.362\n0.590\n3.663\n42.1%\nSDD\n20.76\n33.18\n0.471\n0.679\n8.11\n13.35\n0.578\n0.541\n59.8%\n11.42\n18.96\n0.570\n4.450\n8.05\n13.25\n0.582\n0.541\n30.1%\nGCS\n14.72\n23.87\n0.698\n3.921\n8.45\n14.49\n0.834\n3.354\n39.3%\n11.18\n20.65\n0.777\n1.450\n7.86\n13.38\n0.849\n3.145\n35.2%\nPECNet [48]\nEigenTrajectory - PECNet\nAgentFormer [102]\nEigenTrajectory - AgentFormer\nADE \u2193\nFDE \u2193\nTCC \u2191\nCOL \u2193\nADE \u2193\nFDE \u2193\nTCC \u2191\nCOL \u2193\nGain \u2191\nADE \u2193\nFDE \u2193\nTCC \u2191\nCOL \u2193\nADE \u2193\nFDE \u2193\nTCC \u2191\nCOL \u2193\nGain \u2191\nETH\n0.610\n1.073\n0.596\n3.076\n0.365\n0.572\n0.580\n1.215\n46.7%\n0.456\n0.797\n0.594\n1.105\n0.362\n0.568\n0.487\n1.105\n28.7%\nHOTEL\n0.222\n0.390\n0.335\n5.689\n0.132\n0.211\n0.298\n1.192\n45.9%\n0.142\n0.222\n0.363\n0.579\n0.147\n0.222\n0.267\n1.866\n-0.1%\nUNIV\n0.335\n0.558\n0.752\n3.804\n0.244\n0.432\n0.765\n8.310\n22.6%\n0.254\n0.454\n0.775\n4.636\n0.244\n0.430\n0.747\n8.416\n5.4%\nZARA1\n0.250\n0.448\n0.808\n2.993\n0.195\n0.348\n0.828\n0.996\n22.4%\n0.176\n0.303\n0.839\n0.235\n0.216\n0.397\n0.808\n1.416\n-31.1%\nZARA2\n0.186\n0.332\n0.596\n4.910\n0.143\n0.250\n0.628\n2.817\n24.8%\n0.141\n0.237\n0.565\n1.186\n0.166\n0.290\n0.731\n6.010\n-22.1%\nAVG\n0.321\n0.560\n0.617\n4.094\n0.216\n0.362\n0.620\n2.906\n35.3%\n0.234\n0.403\n0.627\n1.548\n0.227\n0.381\n0.608\n3.763\n5.3%\nSDD\n9.97\n15.89\n0.647\n1.444\n8.12\n13.10\n0.575\n2.970\n17.6%\n8.68\n14.92\n0.608\n0.379\n8.10\n13.43\n0.590\n0.562\n10.0%\nGCS\n17.08\n29.30\n0.708\n2.866\n7.42\n12.49\n0.888\n2.970\n57.4%\n10.18\n16.91\n0.840\n2.319\n8.41\n14.56\n0.889\n3.263\n13.9%\nTable 2. Comparison between EigenTrajectory and the Eucledian space for four state-of-the-art multi-modal trajectory prediction models,\nTable 2. Comparison between EigenTrajectory and the Eucledian space for four state-of-the-art multi-modal trajectory p Social-STGCNN [55], SGCN [73], PECNet [48] and AgentFormer [102]. The models are evaluated on the ETH [61], UC and GCS [100] datasets. Gain: performance improvement w.r.t FDE over the baseline models, Unit for ADE and FDE: m\nthat the model can learn to infer the correct destination:\n(9)\n\ufffd\ufffd\ufffd \ufffd\ufffd The final loss function is a linear combination of the three losses L = Lcoeff + \u03b1Ldist + \u03b2Lend. We empirically set \u03b1 and \u03b2 to 1. We train our EigenTrajectory models with the AdamW optimizer [45] with a batch size of 128 and a learning rate of 0.001 for 256 epochs. The training time takes about a day on a machine with an NVIDIA 3090 GPU.\n# 4. Experiments\nIn this section, we conduct comprehensive experiments on public benchmark datasets to verify the efficiency of our ET descriptor and the effectiveness of the ET space for the trajectory prediction. We first describe our experimental setup briefly in Sec. 4.1. We then provide comparison results with other trajectory descriptors, various baselines, and stateof-the-art models in Sec. 4.2. Finally, we present the results of an extensive ablation study demonstrating the effect of each component of our method in Sec. 4.3.\n# 4.1. Experimental Setup\nDatasets. We conduct experiments on four public datasets: ETH [61], UCY [32], Stanford Drone Dataset (SDD) [65], and the Grand Central Station (GCS) [100] datasets to compare our EigenTrajectory with state-of-the-art baselines and to check the performance improvement for trajectory forecasting. The ETH and UCY datasets consist of pedestrian trajectories across five unique scenes (ETH, Hotel, Univ, Zara1 and Zara2) with 1,536 pedestrians recorded in the world coordinates. Following previous works [1,19], we adopt the standard leave-one-out strategy for the training and evaluation.\nEvaluation metrics. To measure the prediction performance of the baseline models with our ET space, we use four metrics: Average Displacement Error (ADE), Final Displacement Error (FDE), Temporal Correlation Coefficient (TCC) [80], and Collision rate (COL) [44]. The ADE and FDE compute the Euclidean distance between a predicted and a ground-truth trajectory and thier end-points, respectively. The TCC measures the Pearson correlation coefficient of motion patterns between a predicted and ground-truth trajectory, and the COL calculates the percentage of collision cases between agents on the predicted path. We use both the ADE and FDE as accuracy measures, and both the TCC and COL as reliability measures. Following [19], we generate s = 20 samples, and then choose the best path to evaluate the multi-modal trajectory prediction performance.\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/612c/612c48b4-c7ea-48ae-9b4f-ddf799548b89.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Figure 7. Examples of the prediction results from our EigenTrajectory predictor, compared to the baseline model in the conventiona Euclidean space. To aid visualization, the SGCN [73] is used, and we report one trajectory with the best FDE of s=20 samples each.</div>\n# 4.2. Evaluation Results\nEvaluation of the trajectory descriptors. First, we check the efficiency of our low-rank approximation method using the ET descriptor over other linear interpolation-based and parametric curve-based methods. The linear interpolationbased method predicts the coordinates of the first frame and the last frame of the predicted trajectory, and then equally divides and interpolates them to reconstruct the full frame points. B\u00b4ezier curve and B-spline predict a set of control points and then compute the full coordinates through matrix multiplication with the Bernstein polynomial and piecewise polynomial basis, respectively. Following [22,23,25], the order of both curves is set to 5. Tab. 1 shows that our descriptor is 87% more efficient than the results from the linear interpolation. This is because our ET descriptor can cover linear and non-linear movements of pedestrians with only 2-dimensional and 4-dimensional representations, respectively. Similarly, the ET descriptor shows superior low-rank approximation results even with the same k = 12 dimension as both the B\u00b4ezier curve and B-spline. We choose k = 6 in our space design which shows similar or better approximation accuracy than that of the existing parametric curve.\n# Evaluation of the trajectory prediction.\nate the prediction space with the public trajectory prediction benchmarks. As reported in Tab. 2, our EigenTrajectory framework achieves consistent performance improvements with all the baseline models. In particular, the prediction accuracy improves significantly, up to 74.3%. These results demonstrate that the trajectory forecasting models can benefit from our ET space rather than dealing with raw data, and make the prediction task tractable when using trajectory anchors. In addition, most of the trajectory reliability metrics also achieve improvements by predicting accurate and stable movement patterns, as visualized in Fig. 7.\nHowever, there are some limitations with our EigenTrajectory. The TCC metric is slightly worse in the ETH and hotel scenes because we remove the noisy motions through the truncation, but there are a lot of wobbling people in both scenes. In addition, due to the low-rank approximation, the macroscopic movements are leveraged, but the microscopic movements are removed. This is why there are more collisions in very complex UNIV and GCS scenes. In this case, it is important to find a good trade-off between the accuracy and reliability by adjusting k. Comparison with the state-of-the-art models. We compare our EigenTrajectory models with the state-of-the-art models. As shown in Tab. 3, our EigenTrajectory achieves a better accuracy by taking full advantage of our data-driven trajectory descriptor than those of the previous models. Furthermore, our EigenTrajectory shows a higher improvement than other generalized approaches such as NCE [44], Causal [10], GP-Graph [4], and NPSN [5]. While all of those approaches adhere to the conventional Euclidean space for the input and output, the introduction of our efficient descriptor can significantly improve the network ability.\n# 4.3. Ablation Studies\nEffectiveness of each component. We validate the effectiveness of each module optimized in our ET space. In Tab. 4, we only replace the input of the baseline models with the ET space and keep the output space as it is. In this case, we observe the marginal improvements. Next, we replace both the input and output space with the ET space, and achieve significant performance improvements. Here, we observe that the existing baseline network is struggling to predict all the points of the future path. Lastly, the best performance is obtained when our trajectory anchor is incorporated into the baseline model. Trajectory anchors. Next, we demonstrate the effective-\nModel\nETH\nHOTEL\nUNIV\nZARA1\nZARA2\nAVG\nSocial-LSTM [1]\n1.09/2.35\n0.79/1.76\n0.67/1.40\n0.47/1.00\n0.56/1.17\n0.72/1.54\nSocial-GAN [19]\n0.87/1.62\n0.67/1.37\n0.76/1.52\n0.35/0.68\n0.42/0.84\n0.61/1.21\nSTGAT [21]\n0.65/1.12\n0.35/0.66\n0.52/1.10\n0.34/0.69\n0.29/0.60\n0.43/0.83\nSocial-STGCNN [55]\n0.64/1.11\n0.49/0.85\n0.44/0.79\n0.34/0.53\n0.30/0.48\n0.44/0.75\nPECNet\u2020 [48]\n0.61/1.07\n0.22/0.39\n0.34/0.56\n0.25/0.45\n0.19/0.33\n0.32/0.56\nTrajectron++\u2020 [69]\n0.61/1.03\n0.20/0.28\n0.30/0.55\n0.24/0.41\n0.18/0.32\n0.31/0.52\nSGCN [73]\n0.57/1.00\n0.31/0.53\n0.37/0.67\n0.29/0.51\n0.22/0.42\n0.35/0.63\nLB-EBM\u2020 [59]\n0.60/1.06\n0.21/0.38\n0.28/0.54\n0.21/0.39\n0.15/0.30\n0.29/0.53\nAgentFormer\u2020 [102]\n0.46/0.80\n0.14/0.22\n0.25/0.45\n0.18/0.30\n0.14/0.24\n0.23/0.40\nExpertTraj [106]\n0.37/0.65\n0.11/0.15\n0.20/0.44\n0.15/0.31\n0.12/0.26\n0.19/0.36\nMemoNet [93]\n0.40/0.61\n0.11/0.17\n0.24/0.43\n0.18/0.32\n0.14/0.24\n0.21/0.35\nSocial-Implicit [56]\n0.66/1.44\n0.20/0.36\n0.31/0.60\n0.25/0.50\n0.22/0.43\n0.33/0.67\nMID [18]\n0.39/0.66\n0.13/0.22\n0.22/0.45\n0.17/0.30\n0.13/0.27\n0.21/0.38\nNCE-STGCNN [44]\n0.67/1.22\n0.44/0.68\n0.47/0.88\n0.33/0.52\n0.29/0.48\n0.44/0.76\nCausal-STGCNN [10]\n0.64/1.00\n0.38/0.45\n0.49/0.81\n0.34/0.53\n0.32/0.49\n0.43/0.66\nGP-Graph-STGCNN [4]\n0.48/0.77\n0.24/0.40\n0.29/0.47\n0.24/0.40\n0.23/0.40\n0.29/0.49\nNPSN-STGCNN [5]\n0.44/0.65\n0.21/0.34\n0.28/0.44\n0.25/0.43\n0.22/0.38\n0.28/0.45\nEigenTrajectory-STGCNN\n0.36/0.58\n0.15/0.22\n0.25/0.43\n0.22/0.39\n0.17/0.29\n0.23/0.38\nEigenTrajectory-AgentFormer 0.36/0.57\n0.15/0.22\n0.24/0.43\n0.22/0.40\n0.17/0.29\n0.23/0.38\nEigenTrajectory-Implicit\n0.36/0.57\n0.13/0.21\n0.24/0.43\n0.21/0.37\n0.15/0.26\n0.22/0.37\nEigenTrajectory-SGCN\n0.36/0.57\n0.13/0.21\n0.24/0.43\n0.20/0.35\n0.15/0.26\n0.22/0.36\nEigenTrajectory-PECNet\n0.36/0.57\n0.13/0.21\n0.24/0.43\n0.19/0.35\n0.14/0.25\n0.22/0.36\nEigenTrajectory-LB-EBM\n0.36/0.53\n0.12/0.19\n0.24/0.43\n0.19/0.33\n0.14/0.24\n0.21/0.34\nTable 3. Comparison EigenTrajectory methods with other state-ofthe-art stochastic models (ADE/FDE, Unit: meter). \u2020: Issues raised in the authors\u2019 GitHubs are fixed, Bold: Best, Underline: 2nd Best.\nModel\nETH\nHOTEL\nUNIV\nZARA1\nZARA2\nAVG\nBaseline\n0.57 / 1.00\n0.31 / 0.53\n0.37 / 0.67\n0.29 / 0.51\n0.23 / 0.42\n0.35 / 0.63\n+ Observed trajectory\n0.50 / 0.79\n0.21 / 0.34\n0.33 / 0.62\n0.27 / 0.48\n0.26 / 0.44\n0.31 / 0.53\n+ Predicted trajectory\n0.48 / 0.70\n0.17 / 0.27\n0.33 / 0.61\n0.26 / 0.47\n0.22 / 0.40\n0.29 / 0.49\n+ Trajectory anchor\n0.36 / 0.57\n0.13 / 0.21\n0.24 / 0.43\n0.20 / 0.35\n0.15 / 0.26\n0.22 / 0.36\nEuclidean anchor\n0.47 / 0.76\n0.18 / 0.30\n0.36 / 0.69\n0.35 / 0.67\n0.25 / 0.48\n0.32 / 0.58\nET anchor\n0.36 / 0.57\n0.14 / 0.23\n0.24 / 0.43\n0.22 / 0.40\n0.17 / 0.29\n0.23 / 0.38\nTable 4. Ablation study on trajectory anchor generated in different\nness of our ET space for trajectory anchor generation. Tab. 4 presents the results of an ablation study on the clustering space to obtain the data-driven trajectory anchors. The accuracy of the anchors from the ET space is much better compared to the Euclidean space. Additionally, the results are better than those of most state-of-the-art works, only with anchors without any refinement method. We think that the trajectory anchors offer an efficient initial trajectory candidate from the initial data, and better anchors can be estimated when clustering with lower dimensions. Non-linear trajectories. We evaluate how well the ET descriptor represent and predict non-linear trajectories. Following [19], we evaluate a case in which the linear approximation error of the future path is more than 0.02m. In Tab. 5, our ET space has a smaller performance drop, compared to the conventional Euclidean space. The prediction ability of a linear path is already saturated, so it is important to design a model to handle non-linear paths well. Since most of the paths in the dataset are straight, the output trajectories tend to be smooth during training. Nevertheless, our ET space shows a robust performance for these non-linear trajectories because our ET descriptor can explicitly represent non-linearity with the combinations of ET coefficients. Trajectory perturbation. Lastly, we examine the robustness of the prediction to input noise. To this end, we measure\nSpace\nType\nETH\nHOTEL\nUNIV\nZARA1\nZARA2\nAVG\nEuclidean\nAll\n0.57 / 1.00\n0.31 / 0.53\n0.37 / 0.67\n0.29 / 0.51\n0.23 / 0.42\n0.35 / 0.63\nNL\n0.65 / 1.16\n0.46 / 0.82\n0.49 / 0.92\n0.39 / 0.78\n0.50 / 1.03\n0.50 / 0.94\nDiff.\n-0.08 /-0.17 -0.15 /-0.29 -0.12 /-0.25 -0.11 /-0.28 -0.27 /-0.61 -0.15 /-0.32\nET\nET\nET\nAll\n0.36 / 0.57\n0.13 / 0.21\n0.24 / 0.43\n0.20 / 0.35\n0.15 / 0.26\n0.22 / 0.36\nNL\n0.41 / 0.65\n0.19 / 0.31\n0.32 / 0.55\n0.25 / 0.43\n0.32 / 0.53\n0.30 / 0.49\nDiff.\n-0.05 /-0.08 -0.06 /-0.10 -0.08 /-0.12 -0.05 /-0.08 -0.17 /-0.27 -0.08 /-0.13\nTable 5. Ablation study on non-linear trajectories on SGCN [73].\nTable 5. Ablation study on non-linear trajectories on SGCN [73]. NL: evaluations only with non-linear trajectories, Diff: Performance difference (ADE/FDE, Unit: meter). Bold: Best.\nSpace\nNoise\nETH\nHOTEL\nUNIV\nZARA1\nZARA2\nAVG\nEuclidean\n-\n0.57 / 1.00\n0.31 / 0.53\n0.37 / 0.67\n0.29 / 0.51\n0.23 / 0.42\n0.35 / 0.63\n0.02\n0.58 / 1.01\n0.35 / 0.59\n0.39 / 0.69\n0.30 / 0.54\n0.27 / 0.48\n0.38 / 0.66\n0.05\n0.63 / 1.09\n0.42 / 0.69\n0.45 / 0.79\n0.37 / 0.65\n0.35 / 0.61\n0.44 / 0.77\n0.10\n0.75 / 1.28\n0.60 / 1.00\n0.61 / 1.05\n0.56 / 0.98\n0.53 / 0.89\n0.61 / 1.04\nDiff.\n-0.18 /-0.29 -0.29 /-0.46 -0.24 /-0.38 -0.27 /-0.47 -0.31 /-0.47 -0.26 /-0.42\nET\nET\nET\n-\n0.36 / 0.57\n0.13 / 0.21\n0.24 / 0.43\n0.20 / 0.35\n0.15 / 0.26\n0.22 / 0.36\n0.02\n0.37 / 0.58\n0.14 / 0.22\n0.25 / 0.44\n0.21 / 0.37\n0.17 / 0.28\n0.23 / 0.38\n0.05\n0.41 / 0.62\n0.17 / 0.25\n0.29 / 0.48\n0.26 / 0.42\n0.20 / 0.32\n0.26 / 0.41\n0.10\n0.47 / 0.68\n0.25 / 0.33\n0.36 / 0.55\n0.36 / 0.53\n0.27 / 0.39\n0.34 / 0.50\nDiff.\n-0.11 /-0.11 -0.11 /-0.12 -0.11 /-0.12 -0.16 /-0.18 -0.12 /-0.13 -0.12 /-0.13\nTable 6. Ablation study on trajectory perturbation result of SGCN [73]. Noise: Standard deviation of Gaussian noise, Diff: Performance difference (ADE/FDE, Unit: meter). Bold:Best.\nthe change in prediction accuracy after adding a little Gaussian noise. In Tab. 6, our EigenTrajectory has a marginal performance drop when noise exists, compared to the baselines. In our ET space, because the principal motion pattern components are only left through the rank-k approximation, the negative effect of noise can be mitigated.\n# 5. Conclusion\nIn this work, we introduce a low-rank approximationbased trajectory descriptor trained in a data-driven manner to make a low-dimensional representation of pedestrian paths. While the existing architectures working in the Euclidean space suffer from the curse of dimensionality, we define a new operating space, the ET space, that unfolds highlyconjugated feature relations. We then cluster the coefficients of the ET descriptor coefficients on the training set, and utilize them as trajectory anchors. The architectures learn to refine this data-driven anchor to infer structurally-diverse trajectories that can cover all travelable paths. A variety of experiments demonstrate that it provides great applicability and stability, which can be applied to off-the-shelf trajectory forecasting models with consistent performance improvements on most public datasets.\nAcknowledgement This work is in part supported by the Institute of Information & communications Technology Planning & Evaluation (IITP) (No.2021-0-02068, Artificial Intelligence Innovation Hub), the National Research Foundation of Korea (NRF) (No.2020R1C1C1012635) grant funded by the Korea government (MSIT), GIST-MIT Research Collaboration grant funded by the GIST in 2023, and the Ministry of Trade, Industry and Energy (MOTIE) and Korea Institute of Advancement of Technology (KIAT) through the International Cooperative R&D program: P0019782, Embedded AI Based fully autonomous driving software and Maas technology development.\n",
    "paper_type": "method",
    "attri": {
        "background": "This paper addresses the issue of trajectory prediction, which is crucial for applications like autonomous navigation and social robots. Previous methods relied heavily on parametric curves like B\u00b4ezier and B-spline, which are not well-suited for modeling complex human dynamics and social interactions. The need for a new approach that can effectively capture the intricacies of pedestrian movement in a more natural way is evident.",
        "problem": {
            "definition": "The problem of trajectory prediction involves forecasting the future paths of agents based on their historical movements, represented as a series of spatial points.",
            "key obstacle": "Existing methods often struggle with high-dimensional data and fail to adequately capture the nuanced behaviors of pedestrians, leading to overfitting and unreliable predictions."
        },
        "idea": {
            "intuition": "The idea stems from the observation that human trajectory data can be represented more naturally in a lower-dimensional space that captures essential motion dynamics.",
            "opinion": "The proposed EigenTrajectory (ET) descriptor allows for a compact representation of pedestrian movements by transforming raw trajectory data into an ET space using low-rank approximations.",
            "innovation": "The primary innovation lies in the development of the ET descriptor, which leverages Singular Value Decomposition (SVD) to create a low-dimensional representation that retains the essential characteristics of pedestrian trajectories, contrasting with traditional parametric methods."
        },
        "method": {
            "method name": "EigenTrajectory",
            "method abbreviation": "ET",
            "method definition": "EigenTrajectory is a trajectory prediction method that uses a low-rank approximation of trajectory descriptors to represent pedestrian movements in a compact ET space.",
            "method description": "The method transforms historical pedestrian trajectory data into a lower-dimensional space, facilitating more accurate predictions of future movements.",
            "method steps": [
                "Decompose the trajectory data using Singular Value Decomposition (SVD).",
                "Perform a rank-k approximation to summarize the trajectory data with k eigenvectors.",
                "Project the observed trajectory into the ET space and predict future trajectories based on the coefficients of the eigenvectors.",
                "Use trajectory anchors to ensure diversity in the predicted paths."
            ],
            "principle": "The effectiveness of the ET method arises from its ability to capture the principal components of pedestrian movements, reducing noise and allowing for a more interpretable representation of trajectory dynamics."
        },
        "experiments": {
            "evaluation setting": "Experiments were conducted on four public datasets: ETH, UCY, Stanford Drone Dataset, and Grand Central Station, comparing the proposed ET method with several baseline models.",
            "evaluation method": "The performance of the ET method was evaluated using metrics such as Average Displacement Error (ADE), Final Displacement Error (FDE), Temporal Correlation Coefficient (TCC), and Collision Rate (COL)."
        },
        "conclusion": "The EigenTrajectory method significantly enhances trajectory forecasting accuracy and reliability across various benchmarks, demonstrating its potential as a robust solution for modeling pedestrian movements.",
        "discussion": {
            "advantage": "The ET method provides a more natural representation of pedestrian movements, leading to improved prediction accuracy and reduced overfitting compared to traditional methods.",
            "limitation": "The method may struggle with highly complex movements due to the low-rank approximation, which can lead to loss of finer details in trajectory representation.",
            "future work": "Future research could explore refining the low-rank approximation process and integrating more complex motion dynamics to further enhance prediction capabilities."
        },
        "other info": {
            "code repository": "Code is publicly available at https://github.com/inhwanbae/EigenTrajectory."
        }
    },
    "mount_outline": [
        {
            "section number": "2",
            "key information": "The paper addresses the issue of trajectory prediction, which is crucial for applications like autonomous navigation and social robots."
        },
        {
            "section number": "2.1",
            "key information": "The proposed EigenTrajectory (ET) descriptor allows for a compact representation of pedestrian movements by transforming raw trajectory data into an ET space using low-rank approximations."
        },
        {
            "section number": "2.2",
            "key information": "Existing methods often struggle with high-dimensional data and fail to adequately capture the nuanced behaviors of pedestrians, leading to overfitting and unreliable predictions."
        },
        {
            "section number": "3.1",
            "key information": "The EigenTrajectory method uses a low-rank approximation of trajectory descriptors to represent pedestrian movements in a compact ET space."
        },
        {
            "section number": "3.5",
            "key information": "The effectiveness of the ET method arises from its ability to capture the principal components of pedestrian movements, reducing noise and allowing for a more interpretable representation of trajectory dynamics."
        },
        {
            "section number": "5.1",
            "key information": "The performance of the ET method was evaluated using metrics such as Average Displacement Error (ADE), Final Displacement Error (FDE), Temporal Correlation Coefficient (TCC), and Collision Rate (COL)."
        },
        {
            "section number": "7.1",
            "key information": "The ET method may struggle with highly complex movements due to the low-rank approximation, which can lead to loss of finer details in trajectory representation."
        },
        {
            "section number": "7.3",
            "key information": "Future research could explore refining the low-rank approximation process and integrating more complex motion dynamics to further enhance prediction capabilities."
        }
    ],
    "similarity_score": 0.5712221459668573,
    "image": null,
    "path": "/home/dany/codes/autosurvey/outputs/2025-01-11-1421_trans/papers/EigenTrajectory_ Low-Rank Descriptors for Multi-Modal Trajectory Forecasting.json"
}