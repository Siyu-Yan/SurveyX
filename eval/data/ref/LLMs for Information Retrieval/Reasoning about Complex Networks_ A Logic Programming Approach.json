{
    "from": "arxiv",
    "scholar_id": null,
    "detail_id": "arXiv:2209.15067",
    "title": "Reasoning about Complex Networks: A Logic Programming Approach",
    "abstract": "Reasoning about complex networks has in recent years become an important topic of study due to its many applications: the adoption of commercial products, spread of disease, the diffusion of an idea, etc. In this paper, we present the MANCaLog language, a formalism based on logic programming that satisfies a set of desiderata proposed in previous work as recommendations for the development of approaches to reasoning in complex networks. To the best of our knowledge, this is the first formalism that satisfies all such criteria. We first focus on algorithms for finding minimal models (on which multi-attribute analysis can be done), and then on how this formalism can be applied in certain real world scenarios. Towards this end, we study the problem of deciding group membership in social networks: given a social network and a set of groups where group membership of only some of the individuals in the network is known, we wish to determine a degree of membership for the remaining group-individual pairs. We develop a prototype implementation that we use to obtain experimental results on two real world datasets, including a current social network of criminal gangs in a major U.S.\\ city. We then show how the assignment of degree of membership to nodes in this case allows for a better understanding of the criminal gang problem when combined with other social network mining techniques -- including detection of sub-groups and identification of core group members -- which would not be possible without further identification of additional group members.",
    "bib_name": "shakarian2022reasoningcomplexnetworkslogic",
    "md_text": "# Reasoning about Complex Networks: A Logic Programming Approach\nPAULO SHAKARIAN 1 GERARDO I. SIMARI 2 DEVON CALLAHAN 1\nGERARDO I. SIMARI 2 DEVON CALLAHAN \n1 Network Science Center and Dept. of Electrical Engineering and Computer Science U.S. Military Academy, West Point, NY 10996, USA 2 Department of Computer Science, University of Oxford Wolfson Building, Parks Road, Oxford OX1 3QD, United Kingdom (e-mail: paulo@shakarian.net, gerardo.simari@cs.ox.ac.uk, devon.callahan@usma.edu)\nsubmitted 9 April 2013; revised TBD; accepted TBD\nAbstract\nReasoning about complex networks has in recent years become an important topic of study due to its many applications: the adoption of commercial products, spread of disease, the diffusion of an idea, etc. In this paper, we present the MANCaLog language, a formalism based on logic programming that satisfies a set of desiderata proposed in previous work as recommendations for the development of approaches to reasoning in complex networks. To the best of our knowledge, this is the first formalism that satisfies all such criteria. We first focus on algorithms for finding minimal models (on which multi-attribute analysis can be done), and then on how this formalism can be applied in certain real world scenarios. Towards this end, we study the problem of deciding group membership in social networks: given a social network and a set of groups where group membership of only some of the individuals in the network is known, we wish to determine a degree of membership for the remaining group-individual pairs. We develop a prototype implementation that we use to obtain experimental results on two real world datasets, including a current social network of criminal gangs in a major U.S. city. We then show how the assignment of degree of membership to nodes in this case allows for a better understanding of the criminal gang problem when combined with other social network mining techniques\u2014including detection of sub-groups and identification of core group members\u2014which would not be possible without further identification of additional group members. KEYWORDS: Knowledge Representation, Reasoning under Uncertainty, Complex Networks, Social Networks\n# 1 Introduction and Related Work\nAn epidemic working through a population, cascading electrical power failures, product adoption, and the spread of a mutant gene are all examples of diffusion processes that can happen in complex networks. These network processes have been studied in a variety of disciplines, including computer science (Kempe et al. 2003), biology (Lieberman et al. 2005), sociology (Granovetter 1978), economics (Schelling 1978), and physics (Sood et al. 2008). Much existing work in this area is based on pre-existing models in sociology and economics\u2014 in particular the work of (Granovetter 1978; Schelling 1978). However, recent examinations of social networks\u2014both analysis of large data sets and observational studies\u2014have indicated that there may be additional factors to consider that are not taken into account\nby these models. These include the attributes of nodes and edges, competing diffusion processes, and time. In this paper, we propose MANCaLog (Multi-Attribute Networks and Cascades), a logical language for modeling multi-attribute processes in complex networks that can richly express how individuals in the network adopt or fail to adopt certain behaviors, and how these behaviors diffuse through the network. MANCaLog is based on a set of design criteria recently proposed in (Shakarian et al. 2013), and it is to the best of our knowledge the first logical language for modeling diffusion in complex networks that meets these criteria. We also introduce fixed-point based algorithms for computing the result of a diffusion process. Note that these algorithms are proven not only to be correct, but also to run in polynomial time. Hence, our approach can not only better express many aspects of multi-attribute processes in complex networks, but it can do so in a reasonable amount of time. Finally, we investigate applications by considering the problem of deciding group membership in social networks: given a social network and a set of groups where membership of only some of the individuals is known, we wish to determine a degree of membership for the remaining group-individual pairs. We also develop a prototype implementation that we use to obtain experimental results on two real world datasets, including a current social network of criminal gangs in a major U.S. city.\n# 1.1 Design Criteria\nIn recent work (Shakarian et al. 2013), we proposed a set of seven design criteria that we believe a framework for reasoning about multi-attribute processes in complex networks should satisfy. As a quick overview, these criteria are: (i) Multiply labeled and weighted nodes and edges: Many existing frameworks for studying diffusion in complex networks assume that there is only one type of vertex that may become \u201cactive\u201d or may \u201cmutate\u201d and only one possible relationship between nodes; however, in reality nodes and edges often have different properties. For instance, labels on edges can be used to differentiate between strong and weak ties (edge types); (ii) Explicit representation of time: Most work in the literature either assumes static models or makes several simplifying assumptions such as a model of time solely based on temporal decay of influence; we seek a richer model of temporal relationships between conditions in the network structure, the current state of the cascades in process, and how influence propagates; (iii) Non-Markovian temporal relationships: Temporal dependencies should be able to span multiple units of time; hence, the \u201cmemoryless\u201d mode of a standard Markov process is insufficient. We strive to create a framework where dependencies can be from other earlier time steps; (iv) Representation of uncertainty: In practice, it is not always possible to judge the attributes of all individuals in a network, and thus an element of uncertainty must be included. In connection with point (vii) below, this should not be at the expense of tractability; (v) Competing processes: Real-world situations often present competing network processes, where the success of one hinges on the failure of the other; (vi) Non-Monotonic Processes: Though in much existing work on diffusion processes in complex networks the number of nodes attaining a certain property at each time step can only increase, if we allow for competing cascades in the same model we cannot have such a strong restriction; and (vii) Tractability: The social networks of interest in today\u2019s data mining problems often have millions of nodes, and it is reasonable to expect that soon billion-node networks\nCriterion\nMANCaLog\nIC/LT\nSNOP\nCD\nEGT/VM\n1. Labels\nYes\nNo\nYes\nYes\nNo\n2. Explicit Representation of Time\nYes\nNo\nYes\nNo\nYes\n3. Non-Markovian Time\nYes\nNo\nNo\nNo\nNo\n4. Uncertainty\nYes\nYes\nYes\nYes\nYes\n5. Competing Processes\nYes\nNo\nNo\nYes\nYes\n6. Non-monotonic Processes\nYes\nNo\nNo\nYes\nYes\n7. Tractablity\nPTIME\n#P-hard\nPTIME\nPTIME\nNP-hard\nwill be commonplace. Any framework for dealing with these problems must be tractable and offer areas for practical improvement for further scalability.\n# 1.2 Related Work\nThe above criteria can be summarized as the desire to design the most expressive language for network cascades possible while still allowing computation of the outcome of a diffusion process to be completed in a tractable amount of time. As a comparison, let us briefly describe some relevant related work. Perhaps the best known general model for representing diffusion in complex networks is the independent cascade/linear threshold (IC/LT) model of (Kempe et al. 2003). However, although this framework was shown to be capable of expressing a wide variety of sociological models, it assumes the Markov property and does not allow for the representation of multiple attributes on vertices and edges. A more recent framework, social network optimization problems (SNOPs) (Shakarian et al. 2010) uses logic programming to allow for the representation of attributes, but this framework does not allow for competing processes or non-monotonic cascades. A related logic programming framework, competitive diffusion (CD) (Broecheler et al. 2010) allows for competitive diffusion and non-monotonic processes but does not explicitly represent time and also makes Markovian assumptions. Further, we also note that the semantics of CD yields a \u201cmost probable interpretation\u201d that is not a unique solution. Hence, a given model in that framework can lead to multiple and possibly contradictory, outcomes to a cascade (this problem is avoided in MANCaLog). Another popular class of models is Evolutionary Graph Theory (EGT) (Lieberman et al. 2005), which is highly related to the voter model (VM) (Sood et al. 2008). Although this framework allows for competing processes and non-monotonic diffusion, it also makes Markovian assumptions while not explicitly representing time. Further, determining the outcome of a cascade in those models is NP-hard, while determining the outcome in MANCaLog can be accomplished in polynomial time. Table 1 lists how these models compare to MANCaLog when considering our design criteria.\nThe rest of this paper is organized as follows: Section 2 presents the MANCaLog framework; Section 3 discusses consistency, entailment, and fixpoint computation of minimal models; Section 4 discusses applications in social networks and experimental results, and Section 5 includes conclusions and future work.\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/9b22/9b228bca-3943-456f-aec3-38152a472570.png\" style=\"width: 50%;\"></div>\nFig. 2. Simple online social network Gsoc. Solid edges are labeled with strTie and dashed edges with wkTie. White nodes are labeled with male and gray nodes with fem. Arrows represent the direction of the edge; double-headed edges represent two edges with the same label.\n# 2 The MANCaLog Language: Syntax and Semantics\nIn this work we assume that individuals (persons, agents, etc.) are arranged in a directed graph (or network) G = (V, E), where the set of nodes corresponds to the individuals, and the edges model the relationships between them. We also assume a set of labels L, which is partitioned into two sets: fluent labels Lf (labels that can change over time) and non-fluent labels Lnf (labels that do not); labels can be applied to both the nodes and edges of the network. We will use the notation G = V \u222aE to be the set of all components (nodes and edges) in the network. Thus, c \u2208G could be either a node or an edge.\nWe will use the sample online social network Gsoc shown in Figure 2 as the running example; Gsoc is used to denote the set of components of Gsoc. Here we have Lnf = {male, fem, strTie, wkTie} representing male, female, strong ties and weak ties, respectively. Additionally, we have Lf = {visPgA, visPgB} representing visiting webpage A and visiting webpage B, respectively. \u25a0\nWe now present a logical language where we use atoms, referring to labels and weights to describe properties of the nodes and edges. Though labels themselves could be modeled as atoms instead of predicates (to model non-ground labelings that allow for greate expressibility), for simplicity of presentation we leave this to future work. The first piece of the syntax is the network atom.\nDefinition 2.1 (Network Atom) Given label L \u2208L and real-valued interval bnd \u2286[0, 1] (referred to as a \u201cweight interval\u201d), a network atom is of the form \u27e8L, bnd\u27e9. A network atom is fluent (resp., non-fluent) if L \u2208Lf (resp., L \u2208Lnf ). The set of possible network atoms is denoted with NA.\nNetwork atoms describe properties of nodes and edges. The definition is intuitive: L represents a property of the vertex or edge, and associated with this property is some weight that may have associated uncertainty\u2014hence represented as an interval bnd, which can be open or closed. An invalid bound is represented by \u2205, which is equivalent to all other invalid bounds.\nFor some arbitrary label L \u2208L, we will use the notation Tr = \u27e8L, [0, 1]\u27e9and F = \u27e8L, \u2205\u27e9 to represent a tautology and contradiction, respectively. For ease of notation (and without loss of generality), we say that if there does not exist some bnd s.t. \u27e8L, bnd\u27e9\u2208W, then this implies that \u27e8L, [0, 1]\u27e9\u2208W.\nFollowing from Example 2.1, the network atom \u27e8female, [1, 1]\u27e9can be used to identify a node as a woman. World W = {\u27e8fem, [1, 1]\u27e9, \u27e8male, [0, 0]\u27e9, \u27e8visPgA, [1, 1]\u27e9, \u27e8visPgB, [0, 0]\u27e9} might be used to identify a woman who visits webpage A. Clearly, we have that W |= \u27e8fem, [1, 1]\u27e9\u2227\u00ac\u27e8visPgA, [0.5, 0.9]\u27e9\u2227\u00ac\u27e8visPgB, [0.1, 0.7]\u27e9. \u25a0\nThe idea is to use MANCaLog to describe how properties (specified by labels) o the nodes in the network change over time. We assume that there is some natura number tmax that specifies the total amount of time we are considering, and we us \u03c4 = {t | t \u2208[0, tmax]} to denote the set of all time points. How well a certain propert can be attributed to a node is based on a weight (to which the bnd bound in the networ atom refers). As time progresses, a weight can either increase/decrease and/or becom more/less certain. We now introduce the MANCaLog fact, which states that some networ atom is true for a node or edge during certain times.\nDefinition 2.4 (MANCaLog Fact) If [t1, t2] \u2286[0, tmax], c \u2208G, and a \u2208NA, then (a, c) : [t1, t2] is a MANCaLog fact. A fac is fluent (resp., non-fluent) if atom a is fluent (resp., non-fluent). All non-fluent fact must be of the form (a, c) : [0, tmax]. Let F be the set of all facts and Fnf, Ff be the se of all non-fluent and fluent facts, respectively.\nDefinition 2.5 (Integrity constraint) Given fluent network atom a and conjunction of network atoms b, an integrity constraint is of the form a \u2190\u0593 b.\nIntuitively, integrity constraint \u27e8L, bnd\u27e9\u2190\u0593 b means that if at a certain time point a component (vertex or edge) of the network has a set of properties specified by conjunction b, then at that same time the component\u2019s weight for label L must be in interval bnd. Following from the previous examples, the integrity constraint \u27e8male, [0, 0]\u27e9\u2190\u0593 \u27e8fem, [1, 1]\u27e9 would require any node designated as a female to not be male. We now turn to MANCaLog rules. The idea behind rules is simple: a node that meets\nsome criteria is influenced by the set of its neighbors who possess certain properties. The amount of influence exerted on a node by its neighbors is specified by an influence function, whose precise effects will be described later on when we discuss the semantics. As a result, a rule consists of four major parts: (i) an influence function, (ii) neighbor criteria, (iii) target criteria, and (iv) a target. Intuitively, (i) specifies how the neighbors influence the node in question, (ii) specifies which of the neighbors can influence the node, (iii) specifies the criteria that cause the node to be influenced, and (iv) is the property of the node that changes as a result of the influence. We will discuss each of these parts in turn, and then define rules in terms of these elements. First, we define influence functions and neighbor criteria.\nDefinition 2.6 (Influence Function) An influence function is a function ifl : N\u00d7 N \u2192[0, 1]\u00d7 [0, 1] that satisfies the following two axioms:\n1. ifl can be computed in constant (O(1)) time. 2. For x\u2032 > x we have ifl(x\u2032, y) \u2286ifl(x, y). We use IFL to denote the set of all influence function\nIntuitively, an influence function takes the number of qualifying influencers (those that meet some requirement to be able to influence a certain individual, yet may or may not carry a contagion) and the number of eligible influencers (those that meet some requirement to be able to influence a certain individual and carry a contagion) and returns a bound on the new value for the weight of the property of the target node that changes. In practice, we expect the time complexity of such a function to be polynomial in terms of its arguments. However, as both arguments are naturals bounded by the maximum degree of a node in the network, this value will be much smaller than the size of the network\u2014we thus treat it as a constant here.\nDefinition 2.7 (Neighbor Criterion) If gedge, gnode are non-fluent network formulas, h is a conjunction of network atoms, and ifl is an influence function, then (gedge, gnode, h)ifl is a neighbor criterion.\nIf gedge, gnode are non-fluent network formulas, h is a conjunction of network atoms, and ifl is an influence function, then (gedge, gnode, h)ifl is a neighbor criterion.\nFormulas gnode and h in a neighbor criterion specify the (non-fluent and fluent, respectively) criteria on a given neighbor, while formula gedge specifies the non-fluent criteria on the directed edge from that neighbor to the node in question. The next component is the \u201ctarget criteria\u201d, which are the conditions that a node must satisfy in order to be influenced by its neighbors. Ideas such as \u201csusceptibility\u201d (Aral and Walker 2012) can be integrated into our framework via this component. We represent these criteria with a formula of non-fluent network atoms. The final component, the \u201ctarget\u201d, is simply the label of the target node that is influenced by its neighbors. Hence, we now have all the pieces that comprise a rule.\nNote that the target (also referred to as the head) of the rule is a single label; essentially, the body of the rule characterizes a set of nodes, and this label is the one that is modified for each node in this set. More specifically, the rule states that when certain conditions for a node and its neighbors are met, the bnd bound for the network atom formed with label L on that node changes. Later, in the semantics, we introduce network interpretations, which map components (nodes and edges) of the network to worlds at a given point in time. The rule dictates how this mapping changes in \u2206t time steps.\nDefinition 2.9 (MANCaLog Program) A program P is a set of rules, facts, and integrity constraints s.t. each non-fluent fact F \u2208Fnf appears no more than once in the program. Let P be the set of all programs.\nExample 2.3 Following from the running example, supposse sftTp and ngTp are influence functions. Consider the following rules:\nRule R1 says that a female node in the network visits page A with a weight specified by the sftTp influence function if at a certain number of her strong ties (with weight of at least 0.9) visited the page two days ago. The rest of the rules can be read analogously. \u25a0\nNote that not all labels will necessarily apply to all nodes and edges in the network. For instance, certain labels may describe a relationship while others may only describe a property of an individual. If a given label L does not describe a certain component c of the network, then in a valid network interpretation NI, \u27e8L, [0, 1]\u27e9\u2208NI(c). We define a MANCaLog interpretation (simply referred to as \u201cinterpretation\u201d) as follows.\nI is a model for P iff it satisfies all rules, integrity constraints, and fluent facts in that program, strictly satisfies all non-fluent facts in the program, and for all L \u2208L, c \u2208G and t /\u2208TTS(I, c, L, P), \u27e8L, [0, 1]\u27e9\u2208I(c)(t). I is a canonical model for P iff it satisfies all rules, integrity constraints, and fluent facts in P, strictly satisfies all non-fluent facts in P, and for all L \u2208L, c \u2208G, and t /\u2208 TTS(I, c, L, P), \u27e8L, [0, 1]\u27e9\u2208I(c)(t) when t = 0 and \u27e8L, bnd\u27e9\u2208I(t)(c) where \u27e8L, bnd\u27e9\u2208 I(t \u22121)(c).\n# 3 Consistency, Entailment, and Fixpoint Model Computation\nIn this section we discuss consistency and entailment in MANCaLog programs, and explore the use of minimal models towards computing answers to these problems.\nDefinition 3.3 (Minimal Model) Given program P, the minimal model of P is a (canonical) interpretation I s.t. I |= P and for all (canonical) interpretation I\u2032 s.t. I\u2032 |= P, we have that I \u2291I\u2032.\nDefinition 3.4 Given program P, interpretation I, c \u2208G, L \u2208L, and t \u2208\u03c4, we define functions: \u2212FBnd(P, c, t, L) = \ufffd (\u27e8L,bnd\u27e9,c):[t1,t2]\u2208P s.t. t\u2208[t1,t2] bnd \u2212IBnd(P, c, t, L) = \ufffd \u27e8L,bnd\u27e9\u2190\u0593a\u2208P s.t. I(t)(c)|=a bnd \u2212RBnd(P, I, v, t, L) = \ufffd r\u2208P s.t. t\u2208TTS(I,v,L,P )\u2229TTS(I,v,r) Bound(r, v, I(t \u2212\u2206t)).\nDefinition 3.5 (\u0393 Operator) For a given MANCaLog program P, we define the operator \u0393P : I \u2192I as follows: For a given I, for each t \u2208\u03c4, c \u2208G, and L \u2208L, add \u27e8L, bnd\u27e9to \u0393P (I)(t)(c) where bnd is defined as: bnd = bndprv \u2229FBnd(P, c, t, L)\u2229IBnd(P, I, c, t, L)\u2229RBnd(P, I, c, t, L), where \u27e8L, bndprv\u27e9\u2208I(t)(c).\nIt is easy to show that \u0393 can be computed in polynomial time. Next, we introduce notation for repeated applications of \u0393.\nTheorem 3.1\nTheorem 3.1 Given interpretation I and program P, there exists a natural number k s.t. \u0393k P (I) = \u0393k+1 P (I), and k \u2208O(|P| \u00b7 din \u2217\u00b7 tmax \u00b7 |E|) where din \u2217 is the maximum in-degree in the network.\nGiven interpretation I and program P, there exists a natural number k s.t. \u0393k P (I) = \u0393k+1 P (I), and k \u2208O(|P| \u00b7 din \u2217\u00b7 tmax \u00b7 |E|) where din \u2217 is the maximum in-degree in the network.\nIn the following, we will use the notation \u0393\u2217 P to denote the iterated application of \u0393 after a number of steps sufficient for convergence; Theorem 3.1 means that we can efficiently compute \u0393\u2217 P . We also note that as a single application of \u0393 can be computed in polynomial time, this implies that we can find a minimal model of a MANCaLog program in polynomial time. We now prove the correctness of the operator. We do this first by proving a key lemma that, when combined with a claim showing that for consistent program P, \u0393\u2217 P is a model of P, tells us that \u0393\u2217 P is a minimal model for P. Following directly from this, we have that P is inconsistent iff \u0393\u2217 P = \u22a4.\nLemma 3.1 If I |= P and I\u2032 \u2291I then \u0393(I\u2032) \u2291I.\nTheorem 3.2 If program P is consistent then \u0393\u2217 P is a minimal model for P.\nThese results, when taken together, prove that tight entailment and consistency problems for MANCaLog can be solved in polynomial time, which is precisely what we set out to accomplish as part of our desiderata described in Section 1.\n# 4 An Application in Social Networks: Discussion and Experimental Results\nAn important problem with regard to social networks is to determine group membership of the nodes (individuals). In particular, we are interested in the problem where some of the individuals in the network have been identified as members of a particular group while the affiliation of the remainder is unknown. In our work with a major U.S. metropolitan police force, we have found this to be an important problem in combating gang violence. Since in most cases it is considered a criminal offense to simply be in a gang, many gang members deny any type of affiliation upon arrest. Hence, in order to better understand the dynamics of these criminal organizations, it becomes necessary to use the data at hand to try to identify those with unknown affiliation. One way in which this can be done is by using MANCaLog rules that assign a degree of membership for each group to each individual with an unknown affiliation; this degree is a number in the interval [0, 1] that specifies the confidence that they are in that group. To address this problem, we propose the following. Consider a social network of individuals (for the police, this network is created based on co-arrestee data). Each group is assigned a fluent label and, for this problem, only one time point is used. For each node i that is in a group g, we include the fact (\u27e8g, [1, 1]\u27e9, i) : [0, 0] and, for each g\u2032 \u0338= g, the fact (\u27e8g\u2032, [0, 0]\u27e9, i) : [0, 0]. For all other nodes j we include the fact (\u27e8g, [0, 1]\u27e9, j) : [0, 0] for each group g. We used a simple algorithm (not included due to space constraints) which creates influence functions and rules that assign degrees of membership based on the number of adjacent nodes within a given group. Then, by using the \u0393 function, we can compute the degree of membership for nodes with an unknown affiliation.\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/f99e/f99e6b80-9999-46fe-a7dd-116890e228ce.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Fig. 3. Histogram illustrating number of network atoms assigned a lower bound of greater than zero after the convergence of \u0393 (omitting network atoms assigned an initial lower bound of 1.0).</div>\n<div style=\"text-align: center;\"><img src=\"https://public-pdf-extract-kit.oss-cn-shanghai.aliyuncs.com/06c8/06c8bf6b-c164-4180-9748-b006640f8b35.png\" style=\"width: 50%;\"></div>\n<div style=\"text-align: center;\">Fig. 4. Visualization of a subgroup of a faction. Lower bound of degree of membership is shown. Core members are denoted with a triangle.</div>\nImplementation and Experimental Results. We implemented the \u0393 operator and the computation of its fixed point in Python 2.7.3 in 700 lines of code that leveraged the NetworkX library1. Additionally, we implemented a rule-learning algorithm and supporting routines in an additional 300 lines of code. The experiments were run on a computer equipped with an Intel X5677 Xeon Processor operating at 3.46 GHz with a 12 MB Cache running Red Hat Enterprise Linux version 6.1 and equipped with 70 GB of physical memory. We used two datasets: the previously described gang co-arrestee dataset provided by the police force of a major U.S. city, and a network derived from YouTube (based on channel subscriptions) (Yang and Leskovec 2012). The co-arrestee dataset consists of 2, 333 nodes and 3, 676 edges. The program used for this dataset consists of 58 rules. The YouTube dataset consists of 1, 134, 890 nodes and 2, 987, 624 edges, and we used a program with 47 rules. We note that the running time for the convergence of the \u0393 operator for the co-arrestee dataset was 38.41 seconds, while the running time for the much larger YouTube dataset was 63.6 hours; though this may be considered a long time, note that\nit is a one-time computation that allows us to answer many queries once the structure is\nit is a one-time computation that allows us to answer many queries once the structure is obtained. In Figure 3 we illustrate the number of nodes in the network whose lower bound on degree of membership for any of the groups increased after computing the convergence of \u0393. Note that in our target application, we were able to assign a non-zero degree of membership to several hundred nodes. With rare exceptions, for the co-arrestee network, nodes were assigned a degree of membership to only one group (gang faction). In order to get an understanding of the utility of assigning degree of membership, we consider the results of the convergence of the \u0393 operator used as input for some common social network analysis techniques that are likely to aid in police operations. We examine the sub-graph induced by individuals who had a degree of membership greater than or equal to 0.3 (a value chosen subjectively given the setup) for a certain gang faction. We then used the Louvain algorithm (Blondel et al. 2008) (modularity-maximizing) to identify sub-groups of that faction. The identification of sub-groups of such factions is useful to police to better understand the structure and dynamics of these organizations in order to improve law enforcement operations. The sub-graph induced by one such sub-group is shown in Figure 4. Note that the majority of the members in this sub-group have a degree of membership in the faction less than 1, which means that they were assigned by the \u0393 operator. This tells us that the sub-group might have been overlooked if degrees of membership were not being computed. Also, many of the individuals designated as \u201ccore members\u201d (shown with a triangle in the figure) based on shell decomposition (Seidman 1983) were also individuals whose degree of membership was determined by \u0393. Based on the work of (Kitsak et al. 2010), core members are thought to be key spreaders of information and thus also of interest for policing operations, particularly with regard to gathering intelligence on the sub-group in question.\n# 5 Conclusions and Future Work\nIn this paper, we presented the MANCaLog language for describing multi-attribute networks and cascades. We started by recalling seven criteria in the form of desiderata for such a formalism, and showed that MANCaLog meets all of them; to the best of our knowledge, this has not been accomplished by any previous model in the literature. We also implemented this language and applied it to the degree of membership problem in social networks and showed how the results can aid in real-world law enforcement operations. We also note that MANCaLog is the first language of its kind to consider network structure in the semantics, potentially opening the door for algorithms that leverage features of network topology to more efficient query answering algorithms. Currently, we are looking at other applications of MANCaLog as well as methods to learn rules that describe diffusion processes in social networks. In the near future, we shall also explore various types of queries that have been studied in the literature, such as finding nodes of maximum influence, identifying nodes that cause a cascade to spread more quickly, and identifying nodes that can be influenced in order to halt a cascade. Acknowledgments. This work was supported by ARO project 2GDATXR042 and UK EPSRC grant EP/J008346/1 (\u201cPrOQAW\u201d).\n# References\n",
    "paper_type": "method",
    "attri": {
        "background": "Reasoning about complex networks has become an important topic of study due to its many applications, including the adoption of commercial products, spread of disease, and diffusion of ideas. Previous methods have limitations that necessitate a new approach, leading to the development of MANCaLog.",
        "problem": {
            "definition": "The paper addresses the challenge of determining group membership in social networks, specifically identifying degrees of membership for individuals whose affiliations are unknown.",
            "key obstacle": "Existing methods do not adequately account for the complexities of multi-attribute processes in networks, thus failing to provide accurate group membership assessments."
        },
        "idea": {
            "intuition": "The idea for MANCaLog stemmed from recognizing the need for a formalism that can capture the dynamics of multi-attribute processes and their diffusion through networks.",
            "opinion": "MANCaLog is a logical language designed to model these processes effectively, enabling better understanding and analysis of behaviors in complex networks.",
            "innovation": "MANCaLog is unique in that it satisfies a comprehensive set of design criteria not met by previous models, allowing for richer representation and efficient computation of diffusion outcomes."
        },
        "method": {
            "method name": "MANCaLog",
            "method abbreviation": "MANCaLog",
            "method definition": "MANCaLog is a formalism based on logic programming for modeling multi-attribute processes in complex networks, facilitating the analysis of behaviors and their diffusion.",
            "method description": "The method utilizes logical constructs to represent and compute the influence of network attributes over time.",
            "method steps": [
                "Define the network structure and attributes.",
                "Apply MANCaLog rules to model interactions and influences.",
                "Compute the degree of membership for unknown affiliations using the \u0393 operator."
            ],
            "principle": "MANCaLog's effectiveness lies in its ability to represent complex relationships and dependencies in networks, allowing for accurate modeling of multi-attribute diffusion processes."
        },
        "experiments": {
            "evaluation setting": "Experiments were conducted using two datasets: a social network of criminal gang co-arrestees and a YouTube network based on channel subscriptions.",
            "evaluation method": "The performance was assessed by implementing the \u0393 operator and measuring the convergence time and accuracy of group membership assignments."
        },
        "conclusion": "MANCaLog successfully meets the design criteria for reasoning about multi-attribute networks, demonstrating its applicability in real-world scenarios such as law enforcement operations by providing insights into group memberships.",
        "discussion": {
            "advantage": "The primary advantage of MANCaLog is its ability to express complex multi-attribute relationships while maintaining computational efficiency, enabling practical applications in social network analysis.",
            "limitation": "The method may encounter challenges in scalability when applied to extremely large networks, as evidenced by the significant computation time required for the YouTube dataset.",
            "future work": "Future research will explore additional applications of MANCaLog, rule learning for diffusion processes, and various query types related to influence and cascade dynamics in networks."
        },
        "other info": {
            "acknowledgments": "This work was supported by ARO project 2GDATXR042 and UK EPSRC grant EP/J008346/1 ('PrOQAW')."
        }
    },
    "mount_outline": [
        {
            "section number": "1.1",
            "key information": "Natural Language Processing (NLP) has evolved to address complex tasks, including reasoning about networks, which is crucial for applications like social network analysis."
        },
        {
            "section number": "2.1",
            "key information": "MANCaLog is a formalism based on logic programming for modeling multi-attribute processes in complex networks, facilitating the analysis of behaviors and their diffusion."
        },
        {
            "section number": "3.1",
            "key information": "The paper addresses the challenge of determining group membership in social networks, specifically identifying degrees of membership for individuals whose affiliations are unknown."
        },
        {
            "section number": "3.3",
            "key information": "Existing methods do not adequately account for the complexities of multi-attribute processes in networks, thus failing to provide accurate group membership assessments."
        },
        {
            "section number": "5.1",
            "key information": "MANCaLog effectively represents complex relationships and dependencies in networks, allowing for accurate modeling of multi-attribute diffusion processes."
        },
        {
            "section number": "7.1",
            "key information": "The method may encounter challenges in scalability when applied to extremely large networks, as evidenced by the significant computation time required for the YouTube dataset."
        },
        {
            "section number": "8",
            "key information": "MANCaLog successfully meets the design criteria for reasoning about multi-attribute networks, demonstrating its applicability in real-world scenarios such as law enforcement operations by providing insights into group memberships."
        }
    ],
    "similarity_score": 0.5580921099907871,
    "image": null,
    "path": "/home/dany/codes/autosurvey/outputs/2025-01-12-1934_natur/papers/Reasoning about Complex Networks_ A Logic Programming Approach.json"
}